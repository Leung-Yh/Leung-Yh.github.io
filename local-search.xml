<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/12/28/GitNote/"/>
    <url>/2022/12/28/GitNote/</url>
    
    <content type="html"><![CDATA[<h2 id="修改commit注释"><a href="#修改commit注释" class="headerlink" title="修改commit注释"></a>修改commit注释</h2><p><a href="https://blog.csdn.net/xiaoyulike/article/details/119176756">Git使用小技巧【修改commit注释, 超详细】-CSDN博客</a></p><h2 id="gitignore不生效的问题"><a href="#gitignore不生效的问题" class="headerlink" title=".gitignore不生效的问题"></a>.gitignore不生效的问题</h2><p><a href="https://blog.csdn.net/Saintmm/article/details/120847019">.gitignore不生效问题解决方法-CSDN博客</a></p><ul><li><p>第一种方法</p></li><li><p>.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</p></li><li><p>原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</p></li><li><p>解决方法: git清除本地缓存（改变成未track状态），然后再提交:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git rm -r --cached .<br>git add .<br>git commit -m &#x27;update .gitignore&#x27;<br>git push -u origin master<br></code></pre></td></tr></table></figure></li><li><p>需要特别注意的是：</p></li><li><p>1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p></li><li><p>2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。</p></li></ul><h2 id="git-全局忽略文件"><a href="#git-全局忽略文件" class="headerlink" title="git 全局忽略文件"></a>git 全局忽略文件</h2><p><a href="https://cloud.tencent.com/developer/article/1826509">git全局忽略文件</a></p><ul><li><p>git add file_name 报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">The following paths are ignored by one of your .gitignore files:  <br>xxx/index.js<br>hint: Use -f if you really want to add them.<br>hint: Turn this message off by running<br>hint: &quot;git config advice.addIgnoredFile false&quot;<br></code></pre></td></tr></table></figure></li><li><p>解决办法：</p><ul><li><p>使用命令 <code>git check-ignore -v file name</code> 去检测忽略配置来源于哪个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">% git check-ignore -v src/components/app/index.js<br>/Users/xx/.gitignore_global:3:index.jssrc/components/app/index.js<br></code></pre></td></tr></table></figure></li><li><p>然后 cat 查看内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">% cat /Users/xx/.gitignore_global<br>*~<br>.DS_Store<br>index.js<br></code></pre></td></tr></table></figure></li><li><p>发现忽略列表里面添加了<code>index.js</code>，然后去掉就可以了。</p></li></ul></li></ul><h2 id="推送-x2F-克隆仓库时报错"><a href="#推送-x2F-克隆仓库时报错" class="headerlink" title="推送&#x2F;克隆仓库时报错"></a>推送&#x2F;克隆仓库时报错</h2><p>解决方法：</p><ul><li><p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</p></li><li><p>方法一：解除 SSL 验证</p><p><code>git config --global http.sslVerify &quot;false&quot;</code></p></li><li><p>方案二：取消代理（需要到项目工程目录打开Git Bash）</p><p><code>git config --global --unset http.proxy</code><br><code>git config --global --unset https.proxy </code></p></li></ul><h2 id="Git-SSH配置"><a href="#Git-SSH配置" class="headerlink" title="Git SSH配置"></a>Git SSH配置</h2><p><a href="https://www.cnblogs.com/OnlyAR/p/16155406.html">配置SSH连接Git教程 - Only(AR) - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/3f4b2ede5a93">git ssh配置、密钥创建 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/hell_oword/article/details/121591131">IDEA 配置SSH 方式访问 GIT_半吊子Kyle的博客-CSDN博客_idea git ssh</a></p><h2 id="Git-概述"><a href="#Git-概述" class="headerlink" title="Git 概述"></a>Git 概述</h2><p>Git 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。</p><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p><h3 id="何为版本控制"><a href="#何为版本控制" class="headerlink" title="何为版本控制"></a>何为版本控制</h3><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>版本控制最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</p><h3 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h3><p>个人开发过渡到团队协作。</p> <img src="image-20230106204027508.png" alt="image-20230106204027508" style="zoom:80%;" /><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><h4 id="集中式版本控制工具"><a href="#集中式版本控制工具" class="headerlink" title="集中式版本控制工具"></a>集中式版本控制工具</h4><p>CVS、SVN(Subversion)、VSS……</p><p>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><h4 id="分布式版本控制工具"><a href="#分布式版本控制工具" class="headerlink" title="分布式版本控制工具"></a>分布式版本控制工具</h4><p>Git、Mercurial、Bazaar、Darcs……</p><p>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</p><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</p><ol><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</li></ol><h3 id="Git-工作机制"><a href="#Git-工作机制" class="headerlink" title="Git 工作机制"></a>Git 工作机制</h3> <img src="image-20230106205737294.png" alt="image-20230106205737294" style="zoom:80%;" /><h3 id="Git-和代码托管中心"><a href="#Git-和代码托管中心" class="headerlink" title="Git 和代码托管中心"></a>Git 和代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。</p><p>➢ 局域网</p><ul><li>✓ GitLab</li></ul><p>➢ 互联网</p><ul><li>✓ GitHub（外网）</li><li>✓ Gitee 码云（国内网站）</li></ul><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h3 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h3><ul><li>1 ）基本语法<ul><li>git config –global user.name 用户名</li><li>git config –global user.email 邮箱</li></ul></li><li>说明：<ul><li>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。</li><li><strong>Git 首次安装必须设置一下用户签名，否则无法提交码。</strong></li><li>注意：这里设置用户签名和将来登录代码托管中心的账号没有任何关系。</li></ul></li></ul><h3 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h3><ul><li><p>1）基本语法</p><ul><li>git init</li></ul></li><li><p>2）案例实操</p> <img src="image-20230106213128973.png" alt="image-20230106213128973" style="zoom:80%;" /></li><li><p>3）结果查看</p> <img src="image-20230106212936602.png" alt="image-20230106212936602" style="zoom:80%;" /></li></ul><h3 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h3><ul><li><p>1）基本语法</p><ul><li>git status</li></ul></li><li><p>2）案例实操</p><ul><li><p>首次查看（ 工作区没有任何文件）</p> <img src="image-20230106213105720.png" alt="image-20230106213105720" style="zoom:80%;" /></li><li><p>新增文件（hello.txt ）</p> <img src="image-20230106213402460.png" alt="image-20230106213402460" style="zoom:80%;" /></li><li><p>再次查看（ 检测到未追踪的文件）</p> <img src="image-20230106213430095.png" alt="image-20230106213430095" style="zoom:80%;" /></li></ul></li></ul><h3 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="添加暂存区"></a>添加暂存区</h3><h4 id="将工作区的文件添加到暂存区"><a href="#将工作区的文件添加到暂存区" class="headerlink" title="将工作区的文件添加到暂存区"></a>将工作区的文件添加到暂存区</h4><ul><li><p>1）基本语法</p><ul><li>git add 文件名</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230106213838372.png" alt="image-20230106213838372" style="zoom:80%;" /></p></li><li><p>3）查看状态（检测到暂存区 有新文件）</p><p>​ <img src="image-20230106214049363.png" alt="image-20230106214049363" style="zoom:80%;" /></p></li></ul><h3 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h3><h4 id="将暂存区的-文件-提交到本地库"><a href="#将暂存区的-文件-提交到本地库" class="headerlink" title="将暂存区的 文件 提交到本地库"></a>将暂存区的 文件 提交到本地库</h4><ul><li><p>1 ）基本语法</p><ul><li>git commit -m “ 日志信息” 文件名</li></ul></li><li><p>2）案例实操</p><p>​  <img src="image-20230106214533950.png" alt="image-20230106214533950" style="zoom:80%;" /></p></li><li><p>3）查看状态（没有文件需要提交）</p><p>​ <img src="image-20230106214653731.png" alt="image-20230106214653731" style="zoom:80%;" /></p></li></ul><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><ul><li><p>2）案例实操</p><p>​ <img src="image-20230106215422405.png" alt="image-20230106215422405" style="zoom:80%;" /></p></li><li><p>3）查看状态（检测到工作区有文件被修改）</p><p>​ <img src="image-20230106215500028.png" alt="image-20230106215500028" style="zoom:80%;" /></p></li><li><p>4）将修改的文件再次添加暂存区</p><p>​ <img src="image-20230106215553985.png" alt="image-20230106215553985" style="zoom:80%;" /></p></li><li><p>5）查看状态（工作区的修改添加到了暂存区）</p><p>​ <img src="image-20230106215624518.png" alt="image-20230106215624518" style="zoom:80%;" /></p></li><li><p>6）提交</p><p>​ <img src="image-20230106215733466.png" alt="image-20230106215733466" style="zoom:80%;" /></p></li><li><p>7）查看状态</p><p>​ <img src="image-20230106215802038.png" alt="image-20230106215802038" style="zoom:80%;" /></p></li><li><p>8）查看历史版本</p><p>​ <img src="image-20230106215829602.png" alt="image-20230106215829602" style="zoom:80%;" /></p></li><li><p>9）查看文件（最新的文件）</p><p>​ <img src="image-20230106215935963.png" alt="image-20230106215935963" style="zoom:80%;" /></p></li></ul><h3 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h3><h4 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h4><ul><li><p>1）基本语法</p><ul><li>git reflog 查看版本信息</li><li>git log 查看版本详细信息</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230106220720091.png" alt="image-20230106220720091" style="zoom:80%;" /></p></li></ul><h4 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h4><p><strong>Git 切换版本，底层其实是移动的 HEAD 指针</strong></p><ul><li><p>1）基本语法</p><ul><li>git reset –hard 版本号</li></ul></li><li><p>2）案例实操</p><p>​  <img src="image-20230106221158735.png" alt="image-20230106221158735" style="zoom:80%;" /></p></li></ul><h2 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h2><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p><img src="image-20230106230719807.png" alt="image-20230106230719807" style="zoom:80%;" /><h3 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h3><ul><li><p>同时并行推进多个功能开发，提高开发效率。</p></li><li><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。</p><p>失败的分支删除重新开始即可</p></li></ul><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ul><li><p>1）基本语法</p><ul><li>git branch -v</li></ul></li><li><p>2 ）案例实操</p><p>​ <img src="image-20230106231012648.png" alt="image-20230106231012648" style="zoom:80%;" /></p></li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><ul><li><p>1）基本语法</p><ul><li>git branch 分支名</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230106231136981.png" alt="image-20230106231136981" style="zoom:80%;" /></p></li></ul><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ul><li><p>1）基本语法</p><ul><li>git checkout 分支名</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230106231328075.png" alt="image-20230106231328075" style="zoom:80%;" /></p></li><li><p>3）查看两个分支上的内容，会有不同</p><p>​ <img src="image-20230106231922976.png" alt="image-20230106231922976" style="zoom:80%;" /></p><p>​ <img src="image-20230106231831338.png" alt="image-20230106231831338" style="zoom:80%;" /></p><p>​ <img src="image-20230106231851823.png" alt="image-20230106231851823" style="zoom:80%;" /></p></li></ul><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ul><li><p>1）基本语法</p><ul><li><p>git merge 分支名</p><p>作用：把指定的分支合并到当前分支</p></li></ul></li><li><p>2）案例实操 在 master 分支上合并 hot-fix 分支</p><ul><li>注意：要先转到 master 分支上（因为只能合并到“当前分支”）</li></ul><p>​ <img src="image-20230106232300453.png" alt="image-20230106232300453" style="zoom:80%;" /></p></li></ul><h4 id="产生冲突"><a href="#产生冲突" class="headerlink" title="产生冲突"></a>产生冲突</h4><ul><li><p>冲突产生的表现：后面状态为 MERGING</p> <img src="image-20230106233323077.png" alt="image-20230106233323077" style="zoom:80%;" /></li><li><p>冲突产生的原因：</p><p>合并分支时，两个分支在 同一个文件的同一个位置有两套完全不同的修改。</p><p>Git 无法替我们决定使用哪一个。必须 人为决定新代码内容。</p>  <img src="image-20230106233531823.png" alt="image-20230106233531823" style="zoom:80%;" />  <img src="image-20230106233551977.png" alt="image-20230106233551977" style="zoom:80%;" /></li><li><p>查看状态（检测到有文件有两处修改）</p> <img src="image-20230106233703433.png" alt="image-20230106233703433" style="zoom:80%;" /></li></ul><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><ul><li><p>1）编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><ul><li><p>特殊符号：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD <br>当前分支的代码 <br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> <br>合并过来的代码 <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix<br></code></pre></td></tr></table></figure> <img src="image-20230106232938866.png" alt="image-20230106232938866" style="zoom:80%;" /></li><li><p>修改为：</p> <img src="image-20230106234005152.png" alt="image-20230106234005152" style="zoom:80%;" /></li></ul></li><li><p>2）添加到暂存区</p> <img src="image-20230106234149553.png" alt="image-20230106234149553" style="zoom:80%;" /></li><li><p>3）执行提交（注意：此时使用 git commit 命令时<strong>不能带文件名</strong>）</p> <img src="image-20230106234255320.png" alt="image-20230106234255320" style="zoom:80%;" /></li></ul><h3 id="创建分支和切换分支图解"><a href="#创建分支和切换分支图解" class="headerlink" title="创建分支和切换分支图解"></a>创建分支和切换分支图解</h3><img src="image-20230106234341029.png" alt="image-20230106234341029" style="zoom:80%;" /><ul><li>master、hot-fix 其实都是指向具体版本记录的指针。</li><li>当前所在的分支，其实是由 HEAD决定的。所以创建分支的本质就是多创建一个指针。</li><li>HEAD 如果指向 master，那么我们现在就在 master 分支上。</li><li>HEAD 如果执行 hotfix，那么我们现在就在 hotfix 分支上。</li><li>所以切换分支的本质就是移动 HEAD 指针。</li></ul><h2 id="Git-团队协作机制"><a href="#Git-团队协作机制" class="headerlink" title="Git 团队协作机制"></a>Git 团队协作机制</h2><h3 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h3><img src="image-20230108153555307.png" alt="image-20230108153555307" style="zoom:80%;" /><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><img src="image-20230108153626783.png" alt="image-20230108153626783" style="zoom:80%;" /><h2 id="GitHub-操作"><a href="#GitHub-操作" class="headerlink" title="GitHub 操作"></a>GitHub 操作</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3> <img src="image-20230108154506096.png" alt="image-20230108154506096" style="zoom:80%;" /> <img src="image-20230108154513978.png" alt="image-20230108154513978" style="zoom:80%;" /><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后<br/>与当前本地分支直接合并</td></tr></tbody></table><h4 id="创建远程仓库别名"><a href="#创建远程仓库别名" class="headerlink" title="创建远程仓库别名"></a>创建远程仓库别名</h4><ul><li><p>1）基本语法</p><ul><li>git remote -v        查看当前所有远程地址别名</li><li>git remote add 别名 远程地址</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230108155153542.png" alt="image-20230108155153542" style="zoom:80%;" /></p></li></ul><h4 id="推送分支时报错"><a href="#推送分支时报错" class="headerlink" title="推送分支时报错"></a>推送分支时报错</h4><ul><li><p>报错提示：</p>  <img src="image-20230108160353701.png" alt="image-20230108160353701" style="zoom:80%;" /></li><li><p>解决方法：</p><ul><li><p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</p></li><li><p>方法一：解除 SSL 验证</p><p><code>git config --global http.sslVerify &quot;false&quot;</code></p></li><li><p>方案二：取消代理</p><p><code>git config --global --unset http.proxy</code><br><code>git config --global --unset https.proxy </code></p></li></ul></li><li><p>报错提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git push -u origin master<br>fatal: &#x27;git@github.com/zejun_web&#x27; does not appear to be a git repository<br>fatal: Could not read from remote repository.<br> <br>Please make sure you have the correct access rights and the repository exists.<br></code></pre></td></tr></table></figure></li><li><p>解决方法：</p><ul><li><p><a href="https://blog.csdn.net/qq_42412061/article/details/122535952">git push失败，报错fatal: does not appear to a git repository … …</a></p></li><li><p>先检查一下git remote -v</p><p> <img src="/2022/12/28/GitNote/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAfmhlYXJ05bCG5b-D5q-U5b-D,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p></li><li><p>发现是 remote 命令错了</p></li><li><p>先 remove 掉，再添加再远程的 origin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote rm origin<br></code></pre></td></tr></table></figure><p> <img src="/2022/12/28/GitNote/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAfmhlYXJ05bCG5b-D5q-U5b-D,size_8,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p></li><li><p>再次使用 git remote -v 查看，发现已经没有 origin 了</p><p> <img src="/2022/12/28/GitNote/image-20230523233921484.png" alt="image-20230523233921484"></p></li><li><p>再正确输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote add origin https://gitee.com/shenlinlang/personal.git<br></code></pre></td></tr></table></figure></li><li><p>再 git push 就可以了</p><p> <img src="/2022/12/28/GitNote/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAfmhlYXJ05bCG5b-D5q-U5b-D,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p></li></ul></li></ul><h4 id="推送本地分支到远程仓库"><a href="#推送本地分支到远程仓库" class="headerlink" title="推送本地分支到远程仓库"></a>推送本地分支到远程仓库</h4><ul><li><p>1）基本语法</p><ul><li>git push 别名 <strong>分支</strong></li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230108160902941.png" alt="image-20230108160902941" style="zoom:80%;" /></p></li></ul><h4 id="拉取远程库到本地库"><a href="#拉取远程库到本地库" class="headerlink" title="拉取远程库到本地库"></a>拉取远程库到本地库</h4><ul><li><p>1）基本语法</p><ul><li>git pull 远程地址 分支</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230108161731212.png" alt="image-20230108161731212" style="zoom:80%;" /></p><p>​ <img src="image-20230108161836897.png" alt="image-20230108161836897" style="zoom:80%;" /></p></li></ul><h4 id="克隆远程库到本地"><a href="#克隆远程库到本地" class="headerlink" title="克隆远程库到本地"></a>克隆远程库到本地</h4><p><strong>总结：</strong>clone 会做如下操作： 1、拉取代码。 2、初始化本地仓库。 3、创建别名</p><ul><li><p>1）基本语法</p><ul><li>git clone 远程地址</li></ul></li><li><p>2）案例实操</p><p>​ <img src="image-20230108162421380.png" alt="image-20230108162421380" style="zoom:80%;" /></p><p>​ <img src="image-20230108162526985.png" alt="image-20230108162526985" style="zoom:80%;" /></p></li></ul><h4 id="邀请加入团队"><a href="#邀请加入团队" class="headerlink" title="邀请加入团队"></a>邀请加入团队</h4><ul><li><p>1）选择邀请合作者</p><p>​ <img src="image-20230108163215323.png" alt="image-20230108163215323" style="zoom: 50%;" /></p></li><li><p>2）填入想要合作的人</p><p>​ <img src="image-20230108163336295.png" alt="image-20230108163336295" style="zoom:50%;" /></p></li><li><p>3）复 制 地 址 并 通 过 微 信 钉 钉 等 方 式 发 送 给 该 用 户 ， 复 制 内 容 如 下 ：<br><a href="https://github.com/atguiguyueyue/git-shTest/invitations">https://github.com/atguiguyueyue/git-shTest/invitations</a></p><p>​ <img src="image-20230108163355955.png" alt="image-20230108163355955" style="zoom:50%;" /></p></li><li><p>4）在 atguigulinghuchong 这个账号中的地址栏复制收到邀请 的 链接，点击接受邀请</p><p>​ <img src="image-20230108163427200.png" alt="image-20230108163427200" style="zoom:50%;" /></p></li><li><p>5）在成功之后可以在 atguigulinghuchong 这个账号上看到 git-Test 的远程仓库</p><p>​ <img src="image-20230108163501417.png" alt="image-20230108163501417" style="zoom:50%;" /></p></li><li><p>6）令狐冲可以修改内容并 push 到远程仓库</p></li></ul><h3 id="跨团队协作-1"><a href="#跨团队协作-1" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><ul><li><p>1）将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败</p><p>​ <img src="image-20230108163702170.png" alt="image-20230108163702170" style="zoom:50%;" /></p></li><li><p>2）在东方不败的 GitHub 账号里的地址栏复制收到的链接，然后点击 Fork 将项目叉到自己的本地仓库</p><p>​ <img src="image-20230108163729677.png" alt="image-20230108163729677" style="zoom:50%;" /></p><p>​叉成功后可以看到当前仓库信息</p><p>​ <img src="image-20230108163758564.png" alt="image-20230108163758564" style="zoom:50%;" /></p></li><li><p>3）东方不败就可以在线编辑叉取过来的文件</p><p>​ <img src="image-20230108163823073.png" alt="image-20230108163823073" style="zoom:50%;" /></p><p>​ <img src="image-20230108163832604.png" alt="image-20230108163832604" style="zoom:50%;" /></p></li><li><p>4）编辑完毕后，填写描述信息并点击左下角绿色按钮提交</p><p>​ <img src="image-20230108163850670.png" alt="image-20230108163850670" style="zoom:50%;" /></p></li><li><p>5）接下来点击上方的 Pull 请求，并创建一个新的请求</p><p>​ <img src="image-20230108163924035.png" alt="image-20230108163924035" style="zoom:50%;" /></p><p>​ <img src="image-20230108163933589.png" alt="image-20230108163933589" style="zoom:50%;" /></p> <img src="image-20230108163944931.png" alt="image-20230108163944931" style="zoom:50%;" /></li><li><p>6）回到岳岳 GitHub 账号可以看到有一个 Pull request 请求</p><p>​ <img src="image-20230108164008099.png" alt="image-20230108164008099" style="zoom:50%;" /></p><p>​<img src="image-20230108164017489.png" alt="image-20230108164017489" style="zoom: 40%;" /></p><p>​ 进入到聊天室，可以讨论代码相关内容</p><p>​ <img src="image-20230108164108291.png" alt="image-20230108164108291" style="zoom:50%;" /></p> <img src="image-20230108164147173.png" alt="image-20230108164147173" style="zoom:50%;" /></li><li><p>7）如果代码没有问题，可以点击 Merge pull reque 合并代码</p><p>​ <img src="image-20230108164220330.png" alt="image-20230108164220330" style="zoom:50%;" /></p><p>​ <img src="image-20230108164234462.png" alt="image-20230108164234462" style="zoom:50%;" /></p></li></ul><h3 id="SSH-免密登录"><a href="#SSH-免密登录" class="headerlink" title="SSH 免密登录"></a>SSH 免密登录</h3><p>我们可以看到远程仓库中还有一个 SSH 的地址，因此我们也可以使用 SSH 进行访问。</p> <img src="image-20230108165403972.png" alt="image-20230108165403972" style="zoom:67%;" /><p>具体操作如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">--进入当前用户的家目录<br>Layne@LAPTOP-Layne MINGW64 <span class="hljs-string">/d/Git-Space/SH0720</span> <span class="hljs-params">(master)</span><br>$ <span class="hljs-keyword">cd</span><br>--删除<span class="hljs-string">.ssh</span> 目录<br>Layne@LAPTOP-Layne MINGW64 ~<br>$ rm -rvf <span class="hljs-string">.ssh</span><br>removed &#x27;<span class="hljs-string">.ssh/known_hosts</span>&#x27;<br>removed directory &#x27;<span class="hljs-string">.ssh</span>&#x27;<br>--运行命令生成<span class="hljs-string">.ssh</span> 秘钥目录[注意：这里-C 这个参数是大写的 C]<br>Layne@LAPTOP-Layne MINGW64 ~<br>$ ssh-keygen -t rsa -C atguiguyueyue@aliyun.com<br>Generating public/private rsa key pair.<br>Enter file in which to save the key <span class="hljs-params">(/c/Users/Layne/.ssh/id_rsa)</span>:<br>Created directory &#x27;<span class="hljs-string">/c/Users/Layne/.ssh</span>&#x27;.<br>Enter passphrase <span class="hljs-params">(empty for no passphrase)</span>:<br>Enter same passphrase again:<br>Your identification has been saved in <span class="hljs-string">/c/Users/Layne/.ssh/id_rsa.</span><br>Your public key has been saved in <span class="hljs-string">/c/Users/Layne/.ssh/id_rsa.pub.</span><br>The key fingerprint is:<br>SHA256<span class="hljs-function">:7CPfRLITKcYDhaqpEDeok7Atvwh2reRmpxxOC6dkY44</span><br>atguiguyueyue@aliyun.com<br>The key&#x27;s randomart image is:<br>+<span class="hljs-params">---</span>[RSA 2048]<span class="hljs-params">----</span>+<br>| <span class="hljs-string">..</span> |<br>| <span class="hljs-string">..</span> |<br>| . <span class="hljs-string">..</span> |<br>|+ + o . . |<br>|oO . = S . |<br>|X . <span class="hljs-string">..</span> + = |<br>|+@ * <span class="hljs-string">..</span> = . |<br>|X.&amp;o+. o = |<br>|Eo+Oo . . |<br>+<span class="hljs-params">----</span>[SHA256]<span class="hljs-params">-----</span>+<br>--进入<span class="hljs-string">.ssh</span> 目录查看文件列表<br>Layne@LAPTOP-Layne MINGW64 ~<br>$ <span class="hljs-keyword">cd</span> <span class="hljs-string">.ssh</span><br>Layne@LAPTOP-Layne MINGW64 ~<span class="hljs-string">/.ssh</span><br>$ ll -a<br>total 21<br>drwxr-xr-x 1 Layne 197609 0 11 月 25 19<span class="hljs-function">:27</span> <span class="hljs-string">./</span><br>drwxr-xr-x 1 Layne 197609 0 11 月 25 19<span class="hljs-function">:27</span> <span class="hljs-string">../</span><br>-rw-r<span class="hljs-params">--r--</span> 1 Layne 197609 1679 11 月 25 19<span class="hljs-function">:27</span> id_rsa<br>-rw-r<span class="hljs-params">--r--</span> 1 Layne 197609 406 11 月 25 19<span class="hljs-function">:27</span> id_rsa.pub<br>--查看 id_rsa.pub 文件内容<br>Layne@LAPTOP-Layne MINGW64 ~<span class="hljs-string">/.ssh</span><br>$ cat id_rsa.pub<br>ssh-rsa<br>AAAAB3NzaC1yc2EAAAADAQABAAABAQDRXRsk9Ohtg1AXLltsuNRAGBsx3ypE1O1Rkdzpm<br>l1woa6y6G62lZri3XtCH0F7GQvnMvQtPISJFXXWo+jFHZmqYQa/6kOIMv2sszcoj2Qtwl<br>lGXTPn/4T2h/cHjSHfc+ks8OYP7OWOOefpOCbYY/7DWYrl89k7nQlfd+A1FV/vQmcsa1L<br>P5ihqjpjms2CoUUen8kZHbjwHBAHQHWRE+Vc371MG/dwINvCi8n7ibI86o2k0dW0+8SL+<br>svPV/Y0G9m+RAqgec8b9U6DcSSAMH5uq4UWfnAcUNagb/aJQLytrH0pLa8nMv3XdSGNNo<br>AGBFeW2+K81XrmkP27FrLI6lDef atguiguyueyue@aliyun.com<br></code></pre></td></tr></table></figure><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys</p> <img src="image-20230108165758876.png" alt="image-20230108165758876" style="zoom:50%;" /> <img src="image-20230108165806301.png" alt="image-20230108165806301" style="zoom:50%;" /> <img src="image-20230108165816594.png" alt="image-20230108165816594" style="zoom:50%;" /><p>接下来再往远程仓库 push 东西的时候使用 SSH 连接就不需要登录了</p><h2 id="IDEA-集成-Git"><a href="#IDEA-集成-Git" class="headerlink" title="IDEA 集成 Git"></a>IDEA 集成 Git</h2><h3 id="配置-Git-忽略文件"><a href="#配置-Git-忽略文件" class="headerlink" title="配置 Git 忽略文件"></a>配置 Git 忽略文件</h3><ul><li><p>为什么要忽略它们</p><p>与项目的实际功能无关，不参与服务器上部署运行。忽略掉它们能够屏蔽 IDE 工具之间的差异</p></li><li><p>怎么忽略</p><ul><li><p>1）创建忽略规则文件 <strong>xxxx.ignore</strong>（前缀名随便起，建议是 git.ignore）</p><p>​这个文件的存放位置原则上在哪里都可以，为了便于让~&#x2F;.gitconfig 文件引用，建议也放在用户家目录下</p><p>git.ignore 文件模版内容如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><br><br><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><br><span class="hljs-comment"># virtual machine crash logs, see</span><br>http:<span class="hljs-string">//www.java.com/en/download/help/error_hotspot.xml</span><br>hs_err_pid*<br><br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></td></tr></table></figure></li><li><p>2）在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br><span class="hljs-attr">name</span> = Layne<br><span class="hljs-attr">email</span> = Layne@atguigu.com<br><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = C:/Users/asus/git.ignore<br><span class="hljs-comment"># 注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定位-Git-程序"><a href="#定位-Git-程序" class="headerlink" title="定位 Git 程序"></a>定位 Git 程序</h3> <img src="image-20230108192111793.png" alt="image-20230108192111793" style="zoom:50%;" /><h3 id="初始化本地库-1"><a href="#初始化本地库-1" class="headerlink" title="初始化本地库"></a>初始化本地库</h3> <img src="image-20230108192131208.png" alt="image-20230108192131208" style="zoom:50%;" /> <img src="image-20230108192139363.png" alt="image-20230108192139363" style="zoom:50%;" /><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>右键点击项目选择 Git -&gt; Add 将项目添加到暂存区。</p> <img src="image-20230108192200136.png" alt="image-20230108192200136" style="zoom:50%;" /><h3 id="提交到本地库"><a href="#提交到本地库" class="headerlink" title="提交到本地库"></a>提交到本地库</h3> <img src="image-20230108192216156.png" alt="image-20230108192216156" style="zoom:50%;" /> <img src="image-20230108192223319.png" alt="image-20230108192223319" style="zoom:50%;" /><h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>在 IDEA 的左下角，点击 Version Control，然后点击 Log 查看版本</p> <img src="image-20230108192239487.png" alt="image-20230108192239487" style="zoom:50%;" /><p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision。</p> <img src="image-20230108192257064.png" alt="image-20230108192257064" style="zoom:50%;" /><h3 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h3><p>右键项目名称，选择 Git，在 Repository 里面，点击 Branches 按钮。</p> <img src="image-20230108192316101.png" alt="image-20230108192316101" style="zoom:50%;" /><p>或者直接右下角</p> <img src="image-20230108192753427.png" alt="image-20230108192753427" style="zoom:50%;" /><p>在弹出的 Git Branches 框里，点击 New Branch 按钮。</p> <img src="image-20230108192330344.png" alt="image-20230108192330344" style="zoom:50%;" /><p>填写分支名称，创建 hot-fix 分支。</p> <img src="image-20230108192340638.png" alt="image-20230108192340638" style="zoom:50%;" /><p>然后再 IDEA 的右下角看到 hot-fix，说明分支创建成功，并且当前已经切换成 hot-fix 分支</p> <img src="image-20230108192355689.png" alt="image-20230108192355689" style="zoom:45%;" /><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><p>在 IDEA 窗口的右下角，切换到 master 分支。</p> <img src="image-20230108192811004.png" alt="image-20230108192811004" style="zoom:50%;" /><p>然后在 IDEA 窗口的右下角看到了 master，说明 master 分支切换成功。</p> <img src="image-20230108192822615.png" alt="image-20230108192822615" style="zoom:45%;" /><h3 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h3><p>在 IDEA 窗口的右下角，将 hot-fix 分支合并到当前 master 分支。</p> <img src="image-20230108193358167.png" alt="image-20230108193358167" style="zoom:50%;" /><p>如果代码没有冲突，分支直接合并成功，分支合并成功以后，代码自动提交，无需手动提交本地库</p> <img src="image-20230108193430095.png" alt="image-20230108193430095" style="zoom:50%;" /><h3 id="解决冲突-1"><a href="#解决冲突-1" class="headerlink" title="解决冲突"></a>解决冲突</h3><ul><li><p>如图所示，如果 master 分支和 hot-fix 分支都修改了代码，在合并分支的时候就会发生冲突。</p> <img src="image-20230108193455614.png" alt="image-20230108193455614" style="zoom:50%;" /> <img src="image-20230108193508540.png" alt="image-20230108193508540" style="zoom:50%;" /></li><li><p>我们现在站在 master 分支上合并 hot-fix 分支，就会发生代码冲突。</p>  <img src="image-20230108193530533.png" alt="image-20230108193530533" style="zoom:50%;" /></li><li><p>点击 Conflicts 框里的 Merge 按钮，进行手动合并代码。</p> <img src="image-20230108193555436.png" alt="image-20230108193555436" style="zoom:65%;" /></li><li><p>手动合并完代码以后，点击右下角的 Apply 按钮。</p> <img src="image-20230108193612129.png" alt="image-20230108193612129" style="zoom: 65%;" /></li><li><p>代码冲突解决，自动提交本地库。</p> <img src="image-20230108193622111.png" alt="image-20230108193622111" style="zoom:50%;" /></li></ul><h2 id="IDEA-集成-GitHub"><a href="#IDEA-集成-GitHub" class="headerlink" title="IDEA 集成 GitHub"></a>IDEA 集成 GitHub</h2><h3 id="设置-GitHub-账号"><a href="#设置-GitHub-账号" class="headerlink" title="设置 GitHub 账号"></a>设置 GitHub 账号</h3> <img src="image-20230108194829256.png" alt="image-20230108194829256" style="zoom:50%;" /> <img src="image-20230108194853347.png" alt="image-20230108194853347" style="zoom: 67%;" /><p> 然后去 GitHub 账户上设置 token。</p> <img src="image-20230108194955191.png" alt="image-20230108194955191" style="zoom:50%;" /> <img src="image-20230108195003135.png" alt="image-20230108195003135" style="zoom: 67%;" /> <img src="image-20230108195018754.png" alt="image-20230108195018754" style="zoom: 67%;" /> <img src="image-20230108195029765.png" alt="image-20230108195029765" style="zoom: 67%;" /><p>点击生成 token。</p> <img src="image-20230108195047303.png" alt="image-20230108195047303" style="zoom:80%;" /><p>复制红框中的字符串到 idea 中。</p> <img src="image-20230108195100977.png" alt="image-20230108195100977" style="zoom: 67%;" /><p>点击登录。</p> <img src="image-20230108195118679.png" alt="image-20230108195118679" style="zoom:80%;" /><h3 id="分享工程到-GitHub"><a href="#分享工程到-GitHub" class="headerlink" title="分享工程到 GitHub"></a>分享工程到 GitHub</h3> <img src="image-20230108195553914.png" alt="image-20230108195553914" style="zoom: 67%;" /> <img src="image-20230108195603805.png" alt="image-20230108195603805" style="zoom:80%;" /> <img src="image-20230108195614222.png" alt="image-20230108195614222" style="zoom:80%;" /><p>来到 GitHub 中发现已经帮我们创建好了 gitTest 的远程仓库</p> <img src="image-20230108195626793.png" alt="image-20230108195626793" style="zoom:80%;" /><h3 id="push-推送本地库到远程库"><a href="#push-推送本地库到远程库" class="headerlink" title="push 推送本地库到远程库"></a>push 推送本地库到远程库</h3><p><strong>注意：</strong>push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说，要想 push 成功，一定要保证本地库的版本要比远程库的版本高！因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送！</p><p>右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中。</p> <img src="image-20230108200506454.png" alt="image-20230108200506454" style="zoom: 60%;" /><h3 id="pull-拉取远程库到本地库"><a href="#pull-拉取远程库到本地库" class="headerlink" title="pull 拉取远程库到本地库"></a>pull 拉取远程库到本地库</h3><p><strong>注意：</strong>pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p><p>右键点击项目，可以将远程仓库的内容 pull 到本地仓库。</p> <img src="image-20230108200809285.png" alt="image-20230108200809285" style="zoom:60%;" /> <img src="image-20230108201028347.png" alt="image-20230108201028347" style="zoom: 67%;" /><h3 id="clone-克隆远程库到本地"><a href="#clone-克隆远程库到本地" class="headerlink" title="clone 克隆远程库到本地"></a>clone 克隆远程库到本地</h3> <img src="image-20230108201251691.png" alt="image-20230108201251691" style="zoom: 50%;" /> <img src="image-20230108201304613.png" alt="image-20230108201304613" style="zoom:50%;" /><p>为 clone 下来的项目创建一个工程，然后点击 Next。</p> <img src="image-20230108201322709.png" alt="image-20230108201322709" style="zoom:50%;" /> <img src="image-20230108201330352.png" alt="image-20230108201330352" style="zoom:50%;" /> <img src="image-20230108201347457.png" alt="image-20230108201347457" style="zoom:50%;" /> <img src="image-20230108201354881.png" alt="image-20230108201354881" style="zoom:50%;" /><h2 id="国内代码托管中心-码云"><a href="#国内代码托管中心-码云" class="headerlink" title="国内代码托管中心- 码云"></a>国内代码托管中心- 码云</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>众所周知，GitHub 服务器在国外，使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，大家也可以使用国内的项目托管网站-码云</p><p>码云是开源中国推出的基于 Git 的代码托管服务中心，网址是 <a href="https://gitee.com/">https://gitee.com/</a> ，使用方式跟 GitHub 一样，而且它还是一个中文网站，如果你英文不是很好它是最好的选择。</p><h3 id="码云创建远程库"><a href="#码云创建远程库" class="headerlink" title="码云创建远程库"></a>码云创建远程库</h3><p>点击首页右上角的加号，选择下面的新建仓库</p> <img src="image-20230108201702532.png" alt="image-20230108201702532" style="zoom:40%;" /><p>填写仓库名称，路径和选择是否开源（共开库或私有库）</p> <img src="image-20230108201719614.png" alt="image-20230108201719614" style="zoom:40%;" /><p>最后根据需求选择分支模型，然后点击创建按钮</p> <img src="image-20230108201735084.png" alt="image-20230108201735084" style="zoom:40%;" /><p>远程库创建好以后，就可以看到 HTTPS 和 SSH 的链接</p> <img src="image-20230108201751187.png" alt="image-20230108201751187" style="zoom:40%;" /><h3 id="IDEA-集成码云"><a href="#IDEA-集成码云" class="headerlink" title="IDEA 集成码云"></a>IDEA 集成码云</h3><h4 id="IDEA-安装码云插件"><a href="#IDEA-安装码云插件" class="headerlink" title="IDEA 安装码云插件"></a>IDEA 安装码云插件</h4><p>Idea 默认不带码云插件，我们第一步要安装 Gitee 插件。</p><p>如图所示，在 Idea 插件商店搜索 Gitee，然后点击右侧的 Install 按钮。</p> <img src="image-20230108202847169.png" alt="image-20230108202847169" style="zoom:50%;" /><p>然后在码云插件里面添加码云帐号，我们就可以用 Idea 连接码云了。</p> <img src="image-20230108202909617.png" alt="image-20230108202909617" style="zoom:50%;" /><h3 id="IDEA-连接码云"><a href="#IDEA-连接码云" class="headerlink" title="IDEA 连接码云"></a>IDEA 连接码云</h3><p>Idea 连接码云和连接 GitHub 几乎一样，首先在 Idea 里面创建一个工程，初始化 git 工程，然后将代码添加到暂存区，提交到本地库，这些步骤上面已经讲过，此处不再赘述。</p><h3 id="码云复制-GitHub-项目"><a href="#码云复制-GitHub-项目" class="headerlink" title="码云复制 GitHub 项目"></a>码云复制 GitHub 项目</h3><p>码云提供了直接复制 GitHub 项目的功能，方便我们做项目的迁移和下载。</p><p>具体操作如下：</p> <img src="image-20230108204240387.png" alt="image-20230108204240387" style="zoom:45%;" /><p>将 GitHub 的远程库 HTTPS 链接复制过来，点击创建按钮即可。</p> <img src="image-20230108204259904.png" alt="image-20230108204259904" style="zoom:45%;" /><img src="image-20230108204337608.png" alt="image-20230108204337608" style="zoom:45%;" /><p>如果 GitHub 项目更新了以后，在码云项目端可以手动重新同步，进行更新！</p> <img src="image-20230108204357533.png" alt="image-20230108204357533" style="zoom:45%;" /> <img src="image-20230108204409080.png" alt="image-20230108204409080" style="zoom:45%;" /> <img src="image-20230108204421759.png" alt="image-20230108204421759" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2022/12/18/SpringMVC/"/>
    <url>/2022/12/18/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、SpringMVC简介"><a href="#1、SpringMVC简介" class="headerlink" title="1、SpringMVC简介"></a>1、SpringMVC简介</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><ul><li><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul></li><li><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p></li><li><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p></li></ul><p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h2 id="1-2、什么是SpringMVC"><a href="#1-2、什么是SpringMVC" class="headerlink" title="1.2、什么是SpringMVC"></a>1.2、什么是SpringMVC</h2><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目<strong>表述层</strong>开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，<strong>表述层表示前台页面和后台servlet</strong></p></blockquote><h2 id="1-3、SpringMVC的特点"><a href="#1-3、SpringMVC的特点" class="headerlink" title="1.3、SpringMVC的特点"></a>1.3、SpringMVC的特点</h2><ul><li><p><strong>Spring</strong> <strong>家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</p></li><li><p><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器 DispatcherServlet</strong>，对请求和响应进行统一处理</p></li><li><p>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></p></li><li><p><strong>代码清新简洁</strong>，大幅度提升开发效率</p></li><li><p>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</p></li><li><p><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</p></li></ul><h1 id="2、入门案例"><a href="#2、入门案例" class="headerlink" title="2、入门案例"></a>2、入门案例</h1><h2 id="2-1、开发环境"><a href="#2-1、开发环境" class="headerlink" title="2.1、开发环境"></a>2.1、开发环境</h2><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat8.5</p><p>Spring版本：5.3.1</p><h2 id="2-2、创建maven工程"><a href="#2-2、创建maven工程" class="headerlink" title="2.2、创建maven工程"></a>2.2、创建maven工程</h2><h3 id="①添加web模块"><a href="#①添加web模块" class="headerlink" title="①添加web模块"></a>①添加web模块</h3><h3 id="②打包方式：war"><a href="#②打包方式：war" class="headerlink" title="②打包方式：war"></a>②打包方式：war</h3><h3 id="③引入依赖"><a href="#③引入依赖" class="headerlink" title="③引入依赖"></a>③引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入</p><p><img src="/img%5C29.png" alt="29"></p><h2 id="2-3、配置web-xml"><a href="#2-3、配置web-xml" class="headerlink" title="2.3、配置web.xml"></a>2.3、配置web.xml</h2><p>pom.xml中：&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</p><p>添加web.xml时需要加上 <strong>src\main\webapp\</strong></p><p><img src="/2022/12/18/SpringMVC/image-20221126091917832.png" alt="image-20221126091917832"></p><h3 id="注册SpringMVC的前端控制器DispatcherServlet："><a href="#注册SpringMVC的前端控制器DispatcherServlet：" class="headerlink" title="注册SpringMVC的前端控制器DispatcherServlet："></a>注册SpringMVC的前端控制器DispatcherServlet：</h3><h3 id="①默认配置方式"><a href="#①默认配置方式" class="headerlink" title="①默认配置方式"></a>①默认配置方式</h3><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">/*可以匹配浏览器向服务器发送的所有请求（包括.jsp，但Tomcat中有处理jsp的默认Servlet）</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②扩展配置方式"><a href="#②扩展配置方式" class="headerlink" title="②扩展配置方式"></a>②扩展配置方式</h3><ul><li><p>通过init-param标签可设置SpringMVC配置文件的位置和名称</p></li><li><p>通过load-on-startup标签可设置SpringMVC前端控制器DispatcherServlet的初始化时间</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;<br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        作为框架的核心组件，在启动过程中有大量的初始化操作要做</span><br><span class="hljs-comment">        而这些操作放在第一次请求时才执行会严重影响访问速度</span><br><span class="hljs-comment">        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>&lt;url-pattern&gt;标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请</p><p>求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写</p><p>法</p></blockquote><h2 id="2-4、创建请求控制器"><a href="#2-4、创建请求控制器" class="headerlink" title="2.4、创建请求控制器"></a>2.4、创建请求控制器</h2><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5、创建SpringMVC的配置文件"><a href="#2-5、创建SpringMVC的配置文件" class="headerlink" title="2.5、创建SpringMVC的配置文件"></a>2.5、创建SpringMVC的配置文件</h2><p>SpringMVC的配置文件默认的位置和名称：</p><ul><li>位置：WEB-INF 下</li><li>名称：&lt;servlet-name&gt;-servlet.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">配置默认的servlet来处理静态资源</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/</span><br><span class="hljs-comment">Tomcat的web.xml配置的DefaultServlet的url-pattern也是/</span><br><span class="hljs-comment">此时，浏览器发送的请求会优先被DispatcherServlet进行处理，</span><br><span class="hljs-comment">但是DispatcherServlet无法处理静态资源</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">若配置了&lt;mvc:default-servlet-handler&gt;，</span><br><span class="hljs-comment">此时浏览器发送的所有请求都会被DefaultServlet处理</span><br><span class="hljs-comment">若还配置了&lt;mvc:annotation-driven&gt;，</span><br><span class="hljs-comment">浏览器发送的请求会先被DispatcherServlet处理，无法处理再交给DefaultServlet处理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    DefaultServlet可处理静态资源，例如html、js、css、jpg</span><br><span class="hljs-comment">    若只设置该标签，则只能访问静态资源，其他请求则无法访问</span><br><span class="hljs-comment">    此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultCharset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6、测试HelloWorld"><a href="#2-6、测试HelloWorld" class="headerlink" title="2.6、测试HelloWorld"></a>2.6、测试HelloWorld</h2><h3 id="①实现对首页的访问"><a href="#①实现对首页的访问" class="headerlink" title="①实现对首页的访问"></a>①实现对首页的访问</h3><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><br><span class="hljs-comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><br><span class="hljs-comment">// 即：localhost:8080/springMVC/</span><br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置视图名称（将逻辑视图返回）</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②通过超链接跳转到指定页面"><a href="#②通过超链接跳转到指定页面" class="headerlink" title="②通过超链接跳转到指定页面"></a>②通过超链接跳转到指定页面</h3><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--thymeleaf的内容--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7、总结"><a href="#2-7、总结" class="headerlink" title="2.7、总结"></a>2.7、总结</h2><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取<strong>SpringMVC</strong>的核心配置文件，通过扫描组件找到控制器，</p><p>将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="3、-RequestMapping注解"><a href="#3、-RequestMapping注解" class="headerlink" title="3、@RequestMapping注解"></a>3、@RequestMapping注解</h1><h2 id="3-1、-RequestMapping注解的功能"><a href="#3-1、-RequestMapping注解的功能" class="headerlink" title="3.1、@RequestMapping注解的功能"></a>3.1、@RequestMapping注解的功能</h2><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h2 id="3-2、-RequestMapping注解的位置"><a href="#3-2、-RequestMapping注解的位置" class="headerlink" title="3.2、@RequestMapping注解的位置"></a>3.2、@RequestMapping注解的位置</h2><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br>    <span class="hljs-comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3、-RequestMapping注解的value属性"><a href="#3-3、-RequestMapping注解的value属性" class="headerlink" title="3.3、@RequestMapping注解的value属性"></a>3.3、@RequestMapping注解的value属性</h2><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--<br>&gt;/testRequestMapping<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4、-RequestMapping注解的method属性"><a href="#3-4、-RequestMapping注解的method属性" class="headerlink" title="3.4、@RequestMapping注解的method属性"></a>3.4、@RequestMapping注解的method属性</h2><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错</p><p>405：Request method ‘POST’ not supported</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="hljs-meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful中会讲到</p></blockquote><h2 id="3-5、-RequestMapping注解的params属性（了解）"><a href="#3-5、-RequestMapping注解的params属性（了解）" class="headerlink" title="3.5、@RequestMapping注解的params属性（了解）"></a>3.5、@RequestMapping注解的params属性（了解）</h2><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数</p><p>和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求可以不携带param请求参数，如果携带，要求param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的<br>params属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">    ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">    ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;,&quot;!age&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actualrequest parameters: username&#x3D;{admin}, password&#x3D;{123456}</p></blockquote><h2 id="3-6、-RequestMapping注解的headers属性（了解）"><a href="#3-6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="3.6、@RequestMapping注解的headers属性（了解）"></a>3.6、@RequestMapping注解的headers属性（了解）</h2><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求如果携带header请求头信息则要求header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h2 id="3-7、SpringMVC支持ant风格的路径-value属性"><a href="#3-7、SpringMVC支持ant风格的路径-value属性" class="headerlink" title="3.7、SpringMVC支持ant风格的路径(value属性)"></a>3.7、SpringMVC支持ant风格的路径(value属性)</h2><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意层数的任意目录</p><p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p><p>（不能匹配 问号 ? 和 斜线 &#x2F; ，因为在请求路径中问号 ? 是路径和参数的分隔符）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a?a/test/ant&quot;)</span> <span class="hljs-comment">//  /axa/test/ant</span><br><span class="hljs-meta">@RequestMapping(&quot;/a*a/test/ant&quot;)</span> <span class="hljs-comment">//  /aa/test/ant</span><br><span class="hljs-meta">@RequestMapping(&quot;/**/test/ant&quot;)</span> <span class="hljs-comment">//   /test/ant  |  /a/a/a/test/ant</span><br></code></pre></td></tr></table></figure><h2 id="3-8、SpringMVC支持路径中的占位符（重点）-value属性"><a href="#3-8、SpringMVC支持路径中的占位符（重点）-value属性" class="headerlink" title="3.8、SpringMVC支持路径中的占位符（重点）(value属性)"></a>3.8、SpringMVC支持路径中的占位符（重点）(value属性)</h2><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;user&#x2F;delete&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><p>注意：使用了占位符后要求一定要传对应参数，否则报错404</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span></span><br><span class="hljs-params">String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot;,username:&quot;</span>+username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终输出的内容为--&gt;id:1,username:admin</span><br></code></pre></td></tr></table></figure><h1 id="4、SpringMVC获取请求参数"><a href="#4、SpringMVC获取请求参数" class="headerlink" title="4、SpringMVC获取请求参数"></a>4、SpringMVC获取请求参数</h1><h2 id="4-1、通过ServletAPI获取"><a href="#4-1、通过ServletAPI获取" class="headerlink" title="4.1、通过ServletAPI获取"></a>4.1、通过ServletAPI获取</h2><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象，还可以使用 HttpServletResponse、Session 等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2、通过控制器方法的形参获取请求参数（常用）"><a href="#4-2、通过控制器方法的形参获取请求参数（常用）" class="headerlink" title="4.2、通过控制器方法的形参获取请求参数（常用）"></a>4.2、通过控制器方法的形参获取请求参数（常用）</h2><p>在控制器方法的形参位置，<strong>设置和请求参数同名的形参</strong>，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet 中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--<br>&gt;/testParam<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串</p><p>数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h2 id="4-3、-RequestParam"><a href="#4-3、-RequestParam" class="headerlink" title="4.3、@RequestParam"></a>4.3、@RequestParam</h2><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</p><p>若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param/annotation&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParamByAnnotation</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = true, defaultValue = &quot;default&quot;)</span> String name, <span class="hljs-meta">@RequestParam(value = &quot;password&quot;)</span> String word)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;用户名为：&quot;</span>+name);<br>    System.out.println(<span class="hljs-string">&quot;密码为：&quot;</span>+word);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4、-RequestHeader"><a href="#4-4、-RequestHeader" class="headerlink" title="4.4、@RequestHeader"></a>4.4、@RequestHeader</h2><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同 @RequestParam</p><h2 id="4-5、-CookieValue"><a href="#4-5、-CookieValue" class="headerlink" title="4.5、@CookieValue"></a>4.5、@CookieValue</h2><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同 @RequestParam</p><h2 id="4-6、通过POJO获取请求参数"><a href="#4-6、通过POJO获取请求参数" class="headerlink" title="4.6、通过POJO获取请求参数"></a>4.6、通过POJO获取请求参数</h2><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testpojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPOJO</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-7、解决获取请求参数的乱码问题"><a href="#4-7、解决获取请求参数的乱码问题" class="headerlink" title="4.7、解决获取请求参数的乱码问题"></a>4.7、解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="5、域对象共享数据"><a href="#5、域对象共享数据" class="headerlink" title="5、域对象共享数据"></a>5、域对象共享数据</h1><h2 id="5-1、使用ServletAPI向request域对象共享数据"><a href="#5-1、使用ServletAPI向request域对象共享数据" class="headerlink" title="5.1、使用ServletAPI向request域对象共享数据"></a>5.1、使用ServletAPI向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2、使用ModelAndView向request域对象共享数据"><a href="#5-2、使用ModelAndView向request域对象共享数据" class="headerlink" title="5.2、使用ModelAndView向request域对象共享数据"></a>5.2、使用ModelAndView向request域对象共享数据</h2><p><strong>控制器方法被调用后，不管是通过什么方式向域对象中共享数据，不管通过什么方式设置逻辑视图，，最终都会被封装到一个ModelAndView对象中，并作为返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView有Model和View的功能</span><br><span class="hljs-comment">     * Model主要用于向请求域共享数据</span><br><span class="hljs-comment">     * View主要用于设置视图，实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图，实现页面跳转</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3、使用Model向request域对象共享数据（推荐）"><a href="#5-3、使用Model向request域对象共享数据（推荐）" class="headerlink" title="5.3、使用Model向request域对象共享数据（推荐）"></a>5.3、使用Model向request域对象共享数据（推荐）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4、使用map向request域对象共享数据"><a href="#5-4、使用map向request域对象共享数据" class="headerlink" title="5.4、使用map向request域对象共享数据"></a>5.4、使用map向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5、使用ModelMap向request域对象共享数据"><a href="#5-5、使用ModelMap向request域对象共享数据" class="headerlink" title="5.5、使用ModelMap向request域对象共享数据"></a>5.5、使用ModelMap向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-6、Model、ModelMap、Map的关系"><a href="#5-6、Model、ModelMap、Map的关系" class="headerlink" title="5.6、Model、ModelMap、Map的关系"></a>5.6、Model、ModelMap、Map的关系</h2><p><strong>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Model</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendedModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Model</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindingAwareModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ExtendedModelMap</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="5-7、向session域共享数据"><a href="#5-7、向session域共享数据" class="headerlink" title="5.7、向session域共享数据"></a>5.7、向session域共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过HttpRequest获取HttpSession：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/session&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>    session.setAttribute(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-8、向application域共享数据"><a href="#5-8、向application域共享数据" class="headerlink" title="5.8、向application域共享数据"></a>5.8、向application域共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过HttpRequest获取ServletContext：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/application&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;test&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.test&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;application.test&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6、SpringMVC的视图"><a href="#6、SpringMVC的视图" class="headerlink" title="6、SpringMVC的视图"></a>6、SpringMVC的视图</h1><p><strong>控制器方法被调用后，不管是通过什么方式向域对象中共享数据，不管通过什么方式设置逻辑视图，，最终都会被封装到一个ModelAndView对象中，并作为返回值</strong></p><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView，而如果直接转发，是不会被 Thymeleaf 渲染的</p><p><strong>一般来说，业务逻辑处理失败的时候使用转发，业务逻辑处理成功的时候使用重定向</strong></p><h2 id="6-1、ThymeleafView"><a href="#6-1、ThymeleafView" class="headerlink" title="6.1、ThymeleafView"></a>6.1、ThymeleafView</h2><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testHello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img%5C30.png" alt="30"></p><h2 id="6-2、转发视图"><a href="#6-2、转发视图" class="headerlink" title="6.2、转发视图"></a>6.2、转发视图</h2><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img%5C31.png" alt="31"></p><h2 id="6-3、重定向视图"><a href="#6-3、重定向视图" class="headerlink" title="6.3、重定向视图"></a>6.3、重定向视图</h2><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img%5C32.png" alt="32"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h2 id="6-4、视图控制器view-controller"><a href="#6-4、视图控制器view-controller" class="headerlink" title="6.4、视图控制器view-controller"></a>6.4、视图控制器view-controller</h2><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用 view-controller 标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    path：设置处理的请求地址</span><br><span class="hljs-comment">    view-name：设置请求地址所对应的视图名称</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效（404），此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><h1 id="7、RESTful"><a href="#7、RESTful" class="headerlink" title="7、RESTful"></a>7、RESTful</h1><h2 id="7-1、RESTful简介"><a href="#7-1、RESTful简介" class="headerlink" title="7.1、RESTful简介"></a>7.1、RESTful简介</h2><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h3 id="①资源"><a href="#①资源" class="headerlink" title="①资源"></a>①资源</h3><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h3 id="②资源的表述"><a href="#②资源的表述" class="headerlink" title="②资源的表述"></a>②资源的表述</h3><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h3 id="③状态转移"><a href="#③状态转移" class="headerlink" title="③状态转移"></a>③状态转移</h3><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h2 id="7-2、RESTful的实现"><a href="#7-2、RESTful的实现" class="headerlink" title="7.2、RESTful的实现"></a>7.2、RESTful的实现</h2><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th><strong>操作</strong></th><th><strong>传统方式</strong></th><th><strong>REST</strong> <strong>风格</strong></th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1  –&gt;  get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user  –&gt;  post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1  –&gt;  delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user  –&gt;  put请求方式</td></tr></tbody></table><h2 id="7-3、HiddenHttpMethodFilter"><a href="#7-3、HiddenHttpMethodFilter" class="headerlink" title="7.3、HiddenHttpMethodFilter"></a>7.3、HiddenHttpMethodFilter</h2><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将</strong> <strong>POST</strong> <strong>请求转换为</strong> <strong>DELETE</strong> <strong>或</strong> <strong>PUT</strong> <strong>请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><pre><code class="java">String paramValue = request.getParameter(this.methodParam);<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">### 测试</span><br><span class="language-xml"></span><br><span class="language-xml">```html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">user</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>查询所有用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">user</span>/1&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>查询单个用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">user</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加用户信息&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">user</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改用户信息&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">user</span>/1&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除用户信息&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;查询所有用户信息--&gt;/user--&gt;get&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;查询用户信息--&gt;/user/&quot;</span>+id+<span class="hljs-string">&quot;--&gt;get&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span><br><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;添加用户信息--&gt;/user--&gt;post&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span><br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改用户信息--&gt;/user--&gt;put&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//    @RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br><span class="hljs-meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;删除用户信息--&gt;/user/&quot;</span>+id+<span class="hljs-string">&quot;--&gt;delete&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8、RESTful案例"><a href="#8、RESTful案例" class="headerlink" title="8、RESTful案例"></a>8、RESTful案例</h1><h2 id="8-1、准备工作"><a href="#8-1、准备工作" class="headerlink" title="8.1、准备工作"></a>8.1、准备工作</h2><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><ul><li>搭建环境</li><li>准备实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.bean;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">//1 male, 0 female</span><br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(Integer gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integergender)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>准备dao模拟数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.dao;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> com.atguigu.mvc.bean.Employee;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Employee&gt;();<br>        employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;E-AA&quot;</span>, <span class="hljs-string">&quot;aa@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>        employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;E-BB&quot;</span>, <span class="hljs-string">&quot;bb@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>        employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;E-CC&quot;</span>, <span class="hljs-string">&quot;cc@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>        employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;E-DD&quot;</span>, <span class="hljs-string">&quot;dd@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>        employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;E-EE&quot;</span>, <span class="hljs-string">&quot;ee@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>        <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>            employee.setId(initId++);<br>        &#125;<br>        employees.put(employee.getId(), employee);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.values();<br>    &#125;<br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.get(id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        employees.remove(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-2、功能清单"><a href="#8-2、功能清单" class="headerlink" title="8.2、功能清单"></a>8.2、功能清单</h2><table><thead><tr><th><strong>功能</strong></th><th><strong>URL</strong> <strong>地址</strong></th><th><strong>请求方式</strong></th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询所有员工信息</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>转跳到添加数据页面</td><td>&#x2F;to&#x2F;add</td><td>GET</td></tr><tr><td>新增员工信息</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到修改页面</td><td>&#x2F;employee&#x2F;1</td><td>GET</td></tr><tr><td>修改员工信息</td><td>&#x2F;employee</td><td>PUT</td></tr><tr><td>删除员工信息</td><td>&#x2F;employee&#x2F;1</td><td>DELETE</td></tr></tbody></table><h2 id="8-3、具体功能：访问首页"><a href="#8-3、具体功能：访问首页" class="headerlink" title="8.3、具体功能：访问首页"></a>8.3、具体功能：访问首页</h2><h3 id="①配置view-controller"><a href="#①配置view-controller" class="headerlink" title="①配置view-controller"></a>①配置view-controller</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②创建页面"><a href="#②创建页面" class="headerlink" title="②创建页面"></a>②创建页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-4、具体功能：查询所有员工数据"><a href="#8-4、具体功能：查询所有员工数据" class="headerlink" title="8.4、具体功能：查询所有员工数据"></a>8.4、具体功能：查询所有员工数据</h2><h3 id="①控制器方法"><a href="#①控制器方法" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">(Model model)</span>&#123;<br>    Collection&lt;Employee&gt; allEmployee = employeeDao.getAll();<br>    model.addAttribute(<span class="hljs-string">&quot;allEmployee&quot;</span>,allEmployee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②创建employee-list-html"><a href="#②创建employee-list-html" class="headerlink" title="②创建employee_list.html"></a>②创建employee_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;allEmployee&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-5、具体功能：删除"><a href="#8-5、具体功能：删除" class="headerlink" title="8.5、具体功能：删除"></a>8.5、具体功能：删除</h2><h3 id="①创建处理delete请求方式的表单"><a href="#①创建处理delete请求方式的表单" class="headerlink" title="①创建处理delete请求方式的表单"></a>①创建处理delete请求方式的表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#dataTable&quot;</span>, <span class="hljs-comment">//挂载容器</span></span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//event表示当前事件</span></span><br><span class="language-javascript">            <span class="hljs-attr">deleteEmployee</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//通过id获取表单标签</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> delete_form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;delete_form&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-property">action</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">//提交表单</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//阻止超链接的默认跳转行为</span></span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③控制器方法"><a href="#③控制器方法" class="headerlink" title="③控制器方法"></a>③控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-6、具体功能：跳转到添加数据页面"><a href="#8-6、具体功能：跳转到添加数据页面" class="headerlink" title="8.6、具体功能：跳转到添加数据页面"></a>8.6、具体功能：跳转到添加数据页面</h2><h3 id="①配置view-controller-1"><a href="#①配置view-controller-1" class="headerlink" title="①配置view-controller"></a>①配置view-controller</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/to/add&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;employee_add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②创建employee-add-html"><a href="#②创建employee-add-html" class="headerlink" title="②创建employee_add.html"></a>②创建employee_add.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>male<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-7、具体功能：执行保存"><a href="#8-7、具体功能：执行保存" class="headerlink" title="8.7、具体功能：执行保存"></a>8.7、具体功能：执行保存</h2><h3 id="①控制器方法-1"><a href="#①控制器方法-1" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-comment">//重定向到列表功能：/employee</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-8、具体功能：跳转到更新数据页面"><a href="#8-8、具体功能：跳转到更新数据页面" class="headerlink" title="8.8、具体功能：跳转到更新数据页面"></a>8.8、具体功能：跳转到更新数据页面</h2><h3 id="①修改超链接"><a href="#①修改超链接" class="headerlink" title="①修改超链接"></a>①修改超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②控制器方法"><a href="#②控制器方法" class="headerlink" title="②控制器方法"></a>②控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.get(id);<br>    model.addAttribute(<span class="hljs-string">&quot;employee&quot;</span>, employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="③创建employee-update-html"><a href="#③创建employee-update-html" class="headerlink" title="③创建employee_update.html"></a>③创建employee_update.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Update Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><br>            lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span><br><span class="hljs-comment">                若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span><br><span class="hljs-comment">--&gt;</span><br>            gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-9、具体功能：执行更新"><a href="#8-9、具体功能：执行更新" class="headerlink" title="8.9、具体功能：执行更新"></a>8.9、具体功能：执行更新</h2><h3 id="①控制器方法-2"><a href="#①控制器方法-2" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9、SpringMVC处理ajax请求"><a href="#9、SpringMVC处理ajax请求" class="headerlink" title="9、SpringMVC处理ajax请求"></a>9、SpringMVC处理ajax请求</h1><h2 id="9-1、-RequestBody"><a href="#9-1、-RequestBody" class="headerlink" title="9.1、@RequestBody"></a>9.1、@RequestBody</h2><p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--此时必须使用post请求方式，因为get请求没有请求体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test/RequestBody&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestBody);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h2 id="9-2、-RequestBody获取json格式的请求参数"><a href="#9-2、-RequestBody获取json格式的请求参数" class="headerlink" title="9.2、@RequestBody获取json格式的请求参数"></a>9.2、@RequestBody获取json格式的请求参数</h2><blockquote><p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：</p><p>1、name&#x3D;value&amp;name&#x3D;value…，此时的请求参数可以通过request.getParameter()获取，对应</p><p>SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数</p><p>2、{key:value,key:value,…}，此时无法通过request.getParameter()获取，之前我们使用操作json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集合。在SpringMVC中，直接使用@RequestBody注解标识控制器方法的形参即可将此类请求参数转换为java对象</p></blockquote><p>使用@RequestBody获取json格式的请求参数的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3、在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参数，并使用@RequestBody注解标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试@RequestBody获取json格式的请求参数&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testRequestBody()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">testRequestBody</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                axios.<span class="hljs-title function_">post</span>(</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;/SpringMVC/test/RequestBody/json&quot;</span>,</span><br><span class="language-javascript">                    &#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;</span><br><span class="language-javascript">                ).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将json格式的数据转换为map集合</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Map&lt;String, Object&gt; map,HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(map);<br>    <span class="hljs-comment">//&#123;username=admin, password=123456&#125;</span><br>    response.getWriter().print(<span class="hljs-string">&quot;hello,axios&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//将json格式的数据转换为实体类对象</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user, HttpServletResponseresponse)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(user);<br>    <span class="hljs-comment">//User&#123;id=null, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=null, gender=&#x27;null&#x27;&#125;</span><br>response.getWriter().print(<span class="hljs-string">&quot;hello,axios&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-3、-ResponseBody"><a href="#9-3、-ResponseBody" class="headerlink" title="9.3、@ResponseBody"></a>9.3、@ResponseBody</h2><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//此时会跳转到逻辑视图success所对应的页面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//此时响应浏览器数据success</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-4、-ResponseBody响应浏览器json数据"><a href="#9-4、-ResponseBody响应浏览器json数据" class="headerlink" title="9.4、@ResponseBody响应浏览器json数据"></a>9.4、@ResponseBody响应浏览器json数据</h2><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p><p>@ResponseBody响应浏览器json数据的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3、使用@ResponseBody注解标识控制器方法，在方法中，将需要转换为json字符串并响应到浏览器的java对象作为控制器方法的返回值，此时SpringMVC就可以将此对象直接转换为json字符串并响应到浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试@ResponseBody响应浏览器json格式的数据&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testResponseBody()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">testResponseBody</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/SpringMVC/test/ResponseBody/json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//响应浏览器list集合</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;admin3&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    List&lt;User&gt; list = Arrays.asList(user1, user2, user3);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><span class="hljs-comment">//响应浏览器map集合</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;admin3&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;1001&quot;</span>, user1);<br>    map.put(<span class="hljs-string">&quot;1002&quot;</span>, user2);<br>    map.put(<span class="hljs-string">&quot;1003&quot;</span>, user3);<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br><span class="hljs-comment">//响应浏览器实体类对象</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-5、-RestController注解"><a href="#9-5、-RestController注解" class="headerlink" title="9.5、@RestController注解"></a>9.5、@RestController注解</h2><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了</p><p>@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h1 id="10、文件上传和下载"><a href="#10、文件上传和下载" class="headerlink" title="10、文件上传和下载"></a>10、文件上传和下载</h1><h2 id="10-1、文件下载"><a href="#10-1、文件下载" class="headerlink" title="10.1、文件下载"></a>10.1、文件下载</h2><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/1.jpg&quot;</span>);<br>  <span class="hljs-comment">//字符串拼接方式，File.separator代表分隔符 / 或 \ ，能适应不同系统</span><br>  <span class="hljs-comment">//realPath = realPath + File.separator + &quot;img&quot; + File.separator + &quot;duolaAmeng.png&quot;;</span><br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组, is.available() 获取输入流所对应文件的字节数</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式（不区分大小写）以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-2、文件上传"><a href="#10-2、文件上传" class="headerlink" title="10.2、文件上传"></a>10.2、文件上传</h2><p>文件上传要求form表单的请求方式必须为post，并且添加属性 <strong>enctype&#x3D;”multipart&#x2F;form-data”</strong></p><p>SpringMVC中将上传的文件封装到 MultipartFile 对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><h3 id="①添加依赖："><a href="#①添加依赖：" class="headerlink" title="①添加依赖："></a>①添加依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②在SpringMVC的配置文件中添加配置："><a href="#②在SpringMVC的配置文件中添加配置：" class="headerlink" title="②在SpringMVC的配置文件中添加配置："></a>②在SpringMVC的配置文件中添加配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-comment">&lt;!--id固定为multipartResolver--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③控制器方法："><a href="#③控制器方法：" class="headerlink" title="③控制器方法："></a>③控制器方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testUp&quot;)</span>  <span class="hljs-comment">//name 要和上传表单中设置的name一致</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--enctype=&quot;multipart/form-data&quot;：以二进制方式传输数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    上传：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="11、拦截器"><a href="#11、拦截器" class="headerlink" title="11、拦截器"></a>11、拦截器</h1><h2 id="11-1、拦截器的配置"><a href="#11-1、拦截器的配置" class="headerlink" title="11.1、拦截器的配置"></a>11.1、拦截器的配置</h2><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testRequestEntity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，</span><br><span class="hljs-comment">    通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11-2、拦截器的三个抽象方法"><a href="#11-2、拦截器的三个抽象方法" class="headerlink" title="11.2、拦截器的三个抽象方法"></a>11.2、拦截器的三个抽象方法</h2><p>SpringMVC中的拦截器有三个抽象方法：</p><p><strong>preHandle</strong>：控制器方法执行之前执行 preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p><strong>postHandle</strong>：控制器方法执行之后执行 postHandle()</p><p><strong>afterCompletion</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</p><h2 id="11-3、多个拦截器的执行顺序"><a href="#11-3、多个拦截器的执行顺序" class="headerlink" title="11.3、多个拦截器的执行顺序"></a>11.3、多个拦截器的执行顺序</h2><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行（相当于包含）</p><p>②若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterCompletion()会执行</p><h1 id="12、异常处理器"><a href="#12、异常处理器" class="headerlink" title="12、异常处理器"></a>12、异常处理器</h1><h2 id="12-1、基于配置的异常处理"><a href="#12-1、基于配置的异常处理" class="headerlink" title="12.1、基于配置的异常处理"></a>12.1、基于配置的异常处理</h2><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和</p><p>SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">                properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="12-2、基于注解的异常处理"><a href="#12-2、基于注解的异常处理" class="headerlink" title="12.2、基于注解的异常处理"></a>12.2、基于注解的异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br>    <span class="hljs-comment">//@ExceptionHandler用于设置所标识方法处理的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-comment">//ex表示当前请求处理中出现的异常对象</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="13、注解配置SpringMVC"><a href="#13、注解配置SpringMVC" class="headerlink" title="13、注解配置SpringMVC"></a>13、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h2 id="13-1、创建初始化类，代替web-xml"><a href="#13-1、创建初始化类，代替web-xml" class="headerlink" title="13.1、创建初始化类，代替web.xml"></a>13.1、创建初始化类，代替web.xml</h2><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它（相当于web.xml）来配置Servlet容器（Tomcat）。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类继承了AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到Servlet3.0容器（Tomcat）的时候，容器会自动发现它，并用它来配置Servlet上下文（代替web.xml）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">encodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        encodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        encodingFilter.setForceRequestEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> newHiddenHttpMethodFilter();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-2、创建SpringConfig配置类，代替spring的配置文件"><a href="#13-2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="13.2、创建SpringConfig配置类，代替spring的配置文件"></a>13.2、创建SpringConfig配置类，代替spring的配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//标识为配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-comment">//ssm整合之后，spring的配置信息写在此类中</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#13-3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="13.3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>13.3、创建WebConfig配置类，代替SpringMVC的配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.config;<br><br><span class="hljs-keyword">import</span> com.atguigu.interceptor.FirstInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.context.ContextLoader;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring5.SpringTemplateEngine;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.templatemode.TemplateMode;<br><span class="hljs-keyword">import</span> org.thymeleaf.templateresolver.ITemplateResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Date:2022/7/10</span><br><span class="hljs-comment"> * Author:ybc</span><br><span class="hljs-comment"> * Description:代替SpringMVC的配置文件</span><br><span class="hljs-comment"> * 扫描组件、视图解析器、默认的servlet、mvc的注解驱动</span><br><span class="hljs-comment"> * 视图控制器、文件上传解析器、拦截器、异常解析器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//将类标识为配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.controller&quot;)</span><br><span class="hljs-comment">//开启mvc的注解驱动</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//默认的servlet处理静态资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//配置视图解析器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@Bean注解可以将标识的方法的返回值作为bean进行管理，bean的id为方法的方法名</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">//文件上传解析器</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//拦截器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//配置异常解析器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHandlerExceptionResolvers</span><span class="hljs-params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;<br>        <span class="hljs-type">SimpleMappingExceptionResolver</span> <span class="hljs-variable">exceptionResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMappingExceptionResolver</span>();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.setProperty(<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        exceptionResolver.setExceptionMappings(prop);<br>        exceptionResolver.setExceptionAttribute(<span class="hljs-string">&quot;ex&quot;</span>);<br>        resolvers.add(exceptionResolver);<br>    &#125;<br><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(<br>                webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-comment">//生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="13-4、测试功能"><a href="#13-4、测试功能" class="headerlink" title="13.4、测试功能"></a>13.4、测试功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="14、SpringMVC执行流程"><a href="#14、SpringMVC执行流程" class="headerlink" title="14、SpringMVC执行流程"></a>14、SpringMVC执行流程</h1><h2 id="14-1、SpringMVC常用组件"><a href="#14-1、SpringMVC常用组件" class="headerlink" title="14.1、SpringMVC常用组件"></a>14.1、SpringMVC常用组件</h2><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发（即Controller）</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、</p><p>RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h2 id="14-2、DispatcherServlet初始化过程"><a href="#14-2、DispatcherServlet初始化过程" class="headerlink" title="14.2、DispatcherServlet初始化过程"></a>14.2、DispatcherServlet初始化过程</h2><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet生命周期来进行调度。</p><p><img src="/img%5C33.png" alt="33"></p><h3 id="①初始化WebApplicationContext"><a href="#①初始化WebApplicationContext" class="headerlink" title="①初始化WebApplicationContext"></a>①初始化WebApplicationContext</h3><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span>(ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                    <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                    <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                            <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                            cwac.setParent(rootContext);<br>                    &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>            <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>            <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>            wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        <span class="hljs-comment">// 创建WebApplicationContext</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>            <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>            <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新WebApplicationContext</span><br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②创建WebApplicationContext"><a href="#②创建WebApplicationContext" class="headerlink" title="②创建WebApplicationContext"></a>②创建WebApplicationContext</h3><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass))<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> +getServletName() +<br>                                              <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>                                              <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext)BeanUtils.instantiateClass(contextClass);<br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 设置父容器（把Spring的ioc容器设置为SpringMVC的父容器；子可访问父中的bean，反之不行）</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="③DispatcherServlet初始化策略"><a href="#③DispatcherServlet初始化策略" class="headerlink" title="③DispatcherServlet初始化策略"></a>③DispatcherServlet初始化策略</h3><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在</p><p>DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化</p><p>DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>    initMultipartResolver(context);<br>    initLocaleResolver(context);<br>    initThemeResolver(context);<br>    initHandlerMappings(context);<br>    initHandlerAdapters(context);<br>    initHandlerExceptionResolvers(context);<br>    initRequestToViewNameTranslator(context);<br>    initViewResolvers(context);<br>    initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-3、DispatcherServlet调用组件处理请求"><a href="#14-3、DispatcherServlet调用组件处理请求" class="headerlink" title="14.3、DispatcherServlet调用组件处理请求"></a>14.3、DispatcherServlet调用组件处理请求</h2><h3 id="①processRequest"><a href="#①processRequest" class="headerlink" title="①processRequest()"></a>①processRequest()</h3><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了</p><p>processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response)</span><span class="hljs-keyword">throws</span> ServletException, IOException<br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request,response, previousAttributes);<br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br>    initContextHolders(request, localeContext, requestAttributes);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span><br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ServletException | IOException ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Request processing failed&quot;</span>, ex);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        resetContextHolders(request, previousLocaleContext, previousAttributes);<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            requestAttributes.requestCompleted();<br>        &#125;<br>        logResult(request, response, failureCause, asyncManager);<br>        publishRequestHandledEvent(request, response, startTime, failureCause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②doService"><a href="#②doService" class="headerlink" title="②doService()"></a>②doService()</h3><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>logRequest(request);<br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName,request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE,getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request,response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE,Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;<br>        requestPath = ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span><br>            (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestPath != <span class="hljs-literal">null</span>) &#123;<br>            ServletRequestPathUtils.clearParsedRequestPath(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="③doDispatch"><a href="#③doDispatch" class="headerlink" title="③doDispatch()"></a>③doDispatch()</h3><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br>            <span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                mappedHandler：调用链</span><br><span class="hljs-comment">                包含handler、interceptorList、interceptorIndex</span><br><span class="hljs-comment">                handler：浏览器发送的请求所匹配的控制器方法</span><br><span class="hljs-comment">                interceptorList：处理控制器方法的所有拦截器集合</span><br><span class="hljs-comment">                interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span><br><span class="hljs-comment">             */</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>            <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br>            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br>            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request,mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request,response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>            mv = ha.handle(processedRequest, response,mappedHandler.getHandler());<br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            applyDefaultViewName(processedRequest, mv);<br>            <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and otherscenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatchfailed&quot;</span>, err);<br>         &#125;<br>         <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图 </span><br>         processDispatchResult(processedRequest, response, mappedHandler, mv,dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processingfailed&quot;</span>,<br>                                                                                                    err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>             &#125;<br>         &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;                                                          <br></code></pre></td></tr></table></figure><h3 id="④processDispatchResult"><a href="#④processDispatchResult" class="headerlink" title="④processDispatchResult()"></a>④processDispatchResult()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response,<span class="hljs-meta">@Nullable</span> HandlerExecutionChain</span><br><span class="hljs-params">                                   mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,<span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>            logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>,exception);<br>            mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler(): <span class="hljs-literal">null</span>);<br>            mv = processHandlerException(request, response, handler, exception);<br>            errorView = (mv != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Did the handler return a view to render?</span><br>    <span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>        render(mv, request, response);<br>        <span class="hljs-keyword">if</span> (errorView) &#123;<br>            WebUtils.clearErrorRequestAttributes(request);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>        <span class="hljs-comment">// Concurrent handling started during a forward</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>        mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;                                   <br></code></pre></td></tr></table></figure><h2 id="14-4、SpringMVC的执行流程"><a href="#14-4、SpringMVC的执行流程" class="headerlink" title="14.4、SpringMVC的执行流程"></a>14.4、SpringMVC的执行流程</h2><ul><li><ol><li>用户向服务器发送请求，请求被 SpringMVC 前端控制器 DispatcherServlet 捕获。</li></ol></li><li><ol start="2"><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><ul><li><p>a) 不存在</p><ul><li><p>i. 再判断是否配置了 <strong>mvc:default-servlet-handler</strong></p></li><li><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="/2022/12/18/SpringMVC/34.png" alt="34"></p><p><img src="/2022/12/18/SpringMVC/35.png" alt="35"></p></li><li><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="/img%5C36.png" alt="36"></p><p><img src="/img%5C37.png" alt="37"></p></li></ul></li><li><p>b) 存在，则执行下面的流程</p><ul><li><ol start="3"><li>根据该URI，调用 <strong>HandlerMapping</strong> 获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li></ol></li><li><ol start="4"><li>DispatcherServlet 根据获得的<strong>Handler</strong>，选择一个合适的HandlerAdapter。</li></ol></li><li><ol start="5"><li>如果成功获得 <strong>HandlerAdapter</strong> ，此时将开始执行拦截器的preHandler(…)方法【正向】</li></ol></li><li><ol start="6"><li>提取 <strong>Request</strong> 中的模型数据，<strong>填充 Handler 入参</strong>，开始<strong>执行 Handler（Controller）方法</strong>，处理请求。</li></ol><ul><li>在填充 Handler 的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li><li>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li><li>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li><li>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li><li>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li></ul></li><li><ol start="7"><li>Handler执行完成后，向DispatcherServlet 返回一个 <strong>ModelAndView 对象</strong>。</li></ol></li><li><ol start="8"><li>此时将开始执行拦截器的 postHandle(…) 方法【逆向】。</li></ol></li><li><ol start="9"><li>根据返回的 ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li></ol></li><li><ol start="10"><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li></ol></li><li><ol start="11"><li>将渲染结果返回给客户端。</li></ol></li></ul></li></ul></li></ul><h1 id="四、SSM整合"><a href="#四、SSM整合" class="headerlink" title="四、SSM整合"></a>四、SSM整合</h1><p>SpringMVC 在初始化时会加载DispatcherServlet（设置了优先级），DispatcherServlet 中会初始化 SpringMVC的IOC容器，其中包含Controller对象，而Controller对象 依赖于 Spring的IOC容器中的 Service 对象，因此Spring的IOC容器必须先初始化</p><h2 id="4-1、ContextLoaderListener"><a href="#4-1、ContextLoaderListener" class="headerlink" title="4.1、ContextLoaderListener"></a>4.1、ContextLoaderListener</h2><p>ContextLoaderListener在服务器启动时初始化</p><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听ServletContext的状态，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web应用 中必须在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置Spring的监听器，在服务器启动时加载Spring的配置文件</span><br><span class="hljs-comment">        Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml</span><br><span class="hljs-comment">        可通过上下文参数自定义Spring配置文件的位置和名称</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-comment">&lt;!--自定义Spring配置文件的位置和名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-2、准备工作"><a href="#4-2、准备工作" class="headerlink" title="4.2、准备工作"></a>4.2、准备工作</h2><h3 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h3><h3 id="②导入依赖"><a href="#②导入依赖" class="headerlink" title="②导入依赖"></a>②导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springmvc--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis和spring的整合包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="③创建表"><a href="#③创建表" class="headerlink" title="③创建表"></a>③创建表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `t_emp` (<br>    `emp_id` int(11) NOT NULL AUTO_INCREMENT,<br>    `emp_name` varchar(20) DEFAULT NULL,<br>    `age` int(11) DEFAULT NULL,<br>    `sex` char(1) DEFAULT NULL,<br>    `email` varchar(50) DEFAULT NULL,<br>    PRIMARY KEY (`emp_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br></code></pre></td></tr></table></figure><h2 id="4-3、配置web-xml"><a href="#4-3、配置web-xml" class="headerlink" title="4.3、配置web.xml"></a>4.3、配置web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置Spring的编码过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置处理请求方式PUT和DELETE的过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filterclass&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置SpringMVC的配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 设置Spring的配置文件的位置和名称 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:Spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Spring的监听器 --&gt;</span> <span class="hljs-comment">&lt;!--在服务器启动时加载Spring的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-4、创建SpringMVC的配置文件并配置"><a href="#4-4、创建SpringMVC的配置文件并配置" class="headerlink" title="4.4、创建SpringMVC的配置文件并配置"></a>4.4、创建SpringMVC的配置文件并配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ssm.controller&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置访问首页的视图控制 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置默认的servlet处理静态资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 开启MVC的注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置文件上传解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-5、搭建MyBatis环境"><a href="#4-5、搭建MyBatis环境" class="headerlink" title="4.5、搭建MyBatis环境"></a>4.5、搭建MyBatis环境</h2><h3 id="①创建属性文件jdbc-properties"><a href="#①创建属性文件jdbc-properties" class="headerlink" title="①创建属性文件jdbc.properties"></a>①创建属性文件jdbc.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h3 id="②创建MyBatis的核心配置文件mybatis-config-xml"><a href="#②创建MyBatis的核心配置文件mybatis-config-xml" class="headerlink" title="②创建MyBatis的核心配置文件mybatis-config.xml"></a>②创建MyBatis的核心配置文件mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置分页插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③创建Mapper接口和映射文件"><a href="#③创建Mapper接口和映射文件" class="headerlink" title="③创建Mapper接口和映射文件"></a>③创建Mapper接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> &#123;<br>    List&lt;Employee&gt; <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmployeeList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span><br>        select * from t_emp<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="④创建日志文件log4j-xml"><a href="#④创建日志文件log4j-xml" class="headerlink" title="④创建日志文件log4j.xml"></a>④创建日志文件log4j.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6、创建Spring的配置文件并配置"><a href="#4-6、创建Spring的配置文件并配置" class="headerlink" title="4.6、创建Spring的配置文件并配置"></a>4.6、创建Spring的配置文件并配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.ssm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 引入jdbc.properties --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置Druid数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置用于创建SqlSessionFactory的工厂bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置MyBatis配置文件的路径（可以不设置） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置类型别名所对应的包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.atguigu.ssm.pojo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            设置映射文件的路径</span><br><span class="hljs-comment">            若映射文件所在路径和mapper接口所在路径一致，并且配置了下面的扫描配置，则不需要设置</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;</span><br><span class="hljs-comment">            &lt;/property&gt;</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置mapper接口的扫描配置</span><br><span class="hljs-comment">        由mybatis-spring提供，可以为指定包下所有的mapper接口，</span><br><span class="hljs-comment">通过SqlSessionFactory创建出来的对应mpaaer的SqlSession，创建mapper接口的动态代理对象</span><br><span class="hljs-comment">        并将这些动态代理作为IOC容器的bean管理</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.atguigu.ssm.mapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-7、测试功能"><a href="#4-7、测试功能" class="headerlink" title="4.7、测试功能"></a>4.7、测试功能</h2><h3 id="①创建组件"><a href="#①创建组件" class="headerlink" title="①创建组件"></a>①创建组件</h3><p>实体类Employee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(Integer empId, String empName, Integer age, String sex,</span><br><span class="hljs-params">                    String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpId</span><span class="hljs-params">(Integer empId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpName</span><span class="hljs-params">(String empName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建控制层组件EmployeeController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmployeeService employeeService;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/employee/page/&#123;pageNum&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Model model, <span class="hljs-meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum)</span>&#123;<br>        PageInfo&lt;Employee&gt; page = employeeService.getEmployeeList(pageNum);<br>        model.addAttribute(<span class="hljs-string">&quot;page&quot;</span>, page);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_list&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口EmployeeService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br>PageInfo&lt;Employee&gt; <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Integer pageNum)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类EmployeeServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmployeeService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmployeeMapper employeeMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageInfo&lt;Employee&gt; <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Integer pageNum)</span> &#123;<br>        PageHelper.startPage(pageNum, <span class="hljs-number">4</span>);<br>        List&lt;Employee&gt; list = employeeMapper.getEmployeeList();<br>        PageInfo&lt;Employee&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(list, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②创建页面-1"><a href="#②创建页面-1" class="headerlink" title="②创建页面"></a>②创建页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>员工列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>emp_id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>emp_name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>sex<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;page.list&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.empId&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.empName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee/page/1&#125;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.prePage&#125;&#125;&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;num:$&#123;page.navigatepageNums&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.pageNum == num&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.pageNum != num&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;num&#125;&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.hasNextPage&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;page.hasNextPage&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span>&gt;</span>末页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③访问测试分页功能"><a href="#③访问测试分页功能" class="headerlink" title="③访问测试分页功能"></a>③访问测试分页功能</h3><p>localhost:8080&#x2F;employee&#x2F;page&#x2F;1</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2022/11/12/Spring/"/>
    <url>/2022/11/12/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h1 id="1、Spring简介"><a href="#1、Spring简介" class="headerlink" title="1、Spring简介"></a>1、Spring简介</h1><h3 id="1-1、Spring概述"><a href="#1-1、Spring概述" class="headerlink" title="1.1、Spring概述"></a>1.1、Spring概述</h3><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用</p><p>Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首</p><p>次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应</p><p>用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO</p><p>编程模型来促进良好的编程实践。</p></blockquote><h3 id="1-2、Spring家族"><a href="#1-2、Spring家族" class="headerlink" title="1.2、Spring家族"></a>1.2、Spring家族</h3><p>项目列表：<a href="https://spring.io/projects">https://spring.io/projects</a></p><h3 id="1-3、Spring-Framework"><a href="#1-3、Spring-Framework" class="headerlink" title="1.3、Spring Framework"></a>1.3、Spring Framework</h3><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework为基础的。</p><h4 id="1-3-1、Spring-Framework特性"><a href="#1-3-1、Spring-Framework特性" class="headerlink" title="1.3.1、Spring Framework特性"></a>1.3.1、Spring Framework特性</h4><ul><li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常</li></ul><p>小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会</p><p>破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序</p><p>时结构清晰、简洁优雅。</p><ul><li>控制反转：IOC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源</li></ul><p>变成环境将资源准备好，我们享受资源注入。</p><ul><li>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功</li></ul><p>能。</p><ul><li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化</li></ul><p>的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发</p><p>效率。</p><ul><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML</li></ul><p>和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭</p><p>建超大型复杂应用系统。</p><ul><li><p>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</p></li><li><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且</p></li></ul><p>Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基</p><p>础上全部使用 Spring 来实现。</p><h4 id="1-3-2、Spring-Framework五大功能模块"><a href="#1-3-2、Spring-Framework五大功能模块" class="headerlink" title="1.3.2、Spring Framework五大功能模块"></a>1.3.2、Spring Framework五大功能模块</h4><table><thead><tr><th><strong>功能模块</strong></th><th><strong>功能介绍</strong></th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>Testing</td><td>提供了对 junit 或 TestNG 测试框架的整合。</td></tr><tr><td>Data Access&#x2F;Integration</td><td>提供了对数据访问&#x2F;集成的功能。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h1 id="2、IOC"><a href="#2、IOC" class="headerlink" title="2、IOC"></a>2、IOC</h1><h2 id="2-1、IOC容器"><a href="#2-1、IOC容器" class="headerlink" title="2.1、IOC容器"></a>2.1、IOC容器</h2><h3 id="2-1-1、IOC思想"><a href="#2-1-1、IOC思想" class="headerlink" title="2.1.1、IOC思想"></a>2.1.1、IOC思想</h3><p>IOC：Inversion of Control，翻译过来是<strong>反转控制</strong>。</p><h4 id="①获取资源的传统方式"><a href="#①获取资源的传统方式" class="headerlink" title="①获取资源的传统方式"></a>①获取资源的传统方式</h4><p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，必须清楚了解资源创建整个过程中的全部细节且熟练掌握。</p><p>在应用程序中的组件需要获取资源时，传统的方式是组件<strong>主动</strong>的从容器中获取所需要的资源，在这样的</p><p>模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p><h4 id="②反转控制方式获取资源"><a href="#②反转控制方式获取资源" class="headerlink" title="②反转控制方式获取资源"></a>②反转控制方式获取资源</h4><p>点外卖：下单、等、吃，省时省力，不必关心资源创建过程的所有细节。</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的<strong>被动</strong>形式。</p><h4 id="③DI"><a href="#③DI" class="headerlink" title="③DI"></a>③DI</h4><p>DI：Dependency Injection，翻译过来是<strong>依赖注入</strong>。</p><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器</p><p>的资源注入。相对于IOC而言，这种表述更直接。</p><p>所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p><h3 id="2-1-2、IOC容器在Spring中的实现"><a href="#2-1-2、IOC容器在Spring中的实现" class="headerlink" title="2.1.2、IOC容器在Spring中的实现"></a>2.1.2、IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p><h4 id="①BeanFactory"><a href="#①BeanFactory" class="headerlink" title="①BeanFactory"></a>①BeanFactory</h4><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><h4 id="②ApplicationContext"><a href="#②ApplicationContext" class="headerlink" title="②ApplicationContext"></a>②ApplicationContext</h4><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用</p><p>ApplicationContext 而不是底层的 BeanFactory。</p><h4 id="③ApplicationContext的主要实现类"><a href="#③ApplicationContext的主要实现类" class="headerlink" title="③ApplicationContext的主要实现类"></a>③ApplicationContext的主要实现类</h4><p><img src="/2022/11/12/Spring/5.png" alt="5"></p><table><thead><tr><th><strong>类型名</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h2 id="2-2、基于XML管理bean"><a href="#2-2、基于XML管理bean" class="headerlink" title="2.2、基于XML管理bean"></a>2.2、基于XML管理bean</h2><h3 id="2-2-1、实验一：入门案例"><a href="#2-2-1、实验一：入门案例" class="headerlink" title="2.2.1、实验一：入门案例"></a>2.2.1、实验一：入门案例</h3><h4 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h4><h4 id="②引入依赖"><a href="#②引入依赖" class="headerlink" title="②引入依赖"></a>②引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/11/12/Spring/6.png" alt="6"></p><h4 id="③创建类HelloWorld"><a href="#③创建类HelloWorld" class="headerlink" title="③创建类HelloWorld"></a>③创建类HelloWorld</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/11/12/Spring/7.png" alt="7"></p><p><img src="/2022/11/12/Spring/8.png" alt="8"></p><h4 id="⑤在Spring的配置文件中配置bean"><a href="#⑤在Spring的配置文件中配置bean" class="headerlink" title="⑤在Spring的配置文件中配置bean"></a>⑤在Spring的配置文件中配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">配置HelloWorld所对应的bean，即,将HelloWorld的对象交给Spring的IOC容器管理</span><br><span class="hljs-comment">通过bean标签配置IOC容器所管理的bean</span><br><span class="hljs-comment">属性：</span><br><span class="hljs-comment">id：设置bean的唯一标识</span><br><span class="hljs-comment">class：设置bean所对应类型的全类名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloworld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="⑥创建测试类测试"><a href="#⑥创建测试类测试" class="headerlink" title="⑥创建测试类测试"></a>⑥创建测试类测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取IOC容器</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">//获取IOC容器中的bean</span><br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloworld</span> <span class="hljs-operator">=</span> (HelloWorld) ioc.getBean(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    helloworld.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⑦思路"><a href="#⑦思路" class="headerlink" title="⑦思路"></a>⑦思路</h4><p><img src="/2022/11/12/Spring/9.png" alt="9"></p><h4 id="⑧注意"><a href="#⑧注意" class="headerlink" title="⑧注意"></a>⑧注意</h4><p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。</p><p>如果在需要无参构造器时，没有无参构造器，则会抛出下面的异常：</p><blockquote><p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name</p><p>‘helloworld’ defined in class path resource [applicationContext.xml]: Instantiation of bean</p><p>failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed</p><p>to instantiate [com.atguigu.spring.bean.HelloWorld]: No default constructor found; nested</p><p>exception is java.lang.NoSuchMethodException: com.atguigu.spring.bean.HelloWorld.</p><p><init>()</p></blockquote><h3 id="2-2-2、实验二：获取bean"><a href="#2-2-2、实验二：获取bean" class="headerlink" title="2.2.2、实验二：获取bean"></a>2.2.2、实验二：获取bean</h3><h4 id="①方式一：根据id获取"><a href="#①方式一：根据id获取" class="headerlink" title="①方式一：根据id获取"></a>①方式一：根据id获取</h4><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。</p><p>上个实验中我们使用的就是这种方式。</p><h4 id="②方式二：根据类型获取-常用"><a href="#②方式二：根据类型获取-常用" class="headerlink" title="②方式二：根据类型获取(常用)"></a>②方式二：根据类型获取(常用)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ioc.getBean(HelloWorld.class);<br>    bean.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③方式三：根据id和类型"><a href="#③方式三：根据id和类型" class="headerlink" title="③方式三：根据id和类型"></a>③方式三：根据id和类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span><br>        newClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ioc.getBean(<span class="hljs-string">&quot;helloworld&quot;</span>, HelloWorld.class);<br>    bean.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="④注意"><a href="#④注意" class="headerlink" title="④注意"></a>④注意</h4><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><p>当IOC容器中一共配置了两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloworldOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloworldTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据类型获取时会抛出异常：</p><blockquote><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean</p><p>of type ‘com.atguigu.spring.bean.HelloWorld’ available: expected single matching bean but</p><p>found 2: helloworldOne,helloworldTwo</p></blockquote><h4 id="⑤扩展"><a href="#⑤扩展" class="headerlink" title="⑤扩展"></a>⑤扩展</h4><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是bean唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean不唯一</p></blockquote><h4 id="⑥结论"><a href="#⑥结论" class="headerlink" title="⑥结论"></a>⑥结论</h4><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类</p><p>型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><p>即：通过 bean的类型、bean所继承的类的类型、bean所实现的接口的类型都可以获取bean</p><h3 id="2-2-3、实验三：依赖注入之setter注入"><a href="#2-2-3、实验三：依赖注入之setter注入" class="headerlink" title="2.2.3、实验三：依赖注入之setter注入"></a>2.2.3、实验三：依赖注入之setter注入</h3><h4 id="①创建学生类Student"><a href="#①创建学生类Student" class="headerlink" title="①创建学生类Student"></a>①创建学生类Student</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;id=&quot;</span> + id +<br>            <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>            <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②配置bean时为属性赋值"><a href="#②配置bean时为属性赋值" class="headerlink" title="②配置bean时为属性赋值"></a>②配置bean时为属性赋值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）--&gt;</span><br>    <span class="hljs-comment">&lt;!-- value属性：指定属性值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="③测试"><a href="#③测试" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDIBySet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;springdi.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">studentOne</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;studentOne&quot;</span>, Student.class);<br>    System.out.println(studentOne);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-4、实验四：依赖注入之构造器注入"><a href="#2-2-4、实验四：依赖注入之构造器注入" class="headerlink" title="2.2.4、实验四：依赖注入之构造器注入"></a>2.2.4、实验四：依赖注入之构造器注入</h3><h4 id="①在Student类中添加有参构造"><a href="#①在Student类中添加有参构造" class="headerlink" title="①在Student类中添加有参构造"></a>①在Student类中添加有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(Integer id, String name, Integer age, String sex)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②配置bean"><a href="#②配置bean" class="headerlink" title="②配置bean"></a>②配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1002&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul></blockquote><h4 id="③测试-1"><a href="#③测试-1" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDIBySet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;springdi.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">studentOne</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;studentTwo&quot;</span>, Student.class);<br>    System.out.println(studentOne);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-5、实验五：特殊值处理"><a href="#2-2-5、实验五：特殊值处理" class="headerlink" title="2.2.5、实验五：特殊值处理"></a>2.2.5、实验五：特殊值处理</h3><h4 id="①字面量赋值"><a href="#①字面量赋值" class="headerlink" title="①字面量赋值"></a>①字面量赋值</h4><blockquote><p>什么是字面量？</p><p>int a &#x3D; 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a</p><p>的时候，我们实际上拿到的值是10。</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面</p><p>量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②null值"><a href="#②null值" class="headerlink" title="②null值"></a>②null值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;null&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上写法，为name所赋的值是字符串null</p></blockquote><h4 id="③xml实体"><a href="#③xml实体" class="headerlink" title="③xml实体"></a>③xml实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br><span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④CDATA节"><a href="#④CDATA节" class="headerlink" title="④CDATA节"></a>④CDATA节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-6、实验六：为类类型属性赋值"><a href="#2-2-6、实验六：为类类型属性赋值" class="headerlink" title="2.2.6、实验六：为类类型属性赋值"></a>2.2.6、实验六：为类类型属性赋值</h3><h4 id="①创建班级类Clazz"><a href="#①创建班级类Clazz" class="headerlink" title="①创建班级类Clazz"></a>①创建班级类Clazz</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clazz</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer clazzId;<br>    <span class="hljs-keyword">private</span> String clazzName;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getClazzId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> clazzId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazzId</span><span class="hljs-params">(Integer clazzId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzId = clazzId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClazzName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> clazzName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazzName</span><span class="hljs-params">(String clazzName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzName = clazzName;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Clazz&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;clazzId=&quot;</span> + clazzId +<br>            <span class="hljs-string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clazz</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clazz</span><span class="hljs-params">(Integer clazzId, String clazzName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzId = clazzId;<br>        <span class="hljs-built_in">this</span>.clazzName = clazzName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②修改Student类"><a href="#②修改Student类" class="headerlink" title="②修改Student类"></a>②修改Student类</h4><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Clazz clazz;<br><span class="hljs-keyword">public</span> Clazz <span class="hljs-title function_">getClazz</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazz</span><span class="hljs-params">(Clazz clazz)</span> &#123;<br>    <span class="hljs-built_in">this</span>.clazz = clazz;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③方式一：引用外部已声明的bean"><a href="#③方式一：引用外部已声明的bean" class="headerlink" title="③方式一：引用外部已声明的bean"></a>③方式一：引用外部已声明的bean</h4><p><strong>说明：ref：引用IOC容器中的某个bean的id</strong></p><p>配置Clazz类型的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1111&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为Student中的clazz属性赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException:</p><p>Cannot convert value of type ‘java.lang.String’ to required type</p><p>‘com.atguigu.spring.bean.Clazz’ for property ‘clazz’: no matching editors or conversion</p><p>strategy found</p><p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个</p><p>属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><h4 id="④方式二：内部bean"><a href="#④方式二：内部bean" class="headerlink" title="④方式二：内部bean"></a>④方式二：内部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzInner&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;远大前程班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="③方式三：级联属性赋值（比较少用）"><a href="#③方式三：级联属性赋值（比较少用）" class="headerlink" title="③方式三：级联属性赋值（比较少用）"></a>③方式三：级联属性赋值（比较少用）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 一定要先引用某个bean为类属性赋值，才可以使用级联方式更新属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3333&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;最强王者班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-7、实验七：为数组类型属性赋值"><a href="#2-2-7、实验七：为数组类型属性赋值" class="headerlink" title="2.2.7、实验七：为数组类型属性赋值"></a>2.2.7、实验七：为数组类型属性赋值</h3><h4 id="①修改Student类"><a href="#①修改Student类" class="headerlink" title="①修改Student类"></a>①修改Student类</h4><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String[] hobbies;<br><span class="hljs-keyword">public</span> String[] getHobbies() &#123;<br>    <span class="hljs-keyword">return</span> hobbies;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobbies</span><span class="hljs-params">(String[] hobbies)</span> &#123;<br>    <span class="hljs-built_in">this</span>.hobbies = hobbies;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②配置bean-1"><a href="#②配置bean-1" class="headerlink" title="②配置bean"></a>②配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--如果是字面量类型就使用value，如果是引用类型就使用ref--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-8、实验八：为集合类型属性赋值"><a href="#2-2-8、实验八：为集合类型属性赋值" class="headerlink" title="2.2.8、实验八：为集合类型属性赋值"></a>2.2.8、实验八：为集合类型属性赋值</h3><h4 id="①为List集合类型属性赋值"><a href="#①为List集合类型属性赋值" class="headerlink" title="①为List集合类型属性赋值"></a>①为List集合类型属性赋值</h4><p>在Clazz类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudents</span><span class="hljs-params">(List&lt;Student&gt; students)</span> &#123;<br>    <span class="hljs-built_in">this</span>.students = students;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4444&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Javaee0222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p></blockquote><h4 id="②为Map集合类型属性赋值"><a href="#②为Map集合类型属性赋值" class="headerlink" title="②为Map集合类型属性赋值"></a>②为Map集合类型属性赋值</h4><p>创建教师类Teacher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer teacherId;<br>    <span class="hljs-keyword">private</span> String teacherName;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTeacherId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherId</span><span class="hljs-params">(Integer teacherId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherId = teacherId;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTeacherName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherName</span><span class="hljs-params">(String teacherName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherName = teacherName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(Integer teacherId, String teacherName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherId = teacherId;<br>        <span class="hljs-built_in">this</span>.teacherName = teacherName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;teacherId=&quot;</span> + teacherId +<br>            <span class="hljs-string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;<br><span class="hljs-keyword">public</span> Map&lt;String, Teacher&gt; <span class="hljs-title function_">getTeacherMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> teacherMap;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherMap</span><span class="hljs-params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;<br>    <span class="hljs-built_in">this</span>.teacherMap = teacherMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10010&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;大宝&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10086&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;二宝&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="③引用集合类型的bean"><a href="#③引用集合类型的bean" class="headerlink" title="③引用集合类型的bean"></a>③引用集合类型的bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--list集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--map集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4444&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Javaee0222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用util:list、util:map标签必须引入相应的命名空间，可以通过idea的提示功能选择</p></blockquote><h3 id="2-2-9、实验九：p命名空间"><a href="#2-2-9、实验九：p命名空间" class="headerlink" title="2.2.9、实验九：p命名空间"></a>2.2.9、实验九：p命名空间</h3><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSix&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean.Student&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">p:id</span>=<span class="hljs-string">&quot;1006&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;小明&quot;</span> <span class="hljs-attr">p:clazz-ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-10、实验十：引入外部属性文件"><a href="#2-2-10、实验十：引入外部属性文件" class="headerlink" title="2.2.10、实验十：引入外部属性文件"></a>2.2.10、实验十：引入外部属性文件</h3><h4 id="①加入依赖"><a href="#①加入依赖" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②创建外部属性文件"><a href="#②创建外部属性文件" class="headerlink" title="②创建外部属性文件"></a>②创建外部属性文件</h4><p><img src="/2022/11/12/Spring/10.png" alt="10"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h4 id="③引入属性文件"><a href="#③引入属性文件" class="headerlink" title="③引入属性文件"></a>③引入属性文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④配置bean"><a href="#④配置bean" class="headerlink" title="④配置bean"></a>④配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="⑤测试"><a href="#⑤测试" class="headerlink" title="⑤测试"></a>⑤测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-datasource.xml&quot;</span>);<br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ac.getBean(DataSource.class);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    System.out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p><a href="https://www.cnblogs.com/ttflove/p/6351345.html">通配符的匹配很全面, 但无法找到元素 ‘context:property-placeholder’ 的声明。</a></p><p>在Spring相应包导入正确的前提下，出现这个异常，是因为我们在引入命名空间的时候，没有正确引入它的DTD解析文件，以上面的context为例，解决办法如下：</p><p>在引入xmlns:context&#x3D;”<a href="http://www.springframework.org/schema/context%22%E7%9A%84%E5%90%8C%E6%97%B6%EF%BC%8C%E5%9C%A8xsi:schemaLocation%E8%BF%99%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%B7%BB%E5%8A%A0context%E7%9B%B8%E5%85%B3%E7%9A%84%E8%A7%A3%E6%9E%90%E6%96%87%E4%BB%B6%EF%BC%9A">http://www.springframework.org/schema/context&quot;的同时，在xsi:schemaLocation这个字符串中添加context相关的解析文件：</a></p><p><a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a> </p><p><a href="http://www.springframework.org/schema/context/spring-context-4.2.xsd">http://www.springframework.org/schema/context/spring-context-4.2.xsd</a></p><p>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-11、实验十一：bean的作用域"><a href="#2-2-11、实验十一：bean的作用域" class="headerlink" title="2.2.11、实验十一：bean的作用域"></a>2.2.11、实验十一：bean的作用域</h3><h4 id="①概念"><a href="#①概念" class="headerlink" title="①概念"></a>①概念</h4><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th><strong>取值</strong></th><th><strong>含义</strong></th><th><strong>创建对象的时机</strong></th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th><strong>取值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><h4 id="②创建类User"><a href="#②创建类User" class="headerlink" title="②创建类User"></a>②创建类User</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;id=&quot;</span> + id +<br>            <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③配置bean"><a href="#③配置bean" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④测试"><a href="#④测试" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeanScope</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-scope.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    System.out.println(user1==user2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-12、实验十二：bean的生命周期"><a href="#2-2-12、实验十二：bean的生命周期" class="headerlink" title="2.2.12、实验十二：bean的生命周期"></a>2.2.12、实验十二：bean的生命周期</h3><p>若bean的作用域为<strong>单例模式</strong>，生命周期的前三个步骤会在<strong>获取IOC容器时</strong>开始，<strong>销毁会由IOC容器管理</strong></p><p>若bean的作用域为<strong>多例模式</strong>，生命周期的前三个步骤会在<strong>获取bean对象时</strong>开始，<strong>销毁不由IOC容器管理</strong></p><h4 id="①具体的生命周期过程"><a href="#①具体的生命周期过程" class="headerlink" title="①具体的生命周期过程"></a>①具体的生命周期过程</h4><ul><li><strong>bean对象创建（调用无参构造器）</strong></li><li><strong>给bean对象设置属性（依赖注入）</strong></li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li><strong>bean对象初始化（需在配置bean时通过 init-method 属性指定初始化方法）</strong></li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li><strong>bean对象销毁（需在配置bean时通过 destory-method 属性指定销毁方法）</strong></li><li>IOC容器关闭</li></ul><h4 id="②修改类User"><a href="#②修改类User" class="headerlink" title="②修改类User"></a>②修改类User</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：1、创建对象&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：2、依赖注入&quot;</span>);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：3、初始化&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：5、销毁&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;id=&quot;</span> + id +<br>            <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p></blockquote><h4 id="③配置bean-1"><a href="#③配置bean-1" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span><br><span class="hljs-comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④测试-1"><a href="#④测试-1" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLife</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/* ConfigurableApplicationContext是ApplicationContext的子接口，其中扩展了刷新和关闭容器的方法； ClassPathXmlApplicationContext是ConfigurableApplicationContext的一个实现类 */</span><br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-lifecycle.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    System.out.println(<span class="hljs-string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);<br>    ac.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⑤bean的后置处理器"><a href="#⑤bean的后置处理器" class="headerlink" title="⑤bean的后置处理器"></a>⑤bean的后置处理器</h4><p>bean的后置处理器会在生命周期的<strong>初始化前后</strong>添加额外的操作，需要实现BeanPostProcessor接口，且需要配置到 IOC容器中</p><p><strong>需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</strong></p><p>创建bean的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.process;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <br><span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在IOC容器中配置后置处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.process.MyBeanProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-13、实验十三：FactoryBean"><a href="#2-2-13、实验十三：FactoryBean" class="headerlink" title="2.2.13、实验十三：FactoryBean"></a>2.2.13、实验十三：FactoryBean</h3><p><strong>说明：需要实现 FactoryBean&lt;T&gt; 接口</strong> </p><h4 id="①简介"><a href="#①简介" class="headerlink" title="①简介"></a>①简介</h4><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。</p><p><strong>和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象（Factory对象），而是getObject()方法的返回值（Factory所提供的对象）。</strong>通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Copyright 2002-2020 the original author or authors.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">* you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">* You may obtain a copy of the License at</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">* See the License for the specific language governing permissions and</span><br><span class="hljs-comment">* limitations under the License.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Interface to be implemented by objects used within a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;</span><br><span class="hljs-comment">which</span><br><span class="hljs-comment">* are themselves factories for individual objects. If a bean implements this</span><br><span class="hljs-comment">* interface, it is used as a factory for an object to expose, not directly as a</span><br><span class="hljs-comment">* bean instance that will be exposed itself.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal</span><br><span class="hljs-comment">bean.&lt;/b&gt;</span><br><span class="hljs-comment">* A FactoryBean is defined in a bean style, but the object exposed for bean</span><br><span class="hljs-comment">* references (&#123;<span class="hljs-doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span><br><span class="hljs-comment">* objects lazily on demand or eagerly on startup. The &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125;</span><br><span class="hljs-comment">* interface allows for exposing more fine-grained behavioral metadata.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;This interface is heavily used within the framework itself, for example</span><br><span class="hljs-comment">for</span><br><span class="hljs-comment">* the AOP &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span><br><span class="hljs-comment">* custom components as well; however, this is only common for infrastructure</span><br><span class="hljs-comment">code.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;&#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span><br><span class="hljs-comment">* supposed to rely on annotation-driven injection or other reflective</span><br><span class="hljs-comment">facilities.&lt;/b&gt;</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> #getObjectType()&#125; &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; invocations may arrive early in</span><br><span class="hljs-comment">the</span><br><span class="hljs-comment">* bootstrap process, even ahead of any post-processor setup. If you need access</span><br><span class="hljs-comment">to</span><br><span class="hljs-comment">* other beans, implement &#123;<span class="hljs-doctag">@link</span> BeanFactoryAware&#125; and obtain them</span><br><span class="hljs-comment">programmatically.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the</span><br><span class="hljs-comment">FactoryBean</span><br><span class="hljs-comment">* instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt;</span><br><span class="hljs-comment">Therefore,</span><br><span class="hljs-comment">* a destroy method on an exposed bean object (such as &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">java.io.Closeable#close()&#125;</span><br><span class="hljs-comment">* will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should</span><br><span class="hljs-comment">implement</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying</span><br><span class="hljs-comment">object.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span><br><span class="hljs-comment">* synchronization of bean creation. There is usually no need for internal</span><br><span class="hljs-comment">* synchronization other than for purposes of lazy initialization within the</span><br><span class="hljs-comment">* FactoryBean itself (or the like).</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 08.03.2003</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &lt;T&gt; the bean type</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> org.springframework.beans.factory.BeanFactory</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FactoryBean</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* The name of an attribute that can be</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span><br><span class="hljs-comment">* factory beans can signal their object type when it can&#x27;t be deduced from</span><br><span class="hljs-comment">* the factory bean class.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;factoryBeanObjectType&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* Return an instance (possibly shared or independent) of the object</span><br><span class="hljs-comment">* managed by this factory.</span><br><span class="hljs-comment">* &lt;p&gt;As with a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;, this allows support for both the</span><br><span class="hljs-comment">* Singleton and Prototype design pattern.</span><br><span class="hljs-comment">* &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span><br><span class="hljs-comment">* the call (for example because it is involved in a circular reference),</span><br><span class="hljs-comment">* throw a corresponding &#123;<span class="hljs-doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span><br><span class="hljs-comment">* &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">* objects. The factory will consider this as normal value to be used; it</span><br><span class="hljs-comment">* will not throw a FactoryBeanNotInitializedException in this case anymore.</span><br><span class="hljs-comment">* FactoryBean implementations are encouraged to throw</span><br><span class="hljs-comment">* FactoryBeanNotInitializedException themselves now, as appropriate.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> an instance of the bean (can be &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Exception in case of creation errors</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> FactoryBeanNotInitializedException</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-comment">//通过一个对象交给IOC容器管理</span><br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">* Return the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">* or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known in advance.</span><br><span class="hljs-comment">* &lt;p&gt;This allows one to check for specific types of beans without</span><br><span class="hljs-comment">* instantiating objects, for example on autowiring.</span><br><span class="hljs-comment">* &lt;p&gt;In the case of implementations that are creating a singleton object,</span><br><span class="hljs-comment">* this method should try to avoid singleton creation as far as possible;</span><br><span class="hljs-comment">* it should rather estimate the type in advance.</span><br><span class="hljs-comment">* For prototypes, returning a meaningful type here is advisable too.</span><br><span class="hljs-comment">* &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span><br><span class="hljs-comment">* been fully initialized. It must not rely on state created during</span><br><span class="hljs-comment">* initialization; of course, it can still use such state if available.</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span><br><span class="hljs-comment">* this method properly, using the current state of the FactoryBean.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">* or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known at the time of the call</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> ListableBeanFactory#getBeansOfType</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-comment">//设置所提供对象的类型</span><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getObjectType();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* Is the object managed by this factory a singleton? That is,</span><br><span class="hljs-comment">* will &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; always return the same object</span><br><span class="hljs-comment">* (a reference that can be cached)?</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span><br><span class="hljs-comment">* the object returned from &#123;<span class="hljs-doctag">@code</span> getObject()&#125; might get cached</span><br><span class="hljs-comment">* by the owning BeanFactory. Hence, do not return &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">* unless the FactoryBean always exposes the same reference.</span><br><span class="hljs-comment">* &lt;p&gt;The singleton status of the FactoryBean itself will generally</span><br><span class="hljs-comment">* be provided by the owning BeanFactory; usually, it has to be</span><br><span class="hljs-comment">* defined as singleton there.</span><br><span class="hljs-comment">* &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="hljs-doctag">@code</span> false&#125; does not</span><br><span class="hljs-comment">* necessarily indicate that returned objects are independent instances.</span><br><span class="hljs-comment">* An implementation of the extended &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125; interface</span><br><span class="hljs-comment">* may explicitly indicate independent instances through its</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="hljs-doctag">@link</span> FactoryBean&#125;</span><br><span class="hljs-comment">* implementations which do not implement this extended interface are</span><br><span class="hljs-comment">* simply assumed to always return independent instances if the</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">* &lt;p&gt;The default implementation returns &#123;<span class="hljs-doctag">@code</span> true&#125;, since a</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> whether the exposed object is a singleton</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> #getObject()</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span> SmartFactoryBean#isPrototype()</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-comment">//提供的对象是否为单例</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②创建类UserFactoryBean"><a href="#②创建类UserFactoryBean" class="headerlink" title="②创建类UserFactoryBean"></a>②创建类UserFactoryBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③配置bean-2"><a href="#③配置bean-2" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.bean.UserFactoryBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④测试-2"><a href="#④测试-2" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserFactoryBean</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取IOC容器</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;springfactorybean.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ac.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> ac.getBean(User.class); <br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-14、实验十四：基于xml的自动装配"><a href="#2-2-14、实验十四：基于xml的自动装配" class="headerlink" title="2.2.14、实验十四：基于xml的自动装配"></a>2.2.14、实验十四：基于xml的自动装配</h3><blockquote><p>自动装配：</p><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p></blockquote><h4 id="①场景模拟"><a href="#①场景模拟" class="headerlink" title="①场景模拟"></a>①场景模拟</h4><p>创建类UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建类UserServiceImpl实现接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        userDao.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建类UserDaoImpl实现接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②配置bean-2"><a href="#②配置bean-2" class="headerlink" title="②配置bean"></a>②配置bean</h4><p>使用bean标签的 autowire 属性设置自动装配效果</p><blockquote><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值（null）</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>自动装配方式：byName</p><p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="③测试-2"><a href="#③测试-2" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutoWireByXML</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;autowire-xml.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> ac.getBean(UserController.class);<br>    userController.saveUser();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、基于注解管理bean"><a href="#2-3、基于注解管理bean" class="headerlink" title="2.3、基于注解管理bean"></a>2.3、基于注解管理bean</h2><h3 id="2-3-1、实验一：标记与扫描"><a href="#2-3-1、实验一：标记与扫描" class="headerlink" title="2.3.1、实验一：标记与扫描"></a>2.3.1、实验一：标记与扫描</h3><h4 id="①注解"><a href="#①注解" class="headerlink" title="①注解"></a>①注解</h4><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p><p>举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。</p><p><img src="/2022/11/12/Spring/11.png" alt="11"></p><p>班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。</p><h4 id="②扫描"><a href="#②扫描" class="headerlink" title="②扫描"></a>②扫描</h4><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p><h4 id="③新建Maven-Module"><a href="#③新建Maven-Module" class="headerlink" title="③新建Maven Module"></a>③新建Maven Module</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④创建Spring配置文件"><a href="#④创建Spring配置文件" class="headerlink" title="④创建Spring配置文件"></a>④创建Spring配置文件</h4><p><img src="/2022/11/12/Spring/12.png" alt="12"></p><h4 id="⑤标识组件的常用注解"><a href="#⑤标识组件的常用注解" class="headerlink" title="⑤标识组件的常用注解"></a>⑤标识组件的常用注解</h4><ul><li>@Component：将类标识为普通组件</li><li>@Controller：将类标识为控制层组件</li><li>@Service：将类标识为业务层组件</li><li>@Repository：将类标识为持久层组件</li></ul><p>问：以上四个注解有什么关系和区别？</p><p><img src="/2022/11/12/Spring/13.png" alt="13"></p><p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><p><strong>对于Spring使用IOC容器管理这些组件来说没有区别</strong>。</p><p>所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p><h4 id="⑥创建组件"><a href="#⑥创建组件" class="headerlink" title="⑥创建组件"></a>⑥创建组件</h4><p>创建控制层组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建业务层组件UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建持久层组件UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⑦扫描组件"><a href="#⑦扫描组件" class="headerlink" title="⑦扫描组件"></a>⑦扫描组件</h4><p>情况一：最基本的扫描方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>情况二：指定要排除的组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        type：设置排除或包含的依据</span><br><span class="hljs-comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span><br><span class="hljs-comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.controller.UserController&quot;/&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>情况三：仅扫描指定组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则，默认为true --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        type：设置排除或包含的依据</span><br><span class="hljs-comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span><br><span class="hljs-comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.controller.UserController&quot;/&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="⑧测试"><a href="#⑧测试" class="headerlink" title="⑧测试"></a>⑧测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutowireByAnnotation</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>        <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> ac.getBean(UserController.class);<br>    System.out.println(userController);<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> ac.getBean(UserService.class);<br>    System.out.println(userService);<br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> ac.getBean(UserDao.class);<br>    System.out.println(userDao);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⑨组件所对应的bean的id"><a href="#⑨组件所对应的bean的id" class="headerlink" title="⑨组件所对应的bean的id"></a>⑨组件所对应的bean的id</h4><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。</p><p>现在使用注解后，每个组件仍然应该有一个唯一标识。</p><ul><li><p>默认情况</p><ul><li><strong>类名首字母小写就是bean的id</strong>。例如：UserController类对应的bean的id就是userController。</li></ul></li><li><p>自定义bean的id</p><ul><li><p>可通过标识组件的注解的value属性设置自定义的bean的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userService&quot;)</span>   <span class="hljs-comment">//默认为userServiceImpl </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-3-2、实验二：基于注解的自动装配"><a href="#2-3-2、实验二：基于注解的自动装配" class="headerlink" title="2.3.2、实验二：基于注解的自动装配"></a>2.3.2、实验二：基于注解的自动装配</h3><h4 id="①场景模拟-1"><a href="#①场景模拟-1" class="headerlink" title="①场景模拟"></a>①场景模拟</h4><blockquote><p>参考基于xml的自动装配</p><p>在UserController中声明UserService对象</p><p>在UserServiceImpl中声明UserDao对象</p></blockquote><h4 id="②-Autowired注解"><a href="#②-Autowired注解" class="headerlink" title="②@Autowired注解"></a>②@Autowired注解</h4><p>在成员变量上直接标记@Autowired注解即可完成自动装配，<strong>不需要提供setXxx()方法</strong>。</p><p>以后我们在项目中的正式用法就是这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        userDao.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③-Autowired注解其他细节"><a href="#③-Autowired注解其他细节" class="headerlink" title="③@Autowired注解其他细节"></a>③@Autowired注解其他细节</h4><blockquote><p>@Autowired注解还可以标记在 构造器 和 set方法 上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="④-Autowired工作流程"><a href="#④-Autowired工作流程" class="headerlink" title="④@Autowired工作流程"></a>④@Autowired工作流程</h4><p><img src="/2022/11/12/Spring/14.png" alt="14"></p><ul><li>首先根据所需要的<strong>组件类型</strong>到IOC容器中查找<ul><li>能够找到唯一的bean：直接执行装配</li><li>如果完全找不到匹配这个类型的bean：装配失败</li><li>和所需类型匹配的bean不止一个<ul><li>没有@Qualifier注解：根据@Autowired标记位置<strong>成员变量的变量名</strong>作为<strong>bean的id</strong>进行匹配</li><li>能够找到：执行装配</li><li>找不到：装配失败</li><li>使用@Qualifier注解：根据@Qualifier注解中<strong>指定的名称</strong>作为<strong>bean的id</strong>进行匹配</li><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userServiceImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：若IOC容器中没有任何一个类型匹配的Bean，此时会抛出异常：NoSuchBeanDrfinitionException</p><p>@Autowired中有属性required，默认值为true，因此在自动装配无法找到相应的bean时，会装配失败</p><p>可以将属性required的值设置为false，则表示能装就装，装不上就不装，装不上时自动装配的属性为默认值</p><p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p></blockquote><h1 id="3、AOP"><a href="#3、AOP" class="headerlink" title="3、AOP"></a>3、AOP</h1><h2 id="3-1、场景模拟"><a href="#3-1、场景模拟" class="headerlink" title="3.1、场景模拟"></a>3.1、场景模拟</h2><h3 id="3-1-1、声明接口"><a href="#3-1-1、声明接口" class="headerlink" title="3.1.1、声明接口"></a>3.1.1、声明接口</h3><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2、创建实现类"><a href="#3-1-2、创建实现类" class="headerlink" title="3.1.2、创建实现类"></a>3.1.2、创建实现类</h3><p><img src="/2022/11/12/Spring/15.png" alt="15"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-3、创建带日志功能的实现类"><a href="#3-1-3、创建带日志功能的实现类" class="headerlink" title="3.1.3、创建带日志功能的实现类"></a>3.1.3、创建带日志功能的实现类</h3><p><img src="/2022/11/12/Spring/16.png" alt="16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorLogImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-4、提出问题"><a href="#3-1-4、提出问题" class="headerlink" title="3.1.4、提出问题"></a>3.1.4、提出问题</h3><h4 id="①现有代码缺陷"><a href="#①现有代码缺陷" class="headerlink" title="①现有代码缺陷"></a>①现有代码缺陷</h4><p>针对带日志功能的实现类，我们发现有如下缺陷：</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能分散在各个业务功能方法中，不利于统一维护</li></ul><h4 id="②解决思路"><a href="#②解决思路" class="headerlink" title="②解决思路"></a>②解决思路</h4><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><h4 id="③困难"><a href="#③困难" class="headerlink" title="③困难"></a>③困难</h4><p>解决问题的困难：要抽取的代码分散在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。</p><p>所以需要引入新的技术。</p><h2 id="3-2、代理模式"><a href="#3-2、代理模式" class="headerlink" title="3.2、代理模式"></a>3.2、代理模式</h2><h3 id="3-2-1、概念"><a href="#3-2-1、概念" class="headerlink" title="3.2.1、概念"></a>3.2.1、概念</h3><h4 id="①介绍"><a href="#①介绍" class="headerlink" title="①介绍"></a>①介绍</h4><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p><img src="/2022/11/12/Spring/17.png" alt="17"></p><p>使用代理后：</p><p><img src="/2022/11/12/Spring/18.png" alt="18"></p><h4 id="②生活中的代理"><a href="#②生活中的代理" class="headerlink" title="②生活中的代理"></a>②生活中的代理</h4><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><h4 id="③相关术语"><a href="#③相关术语" class="headerlink" title="③相关术语"></a>③相关术语</h4><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h3 id="3-2-2、静态代理"><a href="#3-2-2、静态代理" class="headerlink" title="3.2.2、静态代理"></a>3.2.2、静态代理</h3><p>创建静态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-comment">// 将被代理的目标对象声明为成员变量</span><br>    <span class="hljs-keyword">private</span> Calculator target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(Calculator target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-comment">// 附加功能由代理类中的代理方法来实现</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br>        <span class="hljs-comment">// 通过目标对象来实现核心业务逻辑</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">addResult</span> <span class="hljs-operator">=</span> target.add(i, j);<br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);<br>        <span class="hljs-keyword">return</span> addResult;<br>    &#125;<br>    <span class="hljs-comment">//... ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来</p><p>说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代</p><p>码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理</p><p>类来实现。这就需要使用动态代理技术了。</p></blockquote><h3 id="3-2-3、动态代理"><a href="#3-2-3、动态代理" class="headerlink" title="3.2.3、动态代理"></a>3.2.3、动态代理</h3><p>动态代理：</p><ul><li><p>jdk动态代理，要求必须有接口，最终生成的代理类和目标类实现相同的接口</p><p>​                        在com.sun.proxy包下，类名为 $proxy数字</p></li><li><p>cglib动态代理，最终生成的代理类会继承目标类，并且和目标类在相同的包下</p></li></ul><p><img src="/2022/11/12/Spring/19.png" alt="19"></p><p>生产 代理对象 的 工厂类：（ JDK 动态代理 ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * newProxyInstance()：创建一个代理实例</span><br><span class="hljs-comment"> * 其中有三个参数：</span><br><span class="hljs-comment"> * 1、ClassLoader loader：指定加载动态生成的代理类的类加载器</span><br><span class="hljs-comment"> * 2、Class[] interfaces：目标对象实现的所有接口的class对象所组成的数组</span><br><span class="hljs-comment"> * 3、invocationHandler h：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * proxy：代理对象</span><br><span class="hljs-comment">             * method：代理对象需要实现的方法，即其中需要重写的方法</span><br><span class="hljs-comment">             * args：method所对应方法的参数</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br>                <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，参数：&quot;</span>+ Arrays.toString(args));<br>                    result = method.invoke(target, args);<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，结 果：&quot;</span>+ result);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，异常：&quot;</span>+e.getMessage());<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，方法执行完毕&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;   <br>        &#125;;    <br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);<br>    &#125;<br>&#125;                                     <br></code></pre></td></tr></table></figure><h3 id="3-2-4、测试"><a href="#3-2-4、测试" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDynamicProxy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorLogImpl</span>());<br>    <span class="hljs-type">Calculator</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Calculator) factory.getProxy();<br>    proxy.div(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//proxy.div(1,1);</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3、AOP概念及相关术语"><a href="#3-3、AOP概念及相关术语" class="headerlink" title="3.3、AOP概念及相关术语"></a>3.3、AOP概念及相关术语</h2><h3 id="3-3-1、概述"><a href="#3-3-1、概述" class="headerlink" title="3.3.1、概述"></a>3.3.1、概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的<strong>面向切面编程</strong>，它<strong>是面向对象编程的一种补充和完善</strong>，它以通过预编译方式和运行期动态代理方式实现<strong>在不修改源代码的情况下给程序动态统一添加额外功能</strong>的一种技术。</p><h3 id="3-3-2、相关术语"><a href="#3-3-2、相关术语" class="headerlink" title="3.3.2、相关术语"></a>3.3.2、相关术语</h3><h4 id="①横切关注点"><a href="#①横切关注点" class="headerlink" title="①横切关注点"></a>①横切关注点</h4><p><strong>从每个方法中抽取出来的同一类非核心业务</strong>。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。<img src="/2022/11/12/Spring/20.png" alt="20"></p><h4 id="②通知"><a href="#②通知" class="headerlink" title="②通知"></a>②通知</h4><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）（finally）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所</li></ul><p>有位置<img src="/2022/11/12/Spring/21.png" alt="21"></p><h4 id="③切面"><a href="#③切面" class="headerlink" title="③切面"></a>③切面</h4><p>封装通知方法的类。<img src="/2022/11/12/Spring/22.png" alt="22"></p><h4 id="④目标"><a href="#④目标" class="headerlink" title="④目标"></a>④目标</h4><p>被代理的目标对象。</p><h4 id="⑤代理"><a href="#⑤代理" class="headerlink" title="⑤代理"></a>⑤代理</h4><p>向目标对象应用通知之后创建的代理对象。</p><h4 id="⑥连接点"><a href="#⑥连接点" class="headerlink" title="⑥连接点"></a>⑥连接点</h4><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。</p><p><img src="/2022/11/12/Spring/23.png" alt="23"></p><h4 id="⑦切入点"><a href="#⑦切入点" class="headerlink" title="⑦切入点"></a>⑦切入点</h4><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。</p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p><h3 id="3-3-3、作用"><a href="#3-3-3、作用" class="headerlink" title="3.3.3、作用"></a>3.3.3、作用</h3><ul><li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li><li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li></ul><h2 id="3-4、基于注解的AOP"><a href="#3-4、基于注解的AOP" class="headerlink" title="3.4、基于注解的AOP"></a>3.4、基于注解的AOP</h2><p>AOP是一种思想，AspectJ 是AOP的一种实现方式。</p><h3 id="3-4-1、技术说明"><a href="#3-4-1、技术说明" class="headerlink" title="3.4.1、技术说明"></a>3.4.1、技术说明</h3><p><img src="/2022/11/12/Spring/24.png" alt="24"></p><ul><li><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</p></li><li><p>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</p></li><li><p>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p></li></ul><h3 id="3-4-2、准备工作"><a href="#3-4-2、准备工作" class="headerlink" title="3.4.2、准备工作"></a>3.4.2、准备工作</h3><h4 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a>①添加依赖</h4><p>在IOC所需依赖基础上再加入下面依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②准备被代理的目标资源"><a href="#②准备被代理的目标资源" class="headerlink" title="②准备被代理的目标资源"></a>②准备被代理的目标资源</h4><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-3、创建切面类并配置"><a href="#3-4-3、创建切面类并配置" class="headerlink" title="3.4.3、创建切面类并配置"></a>3.4.3、创建切面类并配置</h3><ul><li>基于注解的AOP的实现：<ul><li>1、将目标对象和切面交给IOC容器管理（注解+扫描）</li><li>2、将切面类通过注解@Aspect标识 </li><li>3、开启AspectJ的自动代理，为目标对象自动生成代理  &lt;!–开启基于注解的AOP–&gt;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @Aspect表示这个类是一个切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-comment">// @Component注解保证这个切面类能够放入IOC容器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，结果：&quot;</span>+result);<br>    &#125; <br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，异常：&quot;</span>+ex);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);<br>            <span class="hljs-comment">//目标对象（连接点）方法的执行</span><br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Spring的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        基于注解的AOP的实现：</span><br><span class="hljs-comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span><br><span class="hljs-comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span><br><span class="hljs-comment">        3、将切面类通过注解@Aspect标识</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--开启基于注解的AOP--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOPByAnnotation</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;aop-annotation.xml&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    注意：在使用AOP之后，目标对象不能直接通过目标类获取，而要通过代理类获取</span><br><span class="hljs-comment">     形式上/写法上 表现为通过接口获取</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> ioc.getBean(Calculator.class);<br>    calculator.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-4、各种通知"><a href="#3-4-4、各种通知" class="headerlink" title="3.4.4、各种通知"></a>3.4.4、各种通知</h3><ul><li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行（try子句）</li><li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）（try子句）</li><li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）（catch子句）</li><li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）（在finally子句中执行）</li><li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><blockquote><p>各种通知的执行顺序：</p><ul><li>Spring版本5.3.x以前：<ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></li><li>Spring版本5.3.x以后：<ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></li></ul></blockquote><h3 id="3-4-5、切入点表达式语法"><a href="#3-4-5、切入点表达式语法" class="headerlink" title="3.4.5、切入点表达式语法"></a>3.4.5、切入点表达式语法</h3><h4 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h4><p><img src="/2022/11/12/Spring/25.png" alt="25"></p><h4 id="②语法细节"><a href="#②语法细节" class="headerlink" title="②语法细节"></a>②语法细节</h4><ul><li>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</li><li>在包名的部分，一个“<em>”号只能代表包的层次结构中的一层，表示这一层是任意的。</em><ul><li><em>例如：</em>.Hello匹配com.Hello，不匹配com.atguigu.Hello</li></ul></li><li>在包名的部分，使用“*..”表示包名任意、包的层次深度任意*</li><li><em>在类名的部分，类名部分整体用</em>号代替，表示类名任意</li><li>在类名的部分，可以使用<em>号代替类名的一部分</em><ul><li><em>例如：</em>Service匹配所有名称以Service结尾的类或接口</li></ul></li><li>在方法名部分，可以使用<em>号表示方法名任意</em></li><li><em>在方法名部分，可以使用</em>号代替方法名的一部分<ul><li>例如：*Operation匹配所有方法名以Operation结尾的方法</li></ul></li><li>​在方法参数列表部分，使用(..)表示参数列表任意</li><li>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</li><li>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的<ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符<ul><li>例如：execution(public int <em>..<em>Service.</em>(.., int)) 正确</em></li><li><em>例如：execution(</em> int *..<em>Service.</em>(.., int)) 错误</li></ul></li></ul><p><img src="/2022/11/12/Spring/26.png" alt="26"></p><h3 id="3-4-6、重用切入点表达式"><a href="#3-4-6、重用切入点表达式" class="headerlink" title="3.4.6、重用切入点表达式"></a>3.4.6、重用切入点表达式</h3><h4 id="①声明"><a href="#①声明" class="headerlink" title="①声明"></a>①声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="②在同一个切面中使用"><a href="#②在同一个切面中使用" class="headerlink" title="②在同一个切面中使用"></a>②在同一个切面中使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③在不同切面中使用"><a href="#③在不同切面中使用" class="headerlink" title="③在不同切面中使用"></a>③在不同切面中使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span>  <span class="hljs-comment">//全类名+方法名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-7、获取通知的相关信息"><a href="#3-4-7、获取通知的相关信息" class="headerlink" title="3.4.7、获取通知的相关信息"></a>3.4.7、获取通知的相关信息</h3><h4 id="①获取连接点信息"><a href="#①获取连接点信息" class="headerlink" title="①获取连接点信息"></a>①获取连接点信息</h4><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参，就可以获取连接点所对应方法的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-comment">//获取连接点的签名信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature();<br>    <span class="hljs-comment">//获取目标方法到的实参信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName.getName()+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②获取目标方法的返回值"><a href="#②获取目标方法的返回值" class="headerlink" title="②获取目标方法的返回值"></a>②获取目标方法的返回值</h4><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，结果：&quot;</span>+result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③获取目标方法的异常"><a href="#③获取目标方法的异常" class="headerlink" title="③获取目标方法的异常"></a>③获取目标方法的异常</h4><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，异常：&quot;</span>+ex);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-8、环绕通知"><a href="#3-4-8、环绕通知" class="headerlink" title="3.4.8、环绕通知"></a>3.4.8、环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);<br>        <span class="hljs-comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span><br>        result = joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>        throwable.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-9、切面的优先级"><a href="#3-4-9、切面的优先级" class="headerlink" title="3.4.9、切面的优先级"></a>3.4.9、切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p><img src="/2022/11/12/Spring/27.png" alt="27"></p><h2 id="3-5，基于XML的AOP（了解）"><a href="#3-5，基于XML的AOP（了解）" class="headerlink" title="3.5，基于XML的AOP（了解）"></a>3.5，基于XML的AOP（了解）</h2><h3 id="3-5-1、准备工作"><a href="#3-5-1、准备工作" class="headerlink" title="3.5.1、准备工作"></a>3.5.1、准备工作</h3><p>参考基于注解的AOP环境</p><h3 id="3-5-2、实现"><a href="#3-5-2、实现" class="headerlink" title="3.5.2、实现"></a>3.5.2、实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面类，将IOC容器中的某个bean设置为切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loggerAspect&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置一个公共的切入点表达式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningMethod&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-returning</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingMethod&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;ex&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-throwing</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:around</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;validateAspect&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;validateBeforeMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4、声明式事务"><a href="#4、声明式事务" class="headerlink" title="4、声明式事务"></a>4、声明式事务</h1><h2 id="4-1、JdbcTemplate"><a href="#4-1、JdbcTemplate" class="headerlink" title="4.1、JdbcTemplate"></a>4.1、JdbcTemplate</h2><h3 id="4-1-1、简介"><a href="#4-1-1、简介" class="headerlink" title="4.1.1、简介"></a>4.1.1、简介</h3><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><h3 id="4-1-2、准备工作"><a href="#4-1-2、准备工作" class="headerlink" title="4.1.2、准备工作"></a>4.1.2、准备工作</h3><h4 id="①加入依赖-1"><a href="#①加入依赖-1" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②创建jdbc-properties"><a href="#②创建jdbc-properties" class="headerlink" title="②创建jdbc.properties"></a>②创建jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h4 id="③配置Spring的配置文件"><a href="#③配置Spring的配置文件" class="headerlink" title="③配置Spring的配置文件"></a>③配置Spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置 JdbcTemplate --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 装配数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-1-3、测试"><a href="#4-1-3、测试" class="headerlink" title="4.1.3、测试"></a>4.1.3、测试</h3><h4 id="①在测试类装配-JdbcTemplate"><a href="#①在测试类装配-JdbcTemplate" class="headerlink" title="①在测试类装配 JdbcTemplate"></a>①在测试类装配 JdbcTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RunWith：指定当前测试类在Spring的测试环境中执行，此时就可以通过注入的方式直接获取IOC容器中的bean</span><br><span class="hljs-comment">//@ContextConfiguration：设置当前Spring测试环境的配置文件</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTemplateTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②测试增删改功能"><a href="#②测试增删改功能" class="headerlink" title="②测试增删改功能"></a>②测试增删改功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//测试增删改功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③查询一条数据为实体类对象"><a href="#③查询一条数据为实体类对象" class="headerlink" title="③查询一条数据为实体类对象"></a>③查询一条数据为实体类对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//查询一条数据为一个实体类对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_emp where id = ?&quot;</span>;<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="④查询多条数据为一个list集合"><a href="#④查询多条数据为一个list集合" class="headerlink" title="④查询多条数据为一个list集合"></a>④查询多条数据为一个list集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//查询多条数据为一个list集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_emp&quot;</span>;<br>    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>    list.forEach(emp -&gt; System.out.println(emp));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⑤查询单行单列的值"><a href="#⑤查询单行单列的值" class="headerlink" title="⑤查询单行单列的值"></a>⑤查询单行单列的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//查询单行单列的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectCount</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(id) from t_emp&quot;</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2、声明式事务概念"><a href="#4-2、声明式事务概念" class="headerlink" title="4.2、声明式事务概念"></a>4.2、声明式事务概念</h2><h3 id="4-2-1、编程式事务"><a href="#4-2-1、编程式事务" class="headerlink" title="4.2.1、编程式事务"></a>4.2.1、编程式事务</h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ...;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 开启事务：关闭事务的自动提交</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 核心操作</span><br>    <span class="hljs-comment">// 提交事务</span><br>    conn.commit();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">// 回滚事务</span><br>    conn.rollBack();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">// 释放数据库连接</span><br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h3 id="4-2-2、声明式事务"><a href="#4-2-2、声明式事务" class="headerlink" title="4.2.2、声明式事务"></a>4.2.2、声明式事务</h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h2 id="4-3、基于注解的声明式事务"><a href="#4-3、基于注解的声明式事务" class="headerlink" title="4.3、基于注解的声明式事务"></a>4.3、基于注解的声明式事务</h2><h3 id="4-3-1、准备工作"><a href="#4-3-1、准备工作" class="headerlink" title="4.3.1、准备工作"></a>4.3.1、准备工作</h3><h4 id="①加入依赖-2"><a href="#①加入依赖-2" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②创建jdbc-properties-1"><a href="#②创建jdbc-properties-1" class="headerlink" title="②创建jdbc.properties"></a>②创建jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h4 id="③配置Spring的配置文件-1"><a href="#③配置Spring的配置文件-1" class="headerlink" title="③配置Spring的配置文件"></a>③配置Spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring.tx.annotation&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 导入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置 JdbcTemplate --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 装配数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="④创建表"><a href="#④创建表" class="headerlink" title="④创建表"></a>④创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `t_book` (<br>    `book_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,<br>    `book_name` varchar(20) DEFAULT NULL COMMENT &#x27;图书名称&#x27;,<br>    `price` int(11) DEFAULT NULL COMMENT &#x27;价格&#x27;,<br>    `stock` int(10) unsigned DEFAULT NULL COMMENT &#x27;库存（无符号）&#x27;,<br>    PRIMARY KEY (`book_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;<br>insert into `t_book`(`book_id`,`book_name`,`price`,`stock`) values (1,&#x27;斗破苍穹&#x27;,80,100),(2,&#x27;斗罗大陆&#x27;,50,100);<br>CREATE TABLE `t_user` (<br>    `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,<br>    `username` varchar(20) DEFAULT NULL COMMENT &#x27;用户名&#x27;,<br>    `balance` int(10) unsigned DEFAULT NULL COMMENT &#x27;余额（无符号）&#x27;,<br>    PRIMARY KEY (`user_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;<br>insert into `t_user`(`user_id`,`username`,`balance`) values (1,&#x27;admin&#x27;,50);<br></code></pre></td></tr></table></figure><h4 id="⑤创建组件"><a href="#⑤创建组件" class="headerlink" title="⑤创建组件"></a>⑤创建组件</h4><p>创建BookController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>&#123;<br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口BookService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类BookServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">//查询图书的价格</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>        <span class="hljs-comment">//更新图书的库存</span><br>        bookDao.updateStock(bookId);<br>        <span class="hljs-comment">//更新用户的余额</span><br>        bookDao.updateBalance(userId, price);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口BookDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类BookDaoImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select price from t_book where book_id = ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_user set balance = balance - ? where user_id =?&quot;</span>;<br>            jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-2、测试无事务情况"><a href="#4-3-2、测试无事务情况" class="headerlink" title="4.3.2、测试无事务情况"></a>4.3.2、测试无事务情况</h3><h4 id="①创建测试类"><a href="#①创建测试类" class="headerlink" title="①创建测试类"></a>①创建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:tx-annotation.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxByAnnotationTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookController bookController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span>&#123;<br>        bookController.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②模拟场景"><a href="#②模拟场景" class="headerlink" title="②模拟场景"></a>②模拟场景</h4><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><h4 id="③观察结果"><a href="#③观察结果" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><h3 id="4-3-3、加入事务"><a href="#4-3-3、加入事务" class="headerlink" title="4.3.3、加入事务"></a>4.3.3、加入事务</h3><h4 id="①添加事务配置"><a href="#①添加事务配置" class="headerlink" title="①添加事务配置"></a>①添加事务配置</h4><p>在Spring的配置文件中添加配置：（事务管理器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    开启事务的注解驱动</span><br><span class="hljs-comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就</span><br><span class="hljs-comment">是这个默认值，则可以省略这个属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注意：导入的名称空间需要 <strong>tx</strong> <strong>结尾</strong>的那个。</p><p><img src="/2022/11/12/Spring/28.png" alt="28"></p><h4 id="②添加事务注解"><a href="#②添加事务注解" class="headerlink" title="②添加事务注解"></a>②添加事务注解</h4><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p>在BookServiceImpl的buybook()添加注解 <strong>@Transactional</strong></p><h4 id="③观察结果-1"><a href="#③观察结果-1" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><h3 id="4-3-4、-Transactional注解标识的位置"><a href="#4-3-4、-Transactional注解标识的位置" class="headerlink" title="4.3.4、@Transactional注解标识的位置"></a>4.3.4、@Transactional注解标识的位置</h3><p>@Transactional标识在方法上，只会影响该方法</p><p>@Transactional标识的类上，会影响类中所有的方法</p><h3 id="4-3-5、事务属性：只读"><a href="#4-3-5、事务属性：只读" class="headerlink" title="4.3.5、事务属性：只读"></a>4.3.5、事务属性：只读</h3><h4 id="①介绍-1"><a href="#①介绍-1" class="headerlink" title="①介绍"></a>①介绍</h4><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><h4 id="②使用方式"><a href="#②使用方式" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③注意"><a href="#③注意" class="headerlink" title="③注意"></a>③注意</h4><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p><h3 id="4-3-6、事务属性：超时"><a href="#4-3-6、事务属性：超时" class="headerlink" title="4.3.6、事务属性：超时"></a>4.3.6、事务属性：超时</h3><h4 id="①介绍-2"><a href="#①介绍-2" class="headerlink" title="①介绍"></a>①介绍</h4><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><h4 id="②使用方式-1"><a href="#②使用方式-1" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(timeout = 3)</span>  <span class="hljs-comment">//-1表示一直等待，3代表3秒</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③观察结果-2"><a href="#③观察结果-2" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out:</p><p>deadline was Fri Jun 04 16:25:39 CST 2022</p><h3 id="4-3-7、事务属性：回滚策略"><a href="#4-3-7、事务属性：回滚策略" class="headerlink" title="4.3.7、事务属性：回滚策略"></a>4.3.7、事务属性：回滚策略</h3><h4 id="①介绍-3"><a href="#①介绍-3" class="headerlink" title="①介绍"></a>①介绍</h4><p><strong>声明式事务默认只针对运行时异常回滚，编译时异常不回滚</strong>。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><ul><li>rollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li><li>noRollbackFor属性：需要设置一个Class类型的对象</li><li>noRollbackForClassName属性：需要设置一个字符串类型的全类名</li></ul><h4 id="②使用方式-2"><a href="#②使用方式-2" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(noRollbackFor = ArithmeticException.class)</span><br><span class="hljs-comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    System.out.println(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③观察结果-3"><a href="#③观察结果-3" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当</p><p>出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><h3 id="4-3-8、事务属性：事务隔离级别"><a href="#4-3-8、事务属性：事务隔离级别" class="headerlink" title="4.3.8、事务属性：事务隔离级别"></a>4.3.8、事务属性：事务隔离级别</h3><h4 id="①介绍-4"><a href="#①介绍-4" class="headerlink" title="①介绍"></a>①介绍</h4><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事</p><p>务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同</p><p>的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li><p>读未提交：READ UNCOMMITTED </p><p>允许Transaction01读取Transaction02未提交的修改。可能会出现脏读的问题</p></li><li><p>读已提交：READ COMMITTED、</p><p>要求Transaction01只能读取Transaction02已提交的修改。可能会出现不可重复读的问题</p></li><li><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。可能会出现幻读的问题</p></li><li><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li></ul><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>Oracle</strong></th><th><strong>MySQL</strong></th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><h4 id="②使用方式-3"><a href="#②使用方式-3" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="hljs-comment">//使用数据库默认的隔离级别</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="hljs-comment">//读未提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="hljs-comment">//读已提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="hljs-comment">//可重复读</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="hljs-comment">//串行化</span><br></code></pre></td></tr></table></figure><h3 id="4-3-9、事务属性：事务传播行为"><a href="#4-3-9、事务属性：事务传播行为" class="headerlink" title="4.3.9、事务属性：事务传播行为"></a>4.3.9、事务属性：事务传播行为</h3><h4 id="①介绍-5"><a href="#①介绍-5" class="headerlink" title="①介绍"></a>①介绍</h4><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p><h4 id="②测试"><a href="#②测试" class="headerlink" title="②测试"></a>②测试</h4><p>创建接口CheckoutService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CheckoutService</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类CheckoutServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckoutServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CheckoutService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-comment">//一次购买多本图书</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Integer bookId : bookIds) &#123;<br>            bookService.buyBook(bookId, userId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在BookController中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CheckoutService checkoutService;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span>&#123;<br>    checkoutService.checkout(bookIds, userId);<br>&#125;<br></code></pre></td></tr></table></figure><p>在数据库中将用户的余额修改为100元</p><h4 id="③观察结果-4"><a href="#③观察结果-4" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>可以通过@Transactional中的propagation属性设置事务传播行为</p><p>修改BookServiceImpl中buyBook()上（在被调用的方法上修改），注解@Transactional的propagation属性</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不了，就都买不了</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本</p><h2 id="4-4、基于XML的声明式事务"><a href="#4-4、基于XML的声明式事务" class="headerlink" title="4.4、基于XML的声明式事务"></a>4.4、基于XML的声明式事务</h2><h3 id="4-3-1、场景模拟"><a href="#4-3-1、场景模拟" class="headerlink" title="4.3.1、场景模拟"></a>4.3.1、场景模拟</h3><p>参考基于注解的声明式事务</p><h3 id="4-3-2、修改Spring配置文件"><a href="#4-3-2、修改Spring配置文件" class="headerlink" title="4.3.2、修改Spring配置文件"></a>4.3.2、修改Spring配置文件</h3><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span><br><span class="hljs-comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符，单写一个 * 代表所有方法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2022/10/28/MyBatis/"/>
    <url>/2022/10/28/MyBatis/</url>
    
    <content type="html"><![CDATA[<h1 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h1><h2 id="1、MyBatis简介"><a href="#1、MyBatis简介" class="headerlink" title="1、MyBatis简介"></a>1、MyBatis简介</h2><p><strong>MyBatis：持久层框架，封装 JDBC ，功能是连接数据库、操作数据库中的数据。</strong></p><h3 id="1-1、MyBatis历史"><a href="#1-1、MyBatis历史" class="headerlink" title="1.1、MyBatis历史"></a>1.1、MyBatis历史</h3><p>MyBatis最初是Apache的一个开源项目<strong>iBatis</strong>, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。</p><p>代码于2013年11月迁移到Github。</p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。</p><p>iBatis提供的持久层框架包括 SQL Maps（JavaBean） 和 Data Access Objects（DAO）。</p><h3 id="1-2、MyBatis特性"><a href="#1-2、MyBatis特性" class="headerlink" title="1.2、MyBatis特性"></a>1.2、MyBatis特性</h3><ul><li>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ul><h3 id="1-3、MyBatis下载"><a href="#1-3、MyBatis下载" class="headerlink" title="1.3、MyBatis下载"></a>1.3、MyBatis下载</h3><p>MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><p><img src="/2022/10/28/MyBatis/1.png" alt="1"></p><p><img src="/2022/10/28/MyBatis/2.png" alt="2"></p><h3 id="1-4、和其它持久化层技术对比"><a href="#1-4、和其它持久化层技术对比" class="headerlink" title="1.4、和其它持久化层技术对比"></a>1.4、和其它持久化层技术对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="2、搭建MyBatis"><a href="#2、搭建MyBatis" class="headerlink" title="2、搭建MyBatis"></a>2、搭建MyBatis</h1><h2 id="2-1、开发环境"><a href="#2-1、开发环境" class="headerlink" title="2.1、开发环境"></a>2.1、开发环境</h2><p>IDE：idea 2019.2</p><p>构建工具：maven 3.5.4</p><p>MySQL版本：MySQL 8</p><p>MyBatis版本：MyBatis 3.5.7</p><blockquote><p>MySQL不同版本的注意事项</p><p>1、驱动类driver-class-name</p><p>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</p><p>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址url</p><p>MySQL 5版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</p><p>MySQL 8版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>说明：jdbc:mysql:&#x2F;&#x2F;ip:端口&#x2F;数据库名?serverTimezone&#x3D;UTC</p><p>否则运行测试用例报告如下错误：</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or</p><p>represents more</p></blockquote><h2 id="2-2-1、创建maven工程"><a href="#2-2-1、创建maven工程" class="headerlink" title="2.2.1、创建maven工程"></a>2.2.1、创建maven工程</h2><p><strong>①打包方式：jar</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  打包方式  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>②引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  引入依赖  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-2、创建数据库表"><a href="#2-2-2、创建数据库表" class="headerlink" title="2.2.2、创建数据库表"></a>2.2.2、创建数据库表</h2><p><img src="/2022/10/28/MyBatis/image-20221114170436586.png" alt="image-20221114170436586"></p><h2 id="2-2-3、创建pojo"><a href="#2-2-3、创建pojo" class="headerlink" title="2.2.3、创建pojo"></a>2.2.3、创建pojo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">//构造器、set&amp;get、toString...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3、创建MyBatis的核心配置文件"><a href="#2-3、创建MyBatis的核心配置文件" class="headerlink" title="2.3、创建MyBatis的核心配置文件"></a>2.3、创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。</p><p>将来整合 Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><p>核心配置文件主要用于 <strong>配置连接数据库的环境</strong> 以及 <strong>MyBatis 的全局配置信息</strong></p><p>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p><p>新建一个 xml文件 作为 MyBatis的核心配置文件</p><p> <img src="/2022/10/28/MyBatis/image-20221114171700729.png" alt="image-20221114171700729"></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4、创建mapper接口"><a href="#2-4、创建mapper接口" class="headerlink" title="2.4、创建mapper接口"></a>2.4、创建mapper接口</h2><ul><li>MyBatis中的 mapper接口 相当于以前的 dao。</li><li>但是区别在于：<strong>mapper仅仅是接口，我们不需要提供实现类</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 添加用户信息</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5、创建MyBatis的映射文件"><a href="#2-5、创建MyBatis的映射文件" class="headerlink" title="2.5、创建MyBatis的映射文件"></a>2.5、创建MyBatis的映射文件</h2><p>相关概念：<strong>ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul><table><thead><tr><th><strong>Java概念</strong></th><th><strong>数据库概念</strong></th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><ul><li><p>1、映射文件的命名规则：</p><ul><li><p>表所对应的 实体类的类名+Mapper.xml</p><ul><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li></ul></li><li><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p></li><li><p>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p></li></ul></li><li><p>2、 MyBatis中可以面向接口操作数据，要保证<strong>两个一致</strong>：</p><ul><li><p>1）mapper接口的全类名和映射文件的命名空间（namespace）保持一致</p></li><li><p>2）mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        mapper接口和映射文件要保持两个一致：</span><br><span class="hljs-comment">            1、mapper接口的全类名和映射文件的namespace一致</span><br><span class="hljs-comment">            2、mapper接口中的方法的方法名要和映射文件中的sql的id保持一致</span><br><span class="hljs-comment">      --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6、通过junit测试功能"><a href="#2-6、通过junit测试功能" class="headerlink" title="2.6、通过junit测试功能"></a>2.6、通过junit测试功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//读取MyBatis的核心配置文件 (org.apache.ibatis.io)</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><span class="hljs-comment">//创建SqlSessionFactoryBuilder对象</span><br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br><span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span><br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><span class="hljs-comment">//SqlSession对象对象是MyBatis提供的操作数据库的对象</span><br><span class="hljs-comment">//创建SqlSession对象（无参），此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span><br><span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="hljs-comment">//创建SqlSession对象（参数为true），此时通过SqlSession对象所操作的sql都会自动提交</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//通过代理模式创建UserMapper接口的代理实现类对象</span><br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><span class="hljs-comment">//int res = sqlSession.insert(&quot;com.study.mybatis.mapper.UserMapper.insertUser&quot;);</span><br><span class="hljs-comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br><span class="hljs-comment">//sqlSession.commit();</span><br>sqlSession.close();<br>System.out.println(<span class="hljs-string">&quot;结果：&quot;</span>+result);<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>SqlSession：代表Java程序和<strong>数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的会话）</p></li><li><p>SqlSessionFactory：是“生产”SqlSession的“工厂”。</p></li><li><p>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的</p></li></ul><p>相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></blockquote><h2 id="2-7、加入log4j日志功能"><a href="#2-7、加入log4j日志功能" class="headerlink" title="2.7、加入log4j日志功能"></a>2.7、加入log4j日志功能</h2><h3 id="①加入依赖"><a href="#①加入依赖" class="headerlink" title="①加入依赖"></a>①加入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②加入log4j的配置文件"><a href="#②加入log4j的配置文件" class="headerlink" title="②加入log4j的配置文件"></a>②加入log4j的配置文件</h3><blockquote><p>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>日志的级别</strong></p><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p></blockquote><h1 id="3、核心配置文件详解"><a href="#3、核心配置文件详解" class="headerlink" title="3、核心配置文件详解"></a>3、核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序：</p><p>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,refl</p><p>ectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p></blockquote><ul><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">     <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">     <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         MyBatis核心配置文件中的标签必须要按照指定的顺序配置：</span><br><span class="hljs-comment">         properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">         objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">         plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-comment">&lt;!--引入properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--设置类型别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         typeAlias：设置某个类型的别名</span><br><span class="hljs-comment">         属性：</span><br><span class="hljs-comment">         type：设置需要设置别名的类型</span><br><span class="hljs-comment">         alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      environments：配置多个连接数据库的环境</span><br><span class="hljs-comment">      属性：</span><br><span class="hljs-comment">       default：设置默认使用的环境的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">          environment：配置某个具体的环境</span><br><span class="hljs-comment">          属性：</span><br><span class="hljs-comment">           id：表示连接数据库的环境的唯一标识，不能重复</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">               transactionManager：设置事务管理方式</span><br><span class="hljs-comment">               属性：</span><br><span class="hljs-comment">                type=&quot;JDBC|MANAGED&quot;  (设置事务管理的方式)</span><br><span class="hljs-comment">                JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span><br><span class="hljs-comment">                MANAGED：被管理，例如Spring</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                dataSource：配置数据源</span><br><span class="hljs-comment">                属性：</span><br><span class="hljs-comment">                      type：设置数据源的类型</span><br><span class="hljs-comment">                      type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">                         POOLED：表示使用数据库连接池缓存数据库连接</span><br><span class="hljs-comment">                         UNPOOLED：表示不使用数据库连接池</span><br><span class="hljs-comment">                         JNDI：表示使用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm_study?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lyh123&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">          以包为单位引入映射文件</span><br><span class="hljs-comment">             要求：</span><br><span class="hljs-comment">             1、mapper接口所在的包要和映射文件所在的包（目录）一致</span><br><span class="hljs-comment">             2、mapper接口要和映射文件的名字一致</span><br><span class="hljs-comment"> --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm_study?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">lyh123</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="4、MyBatis的增删改查"><a href="#4、MyBatis的增删改查" class="headerlink" title="4、MyBatis的增删改查"></a>4、MyBatis的增删改查</h1><h2 id="4-0、SqlSessionUtil工具类"><a href="#4-0、SqlSessionUtil工具类" class="headerlink" title="4.0、SqlSessionUtil工具类"></a>4.0、SqlSessionUtil工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取核心配置文件的输入流</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-comment">//获取SqlSessionFactoryBuilder</span><br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>            <span class="hljs-comment">//获取SqlSessionFactory</span><br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>            <span class="hljs-comment">//获取sqlSession对象</span><br>            sqlSession = sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-1、新增"><a href="#4-1、新增" class="headerlink" title="4.1、新增"></a>4.1、新增</h2><ul><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser()--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br><span class="hljs-comment">//int res = sqlSession.insert(&quot;com.study.mybatis.mapper.UserMapper.insertUser&quot;);</span><br><span class="hljs-comment">//sqlSession.commit();</span><br>    sqlSession.close();<br>    System.out.println(<span class="hljs-string">&quot;结构：&quot;</span>+res);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-2、删除"><a href="#4-2、删除" class="headerlink" title="4.2、删除"></a>4.2、删除</h2><ul><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteUser()--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>delete from t_user where id = 7<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    userMapper.deleteUser();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3、修改"><a href="#4-3、修改" class="headerlink" title="4.3、修改"></a>4.3、修改</h2><ul><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int updateUser()--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    userMapper.updateUser();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-4、查询一个实体类对象"><a href="#4-4、查询一个实体类对象" class="headerlink" title="4.4、查询一个实体类对象"></a>4.4、查询一个实体类对象</h2><ul><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserById();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><br>select * from t_user where id = 2<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getUserById();<br>    System.out.println(user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-5、查询list集合"><a href="#4-5、查询list集合" class="headerlink" title="4.5、查询list集合"></a>4.5、查询list集合</h2><ul><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; userList = userMapper.getUserList();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意：</p><p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系</p><p>resultType：自动映射，用于属性名和表中字段名一致的情况</p><p>resultMap：自定义映射，用于 一对多或多对一 或 字段名和属性名不一致 的情况</p></blockquote><h1 id="5、MyBatis获取参数值的两种方式"><a href="#5、MyBatis获取参数值的两种方式" class="headerlink" title="5、MyBatis获取参数值的两种方式"></a>5、MyBatis获取参数值的两种方式</h1><ul><li><p>MyBatis获取参数值的两种方式：**${} **和 <strong>#{}</strong></p><ul><li><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值（占位符赋值还可以避免sql注入的问题）</p></li><li><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；</p></li><li><p>#{}使用占位符赋值的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p></li></ul></li></ul><h2 id="5-1、单个字面量类型的参数"><a href="#5-1、单个字面量类型的参数" class="headerlink" title="5.1、单个字面量类型的参数"></a>5.1、单个字面量类型的参数</h2><ul><li><p>若mapper接口中的方法参数为单个的字面量类型（字符串、基本数据类型、包装类）</p><p>此时可以使用 <strong>${}</strong> 和 <strong>#{}</strong> 以<strong>任意的名称</strong>获取参数的值，注意 <strong>${} 需要手动加单引号</strong></p></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserByUsername(String username);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125;<br>    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserByUsername</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserByUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-2、多个字面量类型的参数"><a href="#5-2、多个字面量类型的参数" class="headerlink" title="5.2、多个字面量类型的参数"></a>5.2、多个字面量类型的参数</h2><ul><li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中，</p><ul><li><p>以arg0,arg1…为键，以参数为值；</p></li><li><p>以param1,param2…为键，以参数为值；</p></li><li><p>因此只需要通过 <strong>${}</strong> 和 <strong>#{}</strong> 访问 map集合的键 就可以获取相对应的值，注意 ${} 需要手动加单引号</p></li></ul></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLogin(String username, String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;param1&#125; and password = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLogin</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.checkLogin(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-3、map集合类型的参数"><a href="#5-3、map集合类型的参数" class="headerlink" title="5.3、map集合类型的参数"></a>5.3、map集合类型的参数</h2><ul><li><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中，</p><p>只需要通过 ${} 和 #{} 访问map集合的键就可以获取相对应的值，注意 ${} 需要手动加单引号</p></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByMap(Map&lt;String, Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLoginByMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.checkLoginByMap(map);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-4、实体类类型的参数（重点）"><a href="#5-4、实体类类型的参数（重点）" class="headerlink" title="5.4、实体类类型的参数（重点）"></a>5.4、实体类类型的参数（重点）</h2><ul><li><p>若mapper接口中的方法参数为实体类对象时，</p><p>此时可以使用 ${} 和 #{} ，通过访问实体类对象中的<strong>属性名</strong>获取属性值，注意 ${} 需要手动加单引号</p><p><strong>说明：其实是通过 get &amp; set 方法进行操作的，只跟 get &amp; set 方法有关</strong></p></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">33</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>    mapper.insertUser(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-5、使用-Param标识参数-重点"><a href="#5-5、使用-Param标识参数-重点" class="headerlink" title="5.5、使用@Param标识参数(重点)"></a>5.5、使用@Param标识参数(重点)</h2><ul><li><p>可以通过@Param注解标识mapper接口中的方法参数（一个&#x2F;多个参数均可使用该方法）</p></li><li><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；</p></li><li><p>以 param1, param2… 为键，以参数为值；</p></li><li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLoginByParam</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.checkLoginByParam(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="6、MyBatis的各种查询功能"><a href="#6、MyBatis的各种查询功能" class="headerlink" title="6、MyBatis的各种查询功能"></a>6、MyBatis的各种查询功能</h1><h2 id="6-1、查询一个实体类对象"><a href="#6-1、查询一个实体类对象" class="headerlink" title="6.1、查询一个实体类对象"></a>6.1、查询一个实体类对象</h2><blockquote><p>注意：当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常TooManyResultsException；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据用户id查询用户信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from t_user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2、查询一个list集合"><a href="#6-2、查询一个list集合" class="headerlink" title="6.2、查询一个list集合"></a>6.2、查询一个list集合</h2><blockquote><p>注意：若查询的数据只有一条，可以使用实体类或集合作为返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有用户信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    List&lt;User&gt; userList = mapper.getUserList();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3、查询单个数据"><a href="#6-3、查询单个数据" class="headerlink" title="6.3、查询单个数据"></a>6.3、查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询用户的总记录数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span><br><span class="hljs-comment">* 例如： java.lang.Integer--&gt;int|integer（不区分大小写）</span><br><span class="hljs-comment">* 例如： int--&gt;_int|_integer</span><br><span class="hljs-comment">* 例如： Map--&gt;map, List--&gt;list</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int getCount();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;_integer&quot;</span>&gt;</span><br>select count(id) from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetCount</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> mapper.getCount();<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-4、查询一条数据为map集合"><a href="#6-4、查询一条数据为map集合" class="headerlink" title="6.4、查询一条数据为map集合"></a>6.4、查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据用户id查询用户信息为map集合</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getUserToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span><br><span class="hljs-comment">&lt;!--结果： &#123;password=123456, sex=男 , id=1, age=23, username=admin&#125;--&gt;</span><br><span class="hljs-comment">&lt;!--如果某个字段为null，则不会被放入到结果集map中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserToMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    Map&lt;String, Object&gt; userToMap = mapper.getUserToMap(<span class="hljs-number">1</span>);<br>    System.out.println(userToMap);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-5、查询多条数据为map集合"><a href="#6-5、查询多条数据为map集合" class="headerlink" title="6.5、查询多条数据为map集合"></a>6.5、查询多条数据为map集合</h2><h3 id="①方式一"><a href="#①方式一" class="headerlink" title="①方式一 *"></a>①方式一 *</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有用户信息为map集合</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；</span><br><span class="hljs-comment">* 若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取</span><br><span class="hljs-comment">*/</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②方式二"><a href="#②方式二" class="headerlink" title="②方式二"></a>②方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有用户信息为map集合</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；</span><br><span class="hljs-comment">* 若有多条数据，就会产生多个map集合，并且最终要以一个大的map集合的方式返回数据，</span><br><span class="hljs-comment">* 此时需要通过 <span class="hljs-doctag">@MapKey</span>注解 设置map集合的键，值是每条数据所对应的map集合</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span><br><span class="hljs-comment">    2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span><br><span class="hljs-comment">    3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllUserToMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    <span class="hljs-comment">//List&lt;Map&lt;String, Object&gt;&gt; allUserToMap = mapper.getAllUserToMap();</span><br>    Map&lt;String, Object&gt; allUserToMap = mapper.getAllUserToMap();<br>    System.out.println(allUserToMap);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7、特殊SQL的执行"><a href="#7、特殊SQL的执行" class="headerlink" title="7、特殊SQL的执行"></a>7、特殊SQL的执行</h1><h2 id="7-1、模糊查询"><a href="#7-1、模糊查询" class="headerlink" title="7.1、模糊查询"></a>7.1、模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 测试模糊查询</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> mohu</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;User&gt; <span class="hljs-title function_">testMohu</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testMohu&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--模糊查询的三种方式（推荐第三种方式）--&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span><br>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserByLike</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    List&lt;User&gt; userByLike = mapper.getUserByLike(<span class="hljs-string">&quot;a&quot;</span>);<br>    System.out.println(userByLike);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-2、批量删除"><a href="#7-2、批量删除" class="headerlink" title="7.2、批量删除"></a>7.2、批量删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 批量删除</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMore&quot;</span>&gt;</span><br>delete from t_user where id in ($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteMore</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    mapper.deleteMore(<span class="hljs-string">&quot;7,8&quot;</span>);  <span class="hljs-comment">//删除id为7和8的记录</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-3、动态设置表名"><a href="#7-3、动态设置表名" class="headerlink" title="7.3、动态设置表名"></a>7.3、动态设置表名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 动态设置表名，查询所有的用户信息 (比如：普通用户表/VIP用户表)</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> tableName</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    List&lt;User&gt; t_user = mapper.getAllUser(<span class="hljs-string">&quot;t_user&quot;</span>);<br>    t_user.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-4、添加功能获取自增的主键"><a href="#7-4、添加功能获取自增的主键" class="headerlink" title="7.4、添加功能获取自增的主键"></a>7.4、添加功能获取自增的主键</h2><blockquote><p>场景模拟：</p><p>t_clazz(clazz_id,clazz_name)</p><p>t_student(student_id,student_name,clazz_id)</p><p>1、添加班级信息</p><p>2、获取新添加的班级的id</p><p>3、为班级分配学生，即将某学生的班级id修改为新添加的班级的id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 添加用户信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">* useGeneratedKeys：设置使用自增的主键，表示当前添加功能使用自增的主键</span><br><span class="hljs-comment">* keyProperty：用添加的数据的自增主键为实体类类型的参数的属性赋值</span><br><span class="hljs-comment">*   因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;xiaoming&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;123341@qq,com&quot;</span>);<br>    mapper.insertUser(user);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8、自定义映射resultMap"><a href="#8、自定义映射resultMap" class="headerlink" title="8、自定义映射resultMap"></a>8、自定义映射resultMap</h1><h2 id="8-0、使用全局配置解决命名方式不一致的问题"><a href="#8-0、使用全局配置解决命名方式不一致的问题" class="headerlink" title="8.0、使用全局配置解决命名方式不一致的问题"></a>8.0、使用全局配置解决命名方式不一致的问题</h2><ul><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>EmpMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--select emp_id empId,emp_name empName,age,gender from t_emp </span><br><span class="hljs-comment">where emp_id = #&#123;empId&#125;--&gt;</span> <span class="hljs-comment">&lt;!-- 别名方式也可以 --&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><pre><code class="java">@Testpublic void testGetEmpById()&#123;    SqlSession sqlSession = SqlSessionUtil.getSqlSession();    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);    Emp emp = mapper.getEmpById(1);    System.out.println(emp);&#125;<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">## 8.1、resultMap处理字段和属性的映射关系</span><br><span class="language-xml"></span><br><span class="language-xml">若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</span><br><span class="language-xml"></span><br><span class="language-xml">```xml</span><br><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    resultMap：设置自定义映射</span></span><br><span class="hljs-comment"><span class="language-xml">    属性：</span></span><br><span class="hljs-comment"><span class="language-xml">    id：表示自定义映射的唯一标识</span></span><br><span class="hljs-comment"><span class="language-xml">    type：查询的数据要映射的实体类的类型</span></span><br><span class="hljs-comment"><span class="language-xml">    子标签：</span></span><br><span class="hljs-comment"><span class="language-xml">    id：设置主键的映射关系</span></span><br><span class="hljs-comment"><span class="language-xml">    result：设置普通字段的映射关系</span></span><br><span class="hljs-comment"><span class="language-xml">    association：设置多对一的映射关系</span></span><br><span class="hljs-comment"><span class="language-xml">    collection：设置一对多的映射关系</span></span><br><span class="hljs-comment"><span class="language-xml">    属性：</span></span><br><span class="hljs-comment"><span class="language-xml">    property：设置映射关系中 实体类中的属性名</span></span><br><span class="hljs-comment"><span class="language-xml">    column：设置映射关系中 表中的字段名</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--Emp getEmpById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="language-xml">    select * from t_emp where emp_id = #</span><span class="hljs-template-variable">&#123;empId&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性</p><p>名符合Java的规则（使用驼峰）</p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可</p><p>以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为</p><p>userName</p></blockquote><h2 id="8-2、多对一映射处理"><a href="#8-2、多对一映射处理" class="headerlink" title="8.2、多对一映射处理"></a>8.2、多对一映射处理</h2><blockquote><p>场景模拟：</p><p>查询员工信息以及员工所对应的部门信息</p></blockquote><h3 id="8-2-1、级联方式处理映射关系"><a href="#8-2-1、级联方式处理映射关系" class="headerlink" title="8.2.1、级联方式处理映射关系"></a>8.2.1、级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select t_emp.*,t_dept.*<br>    from t_emp<br>    left join t_dept<br>    on t_emp.dept_id = t_dept.dept_id<br>    where t_emp.emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-2-2、使用association处理映射关系"><a href="#8-2-2、使用association处理映射关系" class="headerlink" title="8.2.2、使用association处理映射关系"></a>8.2.2、使用association处理映射关系</h3><p><strong>说明：association：处理多对一的映射关系（处理实体类类型的属性）</strong></p><ul><li>property：设置需要处理映射关系的属性的属性名</li><li>javaType：设置要处理属性的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select t_emp.*,t_dept.*<br>    from t_emp<br>    left join t_dept<br>    on t_emp.dept_id = t_dept.dept_id<br>    where t_emp.emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-2-3、分步查询"><a href="#8-2-3、分步查询" class="headerlink" title="8.2.3、分步查询"></a>8.2.3、分步查询</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">association</span> </span><br><span class="hljs-tag"><span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>property：设置需要处理映射关系的属性的属性名<br>select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）<br>    column：将sql以及查询结果中的某个字段设置为分步查询的条件<br></code></pre></td></tr></table></figure><h4 id="①查询员工信息"><a href="#①查询员工信息" class="headerlink" title="①查询员工信息"></a>①查询员工信息</h4><ul><li><p>EmpMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** EmpMapper接口</span><br><span class="hljs-comment">* 通过分步查询查询员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> empId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure></li><li><p>EmpMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span><br><span class="hljs-comment">        column：将sql以及查询结果中的某个字段设置为分步查询的条件</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.DeptMapper</span></span><br><span class="hljs-string"><span class="hljs-tag">                         .getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="②根据员工所对应的部门id查询部门信息"><a href="#②根据员工所对应的部门id查询部门信息" class="headerlink" title="②根据员工所对应的部门id查询部门信息"></a>②根据员工所对应的部门id查询部门信息</h4><ul><li><p>DeptMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** DeptMapper接口</span><br><span class="hljs-comment">* 分步查询的第二步： 根据员工所对应的did查询部门信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> deptId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;<br></code></pre></td></tr></table></figure></li><li><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpAndDeptByStep</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-3、一对多映射处理"><a href="#8-3、一对多映射处理" class="headerlink" title="8.3、一对多映射处理"></a>8.3、一对多映射处理</h2><h3 id="8-3-1、collection"><a href="#8-3-1、collection" class="headerlink" title="8.3.1、collection"></a>8.3.1、collection</h3><p><strong>说明：collection：处理一对多映射关系（处理集合类型的属性）</strong></p><ul><li><p>DeptMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据部门id查新部门以及部门中的员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> deptId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getDeptAndEmpByDeptId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;<br></code></pre></td></tr></table></figure></li><li><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      ofType：设置collection标签所处理的集合属性中存储数据的类型</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span><br>    select *<br>    from t_dept<br>    left join t_emp<br>    on t_dept.dept_id = t_emp.dept_id<br>    where t_dept.dept_id = 1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDeptAndEmpByDeptId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DeptMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DeptMapper.class);<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> mapper.getDeptAndEmpByDeptId(<span class="hljs-number">1</span>);<br>    System.out.println(dept);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-3-2、分步查询"><a href="#8-3-2、分步查询" class="headerlink" title="8.3.2、分步查询"></a>8.3.2、分步查询</h3><h3 id="①查询部门信息"><a href="#①查询部门信息" class="headerlink" title="①查询部门信息"></a>①查询部门信息</h3><ul><li><p>DeptMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 分步查询部门和部门中的员工</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> deptId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getDeptAndEmpBySeptOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;<br></code></pre></td></tr></table></figure></li><li><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMapByStep&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpBySeptOne(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpBySeptOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMapByStep&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="②根据部门id查询部门中的所有员工"><a href="#②根据部门id查询部门中的所有员工" class="headerlink" title="②根据部门id查询部门中的所有员工"></a>②根据部门id查询部门中的所有员工</h3><ul><li><p>EmpMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据部门id查询员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> deptId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;<br></code></pre></td></tr></table></figure></li><li><p>EmpMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDeptAndEmpByStep</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DeptMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DeptMapper.class);<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> mapper.getDeptAndEmpBySeptOne(<span class="hljs-number">1</span>);<br>    System.out.println(dept);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分部查询——延迟加载"><a href="#分部查询——延迟加载" class="headerlink" title="* 分部查询——延迟加载"></a>* 分部查询——延迟加载</h3><ul><li><p>分步查询的优点：可以实现延迟加载</p></li><li><p>但是必须在核心配置文件中设置全局配置信息：</p><ul><li><strong>lazyLoadingEnabled</strong>：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</li><li><strong>aggressiveLazyLoading</strong>：当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载</li></ul></li><li><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。</p></li><li><p>此时可通过 association 和 collection 中的 <strong>fetchType属性</strong> 设置当前的分步查询是否使用延迟加载， <strong>fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</strong></p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--按需加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>EmpMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpAndDeptByStep</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="hljs-number">1</span>);<br>    System.out.println(emp.getEmpName());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="9、动态SQL"><a href="#9、动态SQL" class="headerlink" title="9、动态SQL"></a>9、动态SQL</h1><blockquote><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了</p><p>解决 拼接SQL语句字符串时的痛点问题。</p></blockquote><h2 id="9-1、if"><a href="#9-1、if" class="headerlink" title="9.1、if"></a>9.1、if</h2><ul><li>if标签可通过test属性的表达式进行判断<ul><li>若表达式的结果为true，则标签中的内容会执行；</li><li>若表达式的结果为false，则标签中的内容不会执行</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>        and emp_name = #&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>        and age = #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>        and gender = #&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpByCondition</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    List&lt;Emp&gt; list = mapper.getEmpByCondition(emp);<br>    <span class="hljs-keyword">for</span> (Emp emp1 : list) &#123;<br>        System.out.println(emp1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-2、where"><a href="#9-2、where" class="headerlink" title="9.2、where"></a>9.2、where</h2><ul><li><p>where</p><ul><li><p>若 where 标签中有条件成立，则会自动生成 where 关键字</p><p>并且 会自动将 where 标签中的内容的前面多余的 and 去掉</p></li><li><p>若 where 标签中没有任何一个条件成立，则 where 没有任何功能（不会加上 where 关键字）</p></li><li><p>注意：where标签不能去掉条件最后多余的and</p></li></ul></li><li><p>where和if一般结合使用</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>            and age = #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpByCondition</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    List&lt;Emp&gt; list = mapper.getEmpByCondition(emp);<br>    <span class="hljs-keyword">for</span> (Emp emp1 : list) &#123;<br>        System.out.println(emp1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-3、trim"><a href="#9-3、trim" class="headerlink" title="9.3、trim"></a>9.3、trim</h2><ul><li><p>trim用于去掉或添加标签中的内容</p><p>常用属性：</p><ul><li><p>prefix：在trim标签中的内容的<strong>前面添加</strong>某些内容</p></li><li><p>prefixOverrides：在trim标签中的内容的<strong>前面去掉</strong>某些内容</p></li><li><p>suffix：在trim标签中的内容的<strong>后面添加</strong>某些内容</p></li><li><p>suffixOverrides：在trim标签中的内容的<strong>后面去掉</strong>某些内容</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>            age = #&#123;age&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>            gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpByCondition</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    List&lt;Emp&gt; list = mapper.getEmpByCondition(emp);<br>    <span class="hljs-keyword">for</span> (Emp emp1 : list) &#123;<br>        System.out.println(emp1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-4、choose、when、otherwise"><a href="#9-4、choose、when、otherwise" class="headerlink" title="9.4、choose、when、otherwise"></a>9.4、choose、when、otherwise</h2><ul><li>choose、when、 otherwise相当于if…else if..else</li><li>若某一个条件为 true，则后面的条件不会再判断</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByChoose(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>                age = #&#123;age&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>                gender = #&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpByChoose</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    List&lt;Emp&gt; list = mapper.getEmpByChoose(emp);<br>    <span class="hljs-keyword">for</span> (Emp emp1 : list) &#123;<br>        System.out.println(emp1);<br>    &#125;<br>    <span class="hljs-comment">/* select * from t_emp WHERE emp_name = ? */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-5、foreach（重点）"><a href="#9-5、foreach（重点）" class="headerlink" title="9.5、foreach（重点）"></a>9.5、foreach（重点）</h2><ul><li>foreach<ul><li>collection：设置要循环的数组或集合</li><li>item：用一个字符串表示数组或集合中的每一个数据</li><li>separator：设置每次循环的数据之间的分隔符</li><li>open：循环的所有内容以什么开始</li><li>close：循环的所有内容以什么结束</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--批量添加员工信息--&gt;</span><br><span class="hljs-comment">&lt;!--void insertMoreEmp(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span><br>    insert into t_emp values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--批量删除--&gt;</span><br><span class="hljs-comment">&lt;!--void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>    delete from t_emp where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>        emp_id = #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--批量删除--&gt;</span><br><span class="hljs-comment">&lt;!--void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>    delete from t_emp where emp_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertMoreEmp</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;小明1&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;小明2&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;小明3&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>    List&lt;Emp&gt; list = Arrays.asList(emp1, emp2, emp3);<br>    mapper.insertMoreEmp(list);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteMoreEmp</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    Integer[] empIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>    mapper.deleteMoreEmp(empIds);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-6、SQL片段"><a href="#9-6、SQL片段" class="headerlink" title="9.6、SQL片段"></a>9.6、SQL片段</h2><blockquote><p>sql片段，可以记录一段公共sql片段，在使用的地方通过 include 标签进行引入</p><p>在mapper.xml文件前面设置一次之后，后面可以直接重复使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>    eid,ename,age,sex,did<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="10、MyBatis的缓存"><a href="#10、MyBatis的缓存" class="headerlink" title="10、MyBatis的缓存"></a>10、MyBatis的缓存</h1><h2 id="10-1、MyBatis的一级缓存"><a href="#10-1、MyBatis的一级缓存" class="headerlink" title="10.1、MyBatis的一级缓存"></a>10.1、MyBatis的一级缓存</h2><ul><li><p><strong>一级缓存是SqlSession级别的</strong>，通过<strong>同一个SqlSession</strong>查询的数据会被缓存，</p><p>再次使用<strong>同一个SqlSession</strong>查询<strong>相同的数据</strong>时，就会从缓存中直接获取，而不会从数据库重新访问</p></li><li><p>使一级缓存失效的四种情况：</p><ul><li><ol><li>不同的SqlSession对应不同的一级缓存</li></ol></li><li><ol start="2"><li>同一个SqlSession但是查询条件不同</li></ol></li><li><ol start="3"><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li></ol></li><li><ol start="4"><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul></li><li><p>CacheMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select  * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--void insertEmp(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmp&quot;</span>&gt;</span><br>    insert into t_emp values (null,#&#123;empName&#125;,#&#123;age&#125;,#&#123;gender&#125;,null)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp1);<br>    <span class="hljs-comment">//mapper1.insertEmp(new Emp(null,&quot;小红&quot;,25,&quot;男&quot;));</span><br>    <span class="hljs-comment">//sqlSession1.clearCache();</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp2);<br><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp3</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp3);<br><br>    <span class="hljs-comment">/*  DEBUG 11-17 23:59:57,220==&gt;  Preparing: select * from t_emp where emp_id = ? (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        DEBUG 11-17 23:59:57,275==&gt; Parameters: 1(Integer) (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        DEBUG 11-17 23:59:57,327&lt;==      Total: 1 (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;&#125;</span><br><span class="hljs-comment">        Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;&#125;</span><br><span class="hljs-comment">        DEBUG 11-17 23:59:57,389==&gt;  Preparing: select * from t_emp where emp_id = ? (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        DEBUG 11-17 23:59:57,390==&gt; Parameters: 1(Integer) (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        DEBUG 11-17 23:59:57,393&lt;==      Total: 1 (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">        Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;&#125;</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-2、MyBatis的二级缓存"><a href="#10-2、MyBatis的二级缓存" class="headerlink" title="10.2、MyBatis的二级缓存"></a>10.2、MyBatis的二级缓存</h2><ul><li><p>二级缓存是<strong>SqlSessionFactory级别</strong>，通过<strong>同一个SqlSessionFactory创建的SqlSession</strong>查询的结果会被缓存</p><p>此后若再次执行相同的查询语句，结果就会从缓存中获取</p></li><li><p>二级缓存开启的条件：</p><ul><li><p>a &gt;  在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”（默认为true，不需要设置）</p></li><li><p>b &gt;  在映射文件中设置标签 &lt;cache&#x2F;&gt;</p></li><li><p>c &gt;  二级缓存必须在 SqlSession 关闭或提交之后有效</p></li><li><p>d &gt;  查询的数据所转换的实体类类型必须实现序列化的接口（Serializable）</p></li></ul></li><li><p>使二级缓存失效的情况：</p><p><strong>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</strong></p></li><li><p>pojo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;  <span class="hljs-comment">//实现序列化的接口</span><br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-comment">//... ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper.CacheMapper&quot;</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!-- 在映射文件中设置标签 &lt;cache/&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Emp getEmpById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        select  * from t_emp where emp_id = #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--void insertEmp(Emp emp);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmp&quot;</span>&gt;</span><br>        insert into t_emp values (null,#&#123;empName&#125;,#&#123;age&#125;,#&#123;gender&#125;,null)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp1);<br>    sqlSession1.close();<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp2);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    DEBUG 11-18 11:40:15,065Cache Hit Ratio [com.study.mybatis.mapper.CacheMapper]: 0.0 (LoggingCache.java:60)</span><br><span class="hljs-comment">    DEBUG 11-18 11:40:15,253==&gt;  Preparing: select * from t_emp where emp_id = ? (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">    DEBUG 11-18 11:40:15,279==&gt; Parameters: 1(Integer) (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">    DEBUG 11-18 11:40:15,305&lt;==      Total: 1 (BaseJdbcLogger.java:137)</span><br><span class="hljs-comment">    Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;&#125;</span><br><span class="hljs-comment">    WARN  11-18 11:40:15,311As you are using functionality that deserializes object streams, it is recommended to define the JEP-290 serial filter. Please refer to https://docs.oracle.com/pls/topic/lookup?ctx=javase15&amp;id=GUID-8296D8E8-2B93-4B9A-856E-0A65AF9B8C66 (SerialFilterChecker.java:45)</span><br><span class="hljs-comment">    DEBUG 11-18 11:40:15,315Cache Hit Ratio [com.study.mybatis.mapper.CacheMapper]: 0.5 (LoggingCache.java:60)</span><br><span class="hljs-comment">    Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;&#125;</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-3、二级缓存的相关配置"><a href="#10-3、二级缓存的相关配置" class="headerlink" title="10.3、二级缓存的相关配置"></a>10.3、二级缓存的相关配置</h2><p>说明：一般情况下使用默认设置即可</p><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性：<ul><li>①eviction属性：缓存回收策略，默认的是 LRU。<ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li></ul></li><li>②flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li></ul></li><li>③size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>④readOnly属性：只读， true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的<strong>相同实例</strong>。因此这些对象不能被修改。有性能优势</li><li>false：读写缓存；会返回缓存对象的<strong>拷贝</strong>（通过序列化）。这会慢一些，但是安全，默认是false。</li></ul></li></ul></li></ul><h2 id="10-4、MyBatis缓存查询的顺序"><a href="#10-4、MyBatis缓存查询的顺序" class="headerlink" title="10.4、MyBatis缓存查询的顺序"></a>10.4、MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li><li>说明：二级缓存中不一定有一级缓存的数据，因为一级缓存只有在SqlSession提交或关闭时才会把数据保存到二级缓存</li></ul><h2 id="10-5、整合第三方缓存EHCache"><a href="#10-5、整合第三方缓存EHCache" class="headerlink" title="10.5、整合第三方缓存EHCache"></a>10.5、整合第三方缓存EHCache</h2><p>说明：第三方缓存仅作用于二级缓存</p><h3 id="10-5-1、添加依赖"><a href="#10-5-1、添加依赖" class="headerlink" title="10.5.1、添加依赖"></a>10.5.1、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-5-2、各jar包功能"><a href="#10-5-2、各jar包功能" class="headerlink" title="10.5.2、各jar包功能"></a>10.5.2、各jar包功能</h3><table><thead><tr><th><strong>jar包名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="10-5-3、创建EHCache的配置文件ehcache-xml"><a href="#10-5-3、创建EHCache的配置文件ehcache-xml" class="headerlink" title="10.5.3、创建EHCache的配置文件ehcache.xml"></a>10.5.3、创建EHCache的配置文件ehcache.xml</h3><p>说明：配置文件名固定为 ehcache.xml，放在 resources 目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-5-4、设置二级缓存的类型"><a href="#10-5-4、设置二级缓存的类型" class="headerlink" title="10.5.4、设置二级缓存的类型"></a>10.5.4、设置二级缓存的类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-5-5、加入logback日志"><a href="#10-5-5、加入logback日志" class="headerlink" title="10.5.5、加入logback日志"></a>10.5.5、加入logback日志</h3><blockquote><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 </p><p>创建logback的配置文件 logback.xml</p><p>说明：配置文件名固定为 logback.xml，放在 resources 目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger][%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-5-6、EHCache配置文件说明"><a href="#10-5-6、EHCache配置文件说明" class="headerlink" title="10.5.6、EHCache配置文件说明"></a>10.5.6、EHCache配置文件说明</h3><table><thead><tr><th><strong>属性名</strong></th><th><strong>是否必须</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU （最近最少使用），可选的有LFU （最不常使用）和FIFO （先进先出）</td></tr></tbody></table><h1 id="11、MyBatis的逆向工程"><a href="#11、MyBatis的逆向工程" class="headerlink" title="11、MyBatis的逆向工程"></a>11、MyBatis的逆向工程</h1><ul><li><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工程的。</p></li><li><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></li></ul><p>说明：MyBatis的逆向工程生成的只是单表查询的相关内容，<strong>若要需要多表联查，还得自己实现</strong></p><h2 id="11-1、创建逆向工程的步骤"><a href="#11-1、创建逆向工程的步骤" class="headerlink" title="11.1、创建逆向工程的步骤"></a>11.1、创建逆向工程的步骤</h2><h3 id="①添加依赖和插件"><a href="#①添加依赖和插件" class="headerlink" title="①添加依赖和插件"></a>①添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②创建MyBatis的核心配置文件"><a href="#②创建MyBatis的核心配置文件" class="headerlink" title="②创建MyBatis的核心配置文件"></a>②创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         MyBatis核心配置文件中的标签必须要按照指定的顺序配置：</span><br><span class="hljs-comment">         properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">         objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">         plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-comment">&lt;!--读取配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③创建逆向工程的配置文件"><a href="#③创建逆向工程的配置文件" class="headerlink" title="③创建逆向工程的配置文件"></a>③创建逆向工程的配置文件</h3><blockquote><p>文件名必须是：generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">                MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">                MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">password</span>=<span class="hljs-string">&quot;lyh123&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.study.mybatis.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.study.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 若 tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="④执行MBG插件的generate目标"><a href="#④执行MBG插件的generate目标" class="headerlink" title="④执行MBG插件的generate目标"></a>④执行MBG插件的generate目标</h3><p><img src="/2022/10/28/MyBatis/3.png" alt="3"></p><h3 id="⑤效果"><a href="#⑤效果" class="headerlink" title="⑤效果"></a>⑤效果</h3><p><img src="/2022/10/28/MyBatis/4.png" alt="4"></p><h2 id="11-2、QBC查询"><a href="#11-2、QBC查询" class="headerlink" title="11.2、QBC查询"></a>11.2、QBC查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>        <span class="hljs-comment">//根据id查询数据</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.selectByPrimaryKey(<span class="hljs-number">1</span>);<br>        System.out.println(emp);<br>        <span class="hljs-comment">//查询所有数据</span><br>        List&lt;Emp&gt; list = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>        list.forEach(System.out::println);<br>        <span class="hljs-comment">//根据条件查询数据</span><br>        <span class="hljs-type">EmpExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpExample</span>();<br>        example.createCriteria().andEmpNameEqualTo(<span class="hljs-string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//若要使用or，需要在零一条语句的开头使用 .or().其它条件</span><br>        example.or().andGenderEqualTo(<span class="hljs-string">&quot;男&quot;</span>);<br>        List&lt;Emp&gt; list = mapper.selectByExample(example);<br>        list.forEach(System.out::println);<br>        <span class="hljs-comment">//测试普通修改功能</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        mapper.updateByPrimaryKey(emp);<br>        <span class="hljs-comment">//update t_emp set emp_name = ?, age = ?, gender = ?, dept_id = ? </span><br>        <span class="hljs-comment">// where emp_id = ?</span><br>        <span class="hljs-comment">//测试选择性修改功能</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        mapper.updateByPrimaryKeySelective(emp);<br>        <span class="hljs-comment">//update t_emp SET emp_name = ?, gender = ? where emp_id = ?</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//非选择性插入：如果参数为null，就不会为该字段赋值为null，而不会使用原来的值或设置的默认值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp record)</span>;<br><br><span class="hljs-comment">//选择性插入：如果参数为null，就不会为该字段赋值，使其能使用原来的值或设置的默认值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertSelective</span><span class="hljs-params">(Emp record)</span>;<br></code></pre></td></tr></table></figure><h1 id="12、分页插件"><a href="#12、分页插件" class="headerlink" title="12、分页插件"></a>12、分页插件</h1><blockquote><p>limit index, pageSize</p><p>pageSize：每页显示的条数</p><p>pageNum：当前页的页码</p><p>index：当前页的起始索引，index&#x3D;(pageNum-1)*pageSize</p><p>count：总记录数</p><p>totalPage：总页数</p><p>totalPage &#x3D; count &#x2F; pageSize;</p><p>if(count % pageSize !&#x3D; 0) {</p><p>​totalPage +&#x3D; 1;</p><p>}</p><p>pageSize&#x3D;4，pageNum&#x3D;1，index&#x3D;0 limit 0,4</p><p>pageSize&#x3D;4，pageNum&#x3D;3，index&#x3D;8 limit 8,4</p><p>pageSize&#x3D;4，pageNum&#x3D;6，index&#x3D;20 limit 20,4</p><p>首页 上一页 2 3 4 5 6 下一页 末页</p></blockquote><h2 id="12-1、分页插件的使用步骤"><a href="#12-1、分页插件的使用步骤" class="headerlink" title="12.1、分页插件的使用步骤"></a>12.1、分页插件的使用步骤</h2><h3 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a>①添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="②配置分页插件"><a href="#②配置分页插件" class="headerlink" title="②配置分页插件"></a>②配置分页插件</h3><p>在MyBatis的核心配置文件中配置插件 mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-comment">//查询功能之前开启分页功能</span><br>    Page&lt;Object&gt; page = PageHelper.startPage(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    List&lt;Emp&gt; list = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//查询功能之后可以获取分页相关的所有数据</span><br>    PageInfo&lt;Emp&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(list,<span class="hljs-number">5</span>);<br>    list.forEach(System.out::println);<br>    System.out.println(pageInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-2、分页插件的使用"><a href="#12-2、分页插件的使用" class="headerlink" title="12.2、分页插件的使用"></a>12.2、分页插件的使用</h2><p>a&gt; 在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p><blockquote><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p></blockquote><p>b&gt; 在查询获取list集合之后，使用PageInfo<T> pageInfo &#x3D; new PageInfo&lt;&gt;(List<T> list, int</p><p>navigatePages)获取分页相关数据</p><blockquote><p>list：分页之后的数据</p><p>navigatePages：导航分页的页码数</p></blockquote><p>c&gt; 分页相关数据</p><blockquote><p>PageInfo{</p><p>pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,</p><p>list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,</p><p>pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},</p><p>prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,</p><p>hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,</p><p>navigatepageNums&#x3D;[4, 5, 6, 7, 8]</p><p>}</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2022/10/03/JavaWebNote/"/>
    <url>/2022/10/03/JavaWebNote/</url>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><ul><li>xml 是可扩展的标记性语言。</li><li>xml 的主要作用有： <ul><li>1、用来保存数据，而且这些数据具有自我描述性 </li><li>2、它还可以做为项目或者模块的配置文件 </li><li>3、还可以做为网络传输数据的格式（现在 JSON 为主）。</li></ul></li></ul><h2 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h2><ol><li>文档声明。</li><li>元素（标签） </li><li>xml 属性 </li><li>xml 注释 </li><li>文本区域（CDATA 区）</li></ol><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><p>我们先创建一个简单 XML 文件，用来描述图书信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-comment">    以上内容就是xml文件的声明</span><br><span class="hljs-comment">    version=&quot;1.0&quot;       version 表示xml的版本</span><br><span class="hljs-comment">    encoding=&quot;utf-8&quot;    encoding 表示xml文件本身的编码</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span> <span class="hljs-comment">&lt;!-- books 表示多个图书信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12312344&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- book 表示单个图书信息，sn属性表示图书序列号 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>时间简史<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- name标签表示图书名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>霍金<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span> <span class="hljs-comment">&lt;!-- author标签表示作者 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>75<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span> <span class="hljs-comment">&lt;!-- price标签表示价格 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12312398&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- book 表示单个图书信息，sn属性表示图书序列号 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>java教程<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- name标签表示图书名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>大佐<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span> <span class="hljs-comment">&lt;!-- author标签表示作者 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span> <span class="hljs-comment">&lt;!-- price标签表示价格 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中可以查看到文档</p><h3 id="xml注释"><a href="#xml注释" class="headerlink" title="xml注释"></a>xml注释</h3><p>html 和 XML 注释 一样 : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- html 注释 --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="元素（标签）"><a href="#元素（标签）" class="headerlink" title="元素（标签）"></a>元素（标签）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">们先回忆一下:<br>html 标签：<br>    格式：<span class="hljs-tag">&lt;<span class="hljs-name">标签名</span>&gt;</span>封装的数据<span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br>    单标签: <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> 换行 <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>水平线<br>    双标签 <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span>&gt;</span>封装的数据<span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br>    标签名大小写不敏感<br>    标签有属性，有基本属性和事件属性<br>    标签要闭合（不闭合 ，html 中不报错。但我们要养成良好的书写习惯。闭合）<br></code></pre></td></tr></table></figure><h4 id="什么是xml元素"><a href="#什么是xml元素" class="headerlink" title="什么是xml元素"></a>什么是xml元素</h4> <img src="image-20221028163054477.png" alt="image-20221028163054477" style="zoom: 67%;" /><h4 id="xml命名规则"><a href="#xml命名规则" class="headerlink" title="xml命名规则"></a>xml命名规则</h4><ul><li>XML 元素必须遵循以下命名规则：<ul><li>名称可以含字母、数字以及其他的字符</li><li>名称不能以数字或标点符号开始</li><li>名称不能包含空格</li></ul></li></ul><h4 id="xml单标签-amp-双标签"><a href="#xml单标签-amp-双标签" class="headerlink" title="xml单标签&amp;双标签"></a>xml单标签&amp;双标签</h4><ul><li><p>单标签</p><ul><li><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性</span>=<span class="hljs-string">&quot;值&quot;</span> <span class="hljs-attr">属性</span>=<span class="hljs-string">&quot;值&quot;</span> <span class="hljs-attr">...</span> /&gt;</span> <br></code></pre></td></tr></table></figure></li></ul></li><li><p>双标签</p><ul><li><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性</span>=<span class="hljs-string">&quot;值&quot;</span> <span class="hljs-attr">属性</span>=<span class="hljs-string">&quot;值&quot;</span> <span class="hljs-attr">...</span> &gt;</span>文本数据或子标签<span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><img src="image-20221028163729119.png" alt="image-20221028163729119" style="zoom:80%;" /></li></ul><h3 id="xml属性"><a href="#xml属性" class="headerlink" title="xml属性"></a>xml属性</h3><ul><li><p>xml 的标签属性和 html 的标签属性是非常类似的，属性可以提供元素的额外信息。</p></li><li><p>在标签上可以书写属性：</p><ul><li>一个标签上可以书写多个属性</li><li>每个属性的值必须用 引号 包起来</li><li>规则和标签的书写规则一致。</li></ul></li></ul><img src="image-20221028164205884.png" alt="image-20221028164205884" style="zoom:80%;" /><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><ul><li><p>所有 xml 元素都必须闭合（即要有开始标签和结束标签）</p></li><li><p>xml 标签对大小写敏感</p></li><li><p>xml 文档必须有根元素</p><ul><li>根元素就是顶级元素， 没有父标签的元素，叫顶级元素。 </li><li>根元素是没有父标签的顶级元素，而且是唯一一个才行。</li><li><img src="image-20221028164914910.png" alt="image-20221028164914910" style="zoom: 67%;" /></li></ul></li><li><p>xml 的属性值必须用引号包含</p></li><li><p>xml 的特殊字符的使用</p><ul><li><img src="image-20221028165143092.png" alt="image-20221028165143092" style="zoom:67%;" /></li></ul></li><li><p>文本区域（CDATA区）</p><ul><li><p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析</p></li><li><p>CDATA 格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;![CDATA[ 这里可以把你输入的字符原样显示，不会解析 xml]]&gt;<br></code></pre></td></tr></table></figure><img src="image-20221028165341263.png" alt="image-20221028165341263" style="zoom:67%;" /></li></ul></li></ul><h2 id="xml-解析技术介绍"><a href="#xml-解析技术介绍" class="headerlink" title="xml 解析技术介绍"></a>xml 解析技术介绍</h2><p>xml 是可扩展的标记语言。</p><p>不管是 html 文件还是 xml 文件，它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。</p><img src="image-20221028165751067.png" alt="image-20221028165751067" style="zoom:80%;" /><p>document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）</p><p>早期 JDK 为我们提供了两种 xml 解析技术 DOM 和 Sax 简介（已经过时，但我们需要知道这两种技术）</p><p>dom 解析技术是 W3C 组织制定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。 </p><p>Java 对 dom 技术解析标记也做了实现。 </p><p>sun 公司在 JDK5 版本对 dom 解析技术进行升级：SAX（ Simple API for XML ） 。</p><p>SAX 解析：它跟 W3C 制定的解析不太一样。它是以类似事件机制通过回调告诉用户当前正在解析的内容。 它是一行一行的读取 xml 文件进行解析的。不会创建大量的 dom 对象。 所以它在解析 xml 的时候，在内存的使用上。和性能上。都优于 Dom 解析。 </p><p>第三方的解析： </p><ul><li>jdom 在 dom 基础上进行了封装 </li><li>dom4j 又对 jdom 进行了封装。 </li><li>pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。</li></ul><p>这个 Dom4j 它是第三方的解析技术。我们需要使用第三方给我们提供好的类库才可以解析 xml 文件。</p><h2 id="dom4j-解析技术（重点）"><a href="#dom4j-解析技术（重点）" class="headerlink" title="dom4j 解析技术（重点）"></a>dom4j 解析技术（重点）</h2><p>由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用 dom4j 就需要到 dom4j 官网下载 dom4j 的 jar 包。</p><h3 id="Dom4j-类库的使用"><a href="#Dom4j-类库的使用" class="headerlink" title="Dom4j 类库的使用"></a>Dom4j 类库的使用</h3> <img src="image-20221029102548240.png" alt="image-20221029102548240" style="zoom: 67%;" /><p>解压后：</p> <img src="image-20221029102629505.png" alt="image-20221029102629505" style="zoom: 50%;" /><h3 id="dom4j-目录的介绍"><a href="#dom4j-目录的介绍" class="headerlink" title="dom4j 目录的介绍"></a>dom4j 目录的介绍</h3><p>（1）docs 是文档目录</p> <img src="image-20221029102801538.png" alt="image-20221029102801538" style="zoom: 50%;" /><p>（2）如何查 Dom4j 的文档</p> <img src="image-20221029102921564.png" alt="image-20221029102921564" style="zoom: 50%;" /><p>（3）Dom4j 快速入门</p> <img src="image-20221029103014865.png" alt="image-20221029103014865" style="zoom: 50%;" /><p>（4）lib 目录</p> <img src="image-20221029103109131.png" alt="image-20221029103109131" style="zoom:50%;" /><p>（5）src 目录是第三方类库的源码目录</p> <img src="image-20221029103154911.png" alt="image-20221029103154911" style="zoom:50%;" /><h3 id="dom4j-编程步骤"><a href="#dom4j-编程步骤" class="headerlink" title="dom4j 编程步骤"></a>dom4j 编程步骤</h3><p>1）先加载xml文件创建 Document 对象</p><p>2）通过 Document 对象拿到根元素对象</p><p>3）通过根元素.elelemts(标签名);  可以返回一个集合，这个集合里放着所有自己指定的标签名的元素对象</p><p>4）找到想要修改、删除的子元素，进行相应的操作</p><p>5）保存到硬盘上</p><h3 id="获取-document-对象"><a href="#获取-document-对象" class="headerlink" title="获取 document 对象"></a>获取 document 对象</h3><p>创建一个 lib 目录，并添加 dom4j 的 jar 包。并添加到类路径。</p> <img src="image-20221029152741709.png" alt="image-20221029152741709" style="zoom: 67%;" /><p>案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341232&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>辟邪剑谱<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班主任<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341231&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>99.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班长<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* dom4j 获取 Documet 对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br><span class="hljs-comment">// 要创建一个 Document 对象，需要我们先创建一个 SAXReader 对象</span><br><span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br><span class="hljs-comment">// 这个对象用于读取 xml 文件，然后返回一个 Document。</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br><span class="hljs-comment">// 打印到控制台，看看是否创建成功</span><br>System.out.println(document);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="遍历标签-amp-获取所有标签中的内容"><a href="#遍历标签-amp-获取所有标签中的内容" class="headerlink" title="遍历标签&amp;获取所有标签中的内容"></a>遍历标签&amp;获取所有标签中的内容</h3><ul><li><p>需要分四步操作:</p><ul><li>第一步，通过创建 SAXReader 对象。来读取 xml 文件，获取 Document 对象</li><li>第二步，通过 Document 对象。拿到 XML 的根元素对象</li><li>第三步，通过根元素对象。获取所有的 book 标签对象</li><li>第四步，遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素，再通过 getText() 方法拿到起始标签和结束标签之间的文本内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341232&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>辟邪剑谱<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班主任<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341231&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>99.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班长<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String sn;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-comment">//... ...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javaWebStudy.pojo;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4jTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">// 创建一个SAXReader输入流，去读取xml配置文件，生成Document对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span>  saxReader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br><br>        System.out.println(document);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取books.xml 文件生成 Book 类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//1. 读取 books.xml 文件</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">//注意：在Junit测试中，相对路径是从模块名开始算</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 通过 Document 对象获取根元素</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement();<br><span class="hljs-comment">//        System.out.println(rootElement);</span><br>        <span class="hljs-comment">//3. 通过根元素获取 book 标签对象</span><br>        <span class="hljs-comment">//element() 和 elements() 都是通过标签名查找子元素</span><br>        List&lt;Element&gt; books = rootElement.elements(<span class="hljs-string">&quot;book&quot;</span>);<br>        <span class="hljs-comment">//4. 遍历，处理每个 book 标签，转换为 Book 类</span><br>        <span class="hljs-keyword">for</span>(Element book:books)&#123;<br>            <span class="hljs-comment">// asXML() 把标签对象，转换为标签字符串</span><br><span class="hljs-comment">//            System.out.println(book.asXML());</span><br>            <span class="hljs-type">Element</span> <span class="hljs-variable">nameElement</span> <span class="hljs-operator">=</span> book.element(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-comment">// getText() ;  可以获取标签中的文本内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">nameText</span> <span class="hljs-operator">=</span> nameElement.getText();<br>            <span class="hljs-comment">// .elementText() 直接获取指定标签名的文本内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">priceText</span> <span class="hljs-operator">=</span> book.elementText(<span class="hljs-string">&quot;price&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">authorText</span> <span class="hljs-operator">=</span> book.elementText(<span class="hljs-string">&quot;author&quot;</span>);<br>            <span class="hljs-comment">// .attributeValue() 获取属性</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">snValue</span> <span class="hljs-operator">=</span> book.attributeValue(<span class="hljs-string">&quot;sn&quot;</span>);<br>            <span class="hljs-type">Book</span> <span class="hljs-variable">a_book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(snValue,nameText, BigDecimal.valueOf(Double.parseDouble(priceText)),authorText);<br>            System.out.println(a_book);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="Tomcat-IDEA-控制台中文乱码问题"><a href="#Tomcat-IDEA-控制台中文乱码问题" class="headerlink" title="Tomcat IDEA 控制台中文乱码问题"></a>Tomcat IDEA 控制台中文乱码问题</h2><ul><li><p>IntelliJ IDEA 及项目配置</p><ul><li><p>将 IntelliJ IDEA 和项目均配置为 <code>UTF-8</code> 编码；</p><img src="cf041a1e6f0e6b855236aa4b2e31b5fe.png" alt="img" style="zoom:45%;" /></li><li><p>IntelliJ IDEA 启动项  追加以下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">-Dfile.encoding</span>=UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure> <img src="2206227828f73048db229808d7bee5ac.png" alt="img" style="zoom:45%;" /> <img src="3a94a5e374068aec558d76792f521597.png" alt="img" style="zoom:45%;" /></li><li><p>Tomcat 配置</p><p>对 Tomcat 启动脚本 <code>catalina.bat</code> 中的环境变量 <code>JAVA_OPTIONS</code> 追加如下参数；</p> <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">-Dfile.encoding=UTF8 -Dsun.jnu.encoding=UTF8<br></code></pre></td></tr></table></figure> <img src="55638a1fdc3fdff01e0c8dc4d3dad2a0.png" alt="img" style="zoom:45%;" /></li></ul></li></ul><h2 id="JavaWeb-的概念"><a href="#JavaWeb-的概念" class="headerlink" title="JavaWeb 的概念"></a>JavaWeb 的概念</h2><ul><li>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。</li><li>JavaWeb 是基于<strong>请求</strong>和<strong>响应</strong>来开发的。<ul><li>请求 是指 客户端给服务器发送数据，叫请求 Request。</li><li>响应 是指 服务器给客户端回传数据，叫响应 Response。</li><li>请求和响应是成对出现的，有请求就有响应。</li></ul></li></ul><h2 id="Web-资源的分类"><a href="#Web-资源的分类" class="headerlink" title="Web 资源的分类"></a>Web 资源的分类</h2><ul><li>web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。<ul><li><strong>静态资源</strong>： html、css、js、txt、mp4 视频、jpg 图片</li><li><strong>动态资源</strong>： jsp 页面、Servlet 程序</li></ul></li></ul><h2 id="常用的-Web-服务器"><a href="#常用的-Web-服务器" class="headerlink" title="常用的 Web 服务器"></a>常用的 Web 服务器</h2><ul><li><p>Tomcat：</p><p>由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务器），也是当前应用最广的 JavaWeb 服务器（免费）。</p></li><li><p>Jboss：</p><p>是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p></li><li><p>GlassFish： </p><p>由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。</p></li><li><p>Resin：</p><p>是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持，性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。</p></li><li><p>WebLogic：</p><p>是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p></li></ul><h2 id="Tomcat-服务器和-Servlet-版本的对应关系"><a href="#Tomcat-服务器和-Servlet-版本的对应关系" class="headerlink" title="Tomcat 服务器和 Servlet 版本的对应关系"></a>Tomcat 服务器和 Servlet 版本的对应关系</h2><p>当前企业常用的版本 7.*、8.*</p> <img src="image-20221029155009337.png" alt="image-20221029155009337" style="zoom: 67%;" /><p>Servlet 程序从 2.5 版本是现在世面使用最多的版本（xml 配置）</p><p>到了 Servlet3.0 之后。就是注解版本的 Servlet 使用。</p><p>以 2.5 版本为主线讲解 Servlet 程序。</p><h2 id="Tomcat-的使用"><a href="#Tomcat-的使用" class="headerlink" title="Tomcat 的使用"></a>Tomcat 的使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>找到你需要用的 Tomcat 版本对应的 zip 压缩包，解压到需要安装的目录即可。</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul><li><p>bin              专门用来存放 Tomcat 服务器的<strong>可执行程序</strong></p></li><li><p>conf            专门用来存放 Tocmat 服务器的<strong>配置文件</strong></p></li><li><p>lib                专门用来存放 Tomcat 服务器的 <strong>jar 包</strong></p></li><li><p>logs             专门用来存放 Tomcat 服务器运行时输出的<strong>日记信息</strong></p></li><li><p>temp           专门用来存放 Tomcdat 运行时产生的<strong>临时数据</strong></p></li><li><p>webapps    专门用来存放<strong>部署的 Web 工程</strong>。</p></li><li><p>work            是 <strong>Tomcat 工作时的目录</strong>，</p><p>​                     用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化（序列化）的目录。</p></li></ul><h3 id="启动-Tomcat-服务器"><a href="#启动-Tomcat-服务器" class="headerlink" title="启动 Tomcat 服务器"></a>启动 Tomcat 服务器</h3><ul><li><p>如何启动 Tomcat 服务器？</p></li><li><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p></li><li><p>如何测试 Tomcat 服务器启动成功？？？</p><ul><li><p>打开浏览器，在浏览器地址栏中输入以下地址测试：</p></li><li><p>1、<a href="http://localhost:8080/">http://localhost:8080</a></p></li><li><p>2、<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p></li><li><p>3、http:&#x2F;&#x2F;真实 ip:8080</p></li><li><p>当出现如下界面，说明 Tomcat 服务器启动成功！！！</p> <img src="image-20221029155335280.png" alt="image-20221029155335280" style="zoom:50%;" /></li></ul></li><li><p>常见的启动失败的情况有，双击 startup.bat 文件，就会出现一个小黑窗口一闪而来。</p><p>这个时候，失败的原因基本上都是因为没有配置好 JAVA_HOME 环境变量。</p></li><li><p>配置 JAVA_HOME 环境变量：</p><img src="image-20221029155525513.png" alt="image-20221029155525513" style="zoom:80%;" /></li><li><p>另一种启动 另一种启动 tomcat 服务器的方式</p><ul><li><p>1、打开命令行</p></li><li><p>2、cd 到 你的 Tomcat 的 bin 目录下</p> <img src="image-20221029160235155.png" alt="image-20221029160235155" style="zoom:80%;" /></li><li><p>3、敲入启动命令： catalina run</p></li></ul></li></ul><h3 id="Tomcat-的停止"><a href="#Tomcat-的停止" class="headerlink" title="Tomcat 的停止"></a>Tomcat 的停止</h3><ul><li>1、点击 tomcat 服务器窗口的 x 关闭按钮</li><li>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</li><li><strong>3、</strong>找到 Tomcat 的 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</li></ul><h3 id="修改-Tomcat-的端口号"><a href="#修改-Tomcat-的端口号" class="headerlink" title="修改 Tomcat 的端口号"></a>修改 Tomcat 的端口号</h3><ul><li><p>Mysql 默认的端口号是：3306</p></li><li><p>Tomcat 默认的端口号是：8080</p><ul><li><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件。</p> <img src="image-20221029160449832.png" alt="image-20221029160449832" style="zoom:80%;" /></li><li><p>平时上百度：<a href="http://www.baidu.com/">http://www.baidu.com:80</a></p></li><li><p><strong>HTTP 协议默认的端口号是：80</strong></p></li></ul></li></ul><h3 id="部暑-web-工程到-Tomcat"><a href="#部暑-web-工程到-Tomcat" class="headerlink" title="部暑 web 工程到 Tomcat"></a>部暑 web 工程到 Tomcat</h3><h4 id="第一种部署方法"><a href="#第一种部署方法" class="headerlink" title="第一种部署方法"></a>第一种部署方法</h4><p>第一种部署方法：只需要把 web 工程的目录拷贝到 Tomcat 的 的 webapps 目录下即可。</p><ul><li><p>1、在 webapps 目录下创建一个 book 工程：</p> <img src="image-20221029160748750.png" alt="image-20221029160748750" style="zoom:67%;" /></li><li><p>2 、把上午做的书城第一阶段的内容拷贝到里面：</p> <img src="image-20221029160813286.png" alt="image-20221029160813286" style="zoom:67%;" /></li><li><p>3 、访问 Tomcat 下的 web 工程：</p><p> 只需要在浏览器中输入访问地址格式如下：<a href="http://ip:port/工程名/目录下/文件名">http://ip:port/工程名/目录下/文件名</a></p></li></ul><h4 id="第二种部署方法"><a href="#第二种部署方法" class="headerlink" title="第二种部署方法"></a>第二种部署方法</h4><ul><li><p>找到 Tomcat 下的 conf 目录\Catalina\localhost\ 下，创建如下的配置文件</p> <img src="image-20221029160918072.png" alt="image-20221029160918072" style="zoom:67%;" /></li><li><p>abc.xml 配置文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Context 表示一个工程上下文</span><br><span class="hljs-comment">path 表示工程的访问路径:/abc</span><br><span class="hljs-comment">docBase 表示你的工程目录在哪里</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/abc&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;D:\book&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;Context path=&quot;/web03&quot; docBase=&quot;E:\IdeaProjects\JavaWeb\out\artifacts\web03_war_exploded&quot; /&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>访问这个工程的路径如下： <a href="http://ip:port/abc/">http://ip:port/abc/</a>  ，就表示访问 E:\book 目录</p></li></ul><h3 id="两种访问方式的区别"><a href="#两种访问方式的区别" class="headerlink" title="两种访问方式的区别"></a>两种访问方式的区别</h3><p>直接打开 html 页面到浏览器 和 在浏览器中输入 <a href="http://ip:端口号/">http://ip:端口号/</a> 工程名&#x2F;    访问的区别</p><ul><li><p>手托 html 页面的原理：</p> <img src="image-20221029162622306.png" alt="image-20221029162622306" style="zoom:80%;" /></li><li><p>输入访问地址访问的原理：</p> <img src="image-20221029162650394.png" alt="image-20221029162650394" style="zoom:80%;" /></li></ul><h3 id="ROOT-工程-amp-默认-index-html-页面的访问"><a href="#ROOT-工程-amp-默认-index-html-页面的访问" class="headerlink" title="ROOT 工程&amp;默认 index.html 页面的访问"></a>ROOT 工程&amp;默认 index.html 页面的访问</h3><ul><li>当我们在浏览器地址栏中输入访问地址如下：<ul><li><a href="http://ip:port/">http://ip:port/</a>    &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程。</li></ul></li><li>当我们在浏览器地址栏中输入的访问地址如下：<ul><li><a href="http://ip:port/工程名/">http://ip:port/工程名/</a>   &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html 页面</li></ul></li></ul><h2 id="Servlet-技术"><a href="#Servlet-技术" class="headerlink" title="Servlet 技术"></a>Servlet 技术</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><ul><li><p>1、Servlet 是 JavaEE 规范之一。规范就是<strong>接口</strong> </p></li><li><p>2、Servlet 就 JavaWeb 三大组件之一。</p><p>​       三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。 </p></li><li><p>3、Servlet 是运行在服务器上的一个小型 java 程序</p><p>​       它可以接收客户端发送过来的请求，并响应数据给客户端。</p></li></ul><h3 id="手动实现-Servlet-程序"><a href="#手动实现-Servlet-程序" class="headerlink" title="手动实现 Servlet 程序"></a>手动实现 Servlet 程序</h3><ul><li><p>1、编写一个类去实现 Servlet 接口</p></li><li><p>2、实现 service 方法，处理请求，并响应数据</p></li><li><p>3、到 web.xml 中去配置 servlet 程序的访问地址</p></li><li><p>Servlet 程序的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javaWebStudy.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * service 方法是专门用来处理请求和响应的，只要访问该类，就会执行该方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello Servlet 被访问了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- servlet 标签给Tomcat配置Servlet程序 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet-name 标签用来给Servlet程序起别名（一般是类名）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet-class 是Servlet程序的全类名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.javaWebStudy.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- servlet-mapping 标签给servlet程序配置访问地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet-name标签的作用是告诉服务器，当前配置的地址给哪个Serclet程序使用 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- url-pattern标签配置访问地址</span><br><span class="hljs-comment">            / 斜杠在服务器解析的时候表示地址为 http://ip:port/工程路径</span><br><span class="hljs-comment">            /hello 表示地址为 http://ip:port/工程路径/hello</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li><p>常见的错误 1：url-pattern 中配置的路径没有以斜杠打头：</p> <img src="image-20221030094353203.png" alt="image-20221030094353203" style="zoom: 50%;" /></li><li><p>常见错误 2：servlet-name 配置的值不存在：（要和前面起别名时一致）</p> <img src="image-20221030094456238.png" alt="image-20221030094456238" style="zoom:50%;" /></li><li><p>常见错误 3：servlet-class 标签的全类名配置错误：（idea自动生成，不会出错）</p> <img src="image-20221030094525077.png" alt="image-20221030094525077" style="zoom:50%;" /></li></ul><h4 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h4><p><img src="/2022/10/03/JavaWebNote/image-20221030095342744.png" alt="image-20221030095342744"></p><h4 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h4><ul><li>1、执行 Servlet 构造器方法 </li><li>2、执行 init 初始化方法 <ul><li>第一、二步，是在第一次访问的时候创建 Servlet 程序会调用。</li></ul></li><li>3、执行 service 方法 <ul><li>第三步，每次访问都会调用。</li></ul></li><li>4、执行 destroy 销毁方法 <ul><li>第四步，在 web 工程停止的时候调用。</li></ul></li></ul><h4 id="GET-和-POST-请求的分发处理"><a href="#GET-和-POST-请求的分发处理" class="headerlink" title="GET 和 POST 请求的分发处理"></a>GET 和 POST 请求的分发处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello Servlet 被访问了&quot;</span>);<br>        <span class="hljs-comment">//类型转换（因为HttpServletRequest有getMethod()方法）</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br><br>        <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;GET&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>            <span class="hljs-comment">//GET方法需要做的事可以封装成函数，然后在这里调用</span><br>            doGet();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;POST&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>            <span class="hljs-comment">//POST方法需要做的事可以封装成函数，然后在这里调用</span><br>            doPost();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doGet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doPost&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过继承-HttpServlet-实现-Servlet-程序"><a href="#通过继承-HttpServlet-实现-Servlet-程序" class="headerlink" title="通过继承 HttpServlet 实现 Servlet 程序"></a>通过继承 HttpServlet 实现 Servlet 程序</h4><p><strong>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。</strong> </p><ul><li><p>1、编写一个类去继承 HttpServlet 类 </p></li><li><p>2、根据业务需要重写 doGet 或 doPost 方法 </p> <img src="image-20221030104054342.png" alt="image-20221030104054342" style="zoom: 50%;" /></li><li><p>3、到 web.xml 中的配置 Servlet 程序的访问地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.javaWebStudy.servlet.HelloServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//doGet()在get请求的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;HelloServlet doGet&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//doPost()在post请求的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;HelloServlet doPost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="使用-IDEA-创建-Servlet-程序"><a href="#使用-IDEA-创建-Servlet-程序" class="headerlink" title="使用 IDEA 创建 Servlet 程序"></a>使用 IDEA 创建 Servlet 程序</h4><p>注意：2022版的 IDEA 好像没有这个功能</p><ul><li><p>菜单：new -&gt;Servlet 程序</p> <img src="image-20221030105212354.png" alt="image-20221030105212354" style="zoom:50%;" /></li><li><p>配置 Servlet 的信息</p> <img src="image-20221030105334396.png" alt="image-20221030105334396" style="zoom:50%;" /></li></ul><h4 id="Servlet-类的继承体系"><a href="#Servlet-类的继承体系" class="headerlink" title="Servlet 类的继承体系"></a>Servlet 类的继承体系</h4><p><img src="/2022/10/03/JavaWebNote/image-20221030105855998.png" alt="image-20221030105855998"></p><h3 id="ServletConfig-类"><a href="#ServletConfig-类" class="headerlink" title="ServletConfig 类"></a>ServletConfig 类</h3><ul><li><p>ServletConfig 类从类名上来看，就知道是 Servlet 程序的配置信息类。 </p></li><li><p>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。 </p></li><li><p>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的 ServletConfig 对象。</p></li><li><p>只能得到自己的 ServletConfig 对象，不能的其他Servlet 程序的 ServletConfig 对象。</p></li><li><p>ServletConfig 类的三大作用：</p><ul><li>1、可以获取 Servlet 程序的别名 servlet-name 的值 </li><li>2、获取初始化参数 init-param </li><li>3、获取 ServletContext 对象</li></ul></li><li><p>案例代码：</p><ul><li><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet 标签给Tomcat配置Servlet程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- servlet-name 标签用来给Servlet程序起别名（一般是类名）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- servlet-class 是Servlet程序的全类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.javaWebStudy.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- init-param 是初始化参数，可以配置多组 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- param-name 是参数名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- param-value 是参数值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- servlet-mapping 标签给servlet程序配置访问地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- servlet-name标签的作用是告诉服务器，当前配置的地址给哪个Serclet程序使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- url-pattern标签配置访问地址</span><br><span class="hljs-comment">            / 斜杠在服务器解析的时候表示地址为 http://ip:port/工程路径</span><br><span class="hljs-comment">            /hello 表示地址为 http://ip:port/工程路径/hello</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Servlet 中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">//super.init(config); //实现接口的方式没有该操作</span><br>        System.out.println(<span class="hljs-string">&quot;init初始化方法&quot;</span>);<br>        <span class="hljs-comment">//- 1、可以获取 Servlet 程序的别名 servlet-name 的值</span><br>        System.out.println(<span class="hljs-string">&quot;HelloServlet程序的别名是：&quot;</span>+servletConfig.getServletName());<br>        <span class="hljs-comment">//- 2、获取初始化参数 init-param</span><br>        System.out.println(<span class="hljs-string">&quot;初始化参数username的值为：&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;初始化参数url的值为：&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));<br>        <span class="hljs-comment">//- 3、获取 ServletContext 对象</span><br>        System.out.println(<span class="hljs-string">&quot;ServletContext 对象为：&quot;</span>+servletConfig.getServletContext());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><img src="image-20221030113608300.png" alt="image-20221030113608300" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">//重写init方法里面一定要调用父类的init(ServletConfig config)方法</span><br>        <span class="hljs-built_in">super</span>.init(config);<br>    &#125;<br><br>    <span class="hljs-comment">//doGet()在get请求的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;HelloServlet doGet&quot;</span>);<br>        <span class="hljs-type">ServletConfig</span> <span class="hljs-variable">servletConfig</span> <span class="hljs-operator">=</span> getServletConfig();<br>        <span class="hljs-comment">//- 1、可以获取 Servlet 程序的别名 servlet-name 的值</span><br>        System.out.println(<span class="hljs-string">&quot;HelloServlet程序的别名是：&quot;</span>+servletConfig.getServletName());<br>        <span class="hljs-comment">//- 2、获取初始化参数 init-param</span><br>        System.out.println(<span class="hljs-string">&quot;初始化参数username的值为：&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;初始化参数url的值为：&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));<br>        <span class="hljs-comment">//- 3、获取 ServletContext 对象</span><br>        System.out.println(<span class="hljs-string">&quot;ServletContext 对象：&quot;</span>+servletConfig.getServletContext());<br>    &#125;<br>    <span class="hljs-comment">//doPost()在post请求的时候调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;HelloServlet doPost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="ServletContext-类"><a href="#ServletContext-类" class="headerlink" title="ServletContext 类"></a>ServletContext 类</h3><h4 id="什么是-ServletContext"><a href="#什么是-ServletContext" class="headerlink" title="什么是 ServletContext"></a>什么是 ServletContext</h4><ul><li><p>1、ServletContext 是一个接口，它表示 Servlet 上下文对象</p></li><li><p>2、<strong>一个 web 工程，只有一个 ServletContext 对象实例。</strong></p></li><li><p>3、ServletContext 对象是一个<strong>域对象</strong>。</p></li><li><p>4、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</p></li><li><p>什么是域对象?</p><ul><li><p>域对象，是<strong>可以像 Map 一样存取数据</strong>的对象，叫域对象。</p></li><li><p>这里的<strong>域指的是存取数据的操作范围</strong>，整个 web 工程。</p><p>​存数据 取数据 删除数据<br>Map put() get() remove()<br>域对象 setAttribute() getAttribute() removeAttribute();</p></li></ul></li></ul><h4 id="ServletContext-类的四个作用"><a href="#ServletContext-类的四个作用" class="headerlink" title="ServletContext 类的四个作用"></a>ServletContext 类的四个作用</h4><ul><li><p>1、获取 web.xml 中配置的上下文参数 context-param</p></li><li><p>2、获取当前的工程路径，格式: &#x2F;工程路径</p></li><li><p>3、获取工程部署后在服务器硬盘上的绝对路径</p></li><li><p>4、像 Map 一样存取数据</p></li><li><p>前三点的案例：</p><ul><li><p>ServletContext 演示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//- 1、获取 web.xml 中配置的上下文参数 context-param</span><br>        <span class="hljs-comment">//     注意：该方法不能得到 init-param 中的内容</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletConfig().getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> context.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数username的值是：&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数password的值是：&quot;</span>+context.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">//- 2、获取当前的工程路径，格式: /工程路径</span><br>        System.out.println(<span class="hljs-string">&quot;当前工程路径：&quot;</span>+context.getContextPath());<br>        <span class="hljs-comment">//- 3、获取工程部署后在服务器硬盘上的绝对路径</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  / 斜杆被服务器解析为地址：http://ip:port/工程名/</span><br><span class="hljs-comment">         *    映射到IDEA代码的web目录</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;工程部署的路径是：&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程下css目录的绝对路径是：&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/css&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程下imgs目录的pic.jpg的绝对路径是：&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/imgs/pic.jpg&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml 中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- context-param是上下文参数（它属于整个web工程），可配置多组 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>context<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ContextServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.javaWebStudy.servlet.ContextServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ContextServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/contextServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>案例：ServletContext 像 Map 一样存取数据</p><ul><li><p>ContextServlet1 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取ServletContext对象</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;保存之前：Context1 中获取域数据key1的值：&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        context.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;保存之后：Context1 中获取域数据key1的值：&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ContextServlet2 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取ServletContext对象</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;保存之前：Context2 中获取域数据key1的值：&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Http-协议"><a href="#Http-协议" class="headerlink" title="Http 协议"></a>Http 协议</h2><h3 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h3><ul><li>什么是协议?<ul><li>协议是指双方，或多方，相互约定好，大家都需要遵守的规则，叫协议。</li><li>所谓 HTTP 协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议。</li><li>HTTP 协议中的数据又叫报文。</li></ul></li></ul><h3 id="请求的-HTTP-协议格式"><a href="#请求的-HTTP-协议格式" class="headerlink" title="请求的 HTTP 协议格式"></a>请求的 HTTP 协议格式</h3><p>客户端给服务器发送数据叫<strong>请求</strong>。服务器给客户端回传数据叫<strong>响应</strong>。</p><p>请求又分为 <strong>GET 请求</strong>，和 <strong>POST 请求</strong>两种：</p><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h4><ul><li>1、请求行<ul><li>(1) 请求的方式 GET</li><li>(2) 请求的资源路径                  [+?+请求参数]</li><li>(3) 请求的协议的版本号          HTTP&#x2F;1.1</li></ul></li><li>2、请求头<ul><li><strong>key : value</strong> 组成 <strong>不同的键值对，表示不同的含义</strong>。</li></ul></li></ul><p><img src="/2022/10/03/JavaWebNote/image-20221030172733704.png" alt="image-20221030172733704"></p><h4 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h4><ul><li>1、请求行<ul><li>(1) 请求的方式 POST</li><li>(2) 请求的资源路径                 [+?+请求参数]</li><li>(3) 请求的协议的版本号         HTTP&#x2F;1.1</li></ul></li><li>2、请求头<ul><li><ol><li>key : value 不同的请求头，有不同的含义</li></ol></li></ul></li><li>请求头和请求体之间有一空行</li><li>3、请求体 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 就是发送给服务器的数据</li></ul><p><img src="/2022/10/03/JavaWebNote/image-20221030173417744.png" alt="image-20221030173417744"></p><h4 id="常用请求头的说明"><a href="#常用请求头的说明" class="headerlink" title="常用请求头的说明"></a>常用请求头的说明</h4><ul><li>Accept:     表示客户端可以接收的数据类型</li><li>Accpet-Languege:     表示客户端可以接收的语言类型</li><li>User-Agent:     表示客户端浏览器的信息</li><li>Host：   表示请求时的服务器 ip 和端口号</li></ul><h4 id="哪些是-GET-请求，哪些是-POST-请求"><a href="#哪些是-GET-请求，哪些是-POST-请求" class="headerlink" title="哪些是 GET 请求，哪些是 POST 请求"></a>哪些是 GET 请求，哪些是 POST 请求</h4><ul><li><strong>GET 请求：</strong><ul><li>1、form 标签 method&#x3D;get</li><li>2、a 标签</li><li>3、link 标签引入 css</li><li>4、Script 标签引入 js 文件</li><li>5、img 标签引入图片</li><li>6、iframe 引入 html 页面</li><li>7、在浏览器地址栏中输入地址后敲回车</li></ul></li><li><strong>POST 请求：</strong><ul><li>8、form 标签 method&#x3D;post</li></ul></li></ul><h4 id="响应的-HTTP-协议格式"><a href="#响应的-HTTP-协议格式" class="headerlink" title="响应的 HTTP 协议格式"></a>响应的 HTTP 协议格式</h4><ul><li>1、响应行<ul><li>(1) 响应的协议和版本号</li><li>(2) 响应状态码</li><li>(3) 响应状态描述符</li></ul></li><li>2、响应头<ul><li>(1) key : value      不同的响应头，有其不同含义</li></ul></li><li><em>空行</em></li><li>3、响应体 —-&gt;&gt;&gt; 就是回传给客户端的数据</li></ul><p><img src="/2022/10/03/JavaWebNote/image-20221030204645742.png" alt="image-20221030204645742"></p><h4 id="常用的响应码说明"><a href="#常用的响应码说明" class="headerlink" title="常用的响应码说明"></a>常用的响应码说明</h4><ul><li>200 表示请求成功</li><li>302 表示请求重定向（明天讲）</li><li>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）</li><li>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</li></ul><h4 id="MIME-类型说明-类型说明"><a href="#MIME-类型说明-类型说明" class="headerlink" title="MIME 类型说明 类型说明"></a>MIME 类型说明 类型说明</h4><p><strong>MIME 是 HTTP 协议中数据类型。</strong></p><p>MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。</p><p>MIME 类型的格式是“大类型&#x2F;小类型”，并与某一种文件的扩展名相对应。</p><ul><li><p>常见的 MIME 类型：</p> <img src="image-20221030205637753.png" alt="image-20221030205637753" style="zoom:80%;" /></li></ul><p>谷歌浏览器如何查看 HTTP 协议：</p> <img src="image-20221030205812087.png" alt="image-20221030205812087" style="zoom:80%;" /><h2 id="HttpServletRequest-类"><a href="#HttpServletRequest-类" class="headerlink" title="HttpServletRequest 类"></a>HttpServletRequest 类</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到 Request 对象中。</p><p>然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们<strong>可以通过 HttpServletRequest 对象，获取到所有请求的信息</strong>。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>getRequestURI() 获取请求的资源路径</p></li><li><p>getRequestURL()                        获取请求的统一资源定位符（绝对路径）</p></li><li><p>getRemoteHost()                        获取客户端的 ip 地址</p></li><li><p>getHeader()                                 获取请求头</p></li><li><p>getParameter()                           获取请求的参数</p></li><li><p>getParameterValues()                获取请求的参数（多个值的时候使用）</p></li><li><p>getMethod()                                获取请求的方式 GET 或 POST</p></li><li><p>setAttribute(key, value)             设置域数据</p></li><li><p>getAttribute(key)                         获取域数据</p></li><li><p>getRequestDispatcher()            获取请求转发对象</p></li><li><p>常用 API 示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestAPIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//- getRequestURI() 获取请求的资源路径</span><br>        System.out.println(<span class="hljs-string">&quot;URI =&gt; &quot;</span>+req.getRequestURI());<br>        <span class="hljs-comment">//- getRequestURL() 获取请求的统一资源定位符（绝对路径）</span><br>        System.out.println(<span class="hljs-string">&quot;URL =&gt; &quot;</span>+req.getRequestURL());<br>        <span class="hljs-comment">//- getRemoteHost() 获取客户端的 ip 地址</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 在IDEA中，使用localhost访问时，得到的客户端ip地址时 ==&gt;&gt; 0:0:0:0:0:0:0:1（ipv6）</span><br><span class="hljs-comment">         * 在IDEA中，使用127.0.0.1访问时，得到的客户端ip地址时 ==&gt;&gt; 127.0.0.1</span><br><span class="hljs-comment">         * 在IDEA中，使用 真实ip 访问时，得到的客户端ip地址时 ==&gt;&gt; 真实的客户端ip地址</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;客户端 ip地址 =&gt; &quot;</span>+req.getRemoteHost());<br>        <span class="hljs-comment">//- getHeader() 获取请求头</span><br>        System.out.println(<span class="hljs-string">&quot;请求头 User-Agent =&gt; &quot;</span>+req.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>));<br>        <span class="hljs-comment">//- getMethod() 获取请求的方式 GET 或 POST</span><br>        System.out.println(<span class="hljs-string">&quot;请求的方式 =&gt; &quot;</span>+req.getMethod());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="如何获取请求参数"><a href="#如何获取请求参数" class="headerlink" title="如何获取请求参数"></a>如何获取请求参数</h3><ul><li><p>表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/07_servlet/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        兴趣爱好：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>C++<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>Java<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>    IOException &#123;<br>        <span class="hljs-comment">// 获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String[] hobby = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot; 用户名：&quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot; 密码：&quot;</span> + password);<br>        System.out.println(<span class="hljs-string">&quot; 兴趣爱好：&quot;</span> + Arrays.asList(hobby));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="POST-中文乱码解决"><a href="#POST-中文乱码解决" class="headerlink" title="POST 中文乱码解决"></a>POST 中文乱码解决</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-comment">// 设置请求体的字符集为 UTF-8 ，从而解决 post 请求的中文乱码问题</span><br>    <span class="hljs-comment">//需要在获取请求参数之前调用才有效</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <br>    System.out.println(<span class="hljs-string">&quot;-------------doPost------------&quot;</span>);<br>    <span class="hljs-comment">// 获取请求参数</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    String[] hobby = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot; 用户名：&quot;</span> + username);<br>    System.out.println(<span class="hljs-string">&quot; 密码：&quot;</span> + password);<br>    System.out.println(<span class="hljs-string">&quot; 兴趣爱好：&quot;</span> + Arrays.asList(hobby));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h2><p>请求的转发是指，服务器收到请求后，从一个资源跳转到另一个资源的操作叫请求转发。</p><p><img src="/2022/10/03/JavaWebNote/image-20221030221835187.png" alt="image-20221030221835187"></p><ul><li><p><strong>请求转发的特点：</strong></p><ul><li>1、浏览器地址栏没有变化</li><li>2、他们是一次请求</li><li>3、他们共享Request域中的数据</li><li>4、可以转发到WEB-INF目录下（浏览器不能直接通过地址访问WEB-INF目录）</li><li>5、不可以访问工程以外的资源</li></ul></li><li><p>示例代码：</p><ul><li><p>Servlet1 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>    IOException &#123;<br>        <span class="hljs-comment">// 获取请求的参数（办事的材料）查看</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在 在 Servlet1 （柜台 1 ）中查看参数（材料）：&quot;</span> + username);<br>        <span class="hljs-comment">// 给材料 盖一个章，并传递到 Servlet2 （柜台 2 ）去查看</span><br>        req.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot; 柜台 1 的章&quot;</span>);<br>        <span class="hljs-comment">// 问路： Servlet2 （柜台 2 ）怎么走</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 请求转发必须要以斜杠打头， / 斜杠表示地址为： http://ip:port/ 工程名 / , 映射到 IDEA 代码的 web 目录</span><br><span class="hljs-comment">&lt;br/&gt;</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/servlet2&quot;</span>);<br>        <span class="hljs-comment">// RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;http://www.baidu.com&quot;);</span><br>        <span class="hljs-comment">// 走向 Sevlet2 （柜台 2 ）</span><br>        requestDispatcher.forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Servlet2 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>    IOException &#123;<br>        <span class="hljs-comment">// 获取请求的参数（办事的材料）查看</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在 在 Servlet2 （柜台 2 ）中查看参数（材料）：&quot;</span> + username);<br>        <span class="hljs-comment">// 查看 柜台 1 是否有盖章</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> req.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot; 柜台 1 是否有章：&quot;</span> + key1);<br>        <span class="hljs-comment">// 处理自己的业务</span><br>        System.out.println(<span class="hljs-string">&quot;Servlet2 务 处理自己的业务 &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="base-标签的作用"><a href="#base-标签的作用" class="headerlink" title="base 标签的作用"></a>base 标签的作用</h2><p><strong>base标签可以设置当前页面中所有相对路径工作时，参照哪个路径来进行跳转</strong></p> <img src="image-20221030225950922.png" alt="image-20221030225950922" style="zoom: 80%;" /> <img src="image-20221030230007804.png" alt="image-20221030230007804" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- c.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- base 标签设置页面相对路径工作时参照的地址</span><br><span class="hljs-comment"> href 属性就是参数的地址值 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 补充说明 c.html 可省略 </span><br><span class="hljs-comment">&lt;base href=&quot;http://localhost:8080/study_07_servlet/a/b/&quot;&gt;</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/study_07_servlet/a/b/c.html&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        这是 a 下的 b 下的 c.html 页面<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web-中的相对路径和绝对路径"><a href="#Web-中的相对路径和绝对路径" class="headerlink" title="Web 中的相对路径和绝对路径"></a>Web 中的相对路径和绝对路径</h2><ul><li>在 javaWeb 中，路径分为相对路径和绝对路径两种：</li><li>相对路径是：<ul><li>. 表示当前目录</li><li>..                            表示上一级目录</li><li>资源名                   表示当前目录&#x2F;资源名</li></ul></li><li>绝对路径：<ul><li><a href="http://ip:port/工程路径/资源路径">http://ip:port/工程路径/资源路径</a></li></ul></li><li><strong>在JavaWeb实际开发中，路径都使用绝对路径，而不简单的使用相对路径</strong>。<ul><li>1、绝对路径</li><li>2、base + 相对</li></ul></li></ul><h2 id="web中-x2F-斜杠的不同意义"><a href="#web中-x2F-斜杠的不同意义" class="headerlink" title="web中 &#x2F; 斜杠的不同意义"></a>web中 &#x2F; 斜杠的不同意义</h2><ul><li><p>在 web 中 &#x2F; 斜杠 是一种<strong>绝对路径</strong>。</p></li><li><p>&#x2F; 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>斜杠<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>&#x2F; 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a>   (Web目录下)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">servletContext.getRealPath(“/”);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getRequestDispatcher(“/”);<br></code></pre></td></tr></table></figure></li><li><p>特殊情况： response.sendRediect(“&#x2F;”);       把斜杠发送给浏览器解析。得到 <a href="http://ip:port/">http://ip:port/</a></p></li></ul><h2 id="HttpServletResponse-类"><a href="#HttpServletResponse-类" class="headerlink" title="HttpServletResponse 类"></a>HttpServletResponse 类</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传递给 Servlet 程序去使用。</p><p>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</p><h3 id="两个输出流的说明"><a href="#两个输出流的说明" class="headerlink" title="两个输出流的说明"></a>两个输出流的说明</h3><ul><li><p>字节流 getOutputStream();   常用于下载（传递二进制数据）</p></li><li><p>字符流         getWriter();                          常用于回传字符串（常用）</p></li><li><p>注意：两个流同时只能使用一个，使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p> <img src="image-20221031215943947.png" alt="image-20221031215943947" style="zoom:80%;" /></li></ul><h3 id="如何往客户端回传数据"><a href="#如何往客户端回传数据" class="headerlink" title="如何往客户端回传数据"></a>如何往客户端回传数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>    IOException &#123;<br>        <span class="hljs-comment">// 要求 ： 往客户端回传 字符串 数据。</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;response&#x27;s content!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h3><ul><li><p>解决响应中文乱码方案一（不推荐使用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置服务器字符集为 UTF-8</span><br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>解决响应中文乱码方案二（推荐）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span><br><span class="hljs-comment">// 此方法一定要在获取流对象之前调用才有效</span><br>resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(resp.getCharacterEncoding());  <span class="hljs-comment">//默认ISO-8859-1</span><br><br>        <span class="hljs-comment">//设置服务器字符集为UTF-8</span><br><span class="hljs-comment">//        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><br>        <span class="hljs-comment">//通过响应头，设置浏览器也是用UTF-8字符集</span><br><span class="hljs-comment">//        resp.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;);</span><br><br>        <span class="hljs-comment">//setContentType()方法 会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头</span><br>        <span class="hljs-comment">//该方法一定要在获取流对象之前调用才有效</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(resp.getCharacterEncoding());<br><br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;响应信息&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><h4 id="请求重定向的理解"><a href="#请求重定向的理解" class="headerlink" title="请求重定向的理解"></a>请求重定向的理解</h4><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）</p><img src="image-20221031223248480.png" alt="image-20221031223248480" style="zoom:80%;" /><h4 id="请求重定向的特点"><a href="#请求重定向的特点" class="headerlink" title="请求重定向的特点"></a>请求重定向的特点</h4><ul><li><p>1、浏览器地址栏会发生变化</p></li><li><p>2、两次请求</p></li><li><p>3、不共享Request域中数据</p><p>（Tomcat每次收到请求，就会把请求过来的数据解析好，封装成为一个req对象）</p></li><li><p>4、不能访问WEB-INF下的资源  (WEB-INF不能直接通过浏览器访问)</p></li><li><p>5、可以访问工程外的资源</p></li><li><p>请求重定向的第一种方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置响应状态码 302 ，表示重定向，（已搬迁）</span><br>resp.setStatus(<span class="hljs-number">302</span>);<br><span class="hljs-comment">// 设置响应头，说明 新的地址在哪里</span><br>resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>请求重定向的第二种方案（<strong>推荐使用</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="JSP介绍"><a href="#JSP介绍" class="headerlink" title="JSP介绍"></a>JSP介绍</h3><ul><li><p>jsp 的全称是 java server pages。 Java 的服务器页面。</p></li><li><p>jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据，因为 Servlet 程序回传 html 页面数据是一件非常繁琐的事情，开发成本和维护成本都极高。</p></li><li><p>jsp 简单小结：</p><ul><li><p>1、如何创建 jsp 的页面?</p>  <img src="image-20221103161912141.png" alt="image-20221103161912141" style="zoom:80%;" /></li><li><p>2、jsp 如何访问：</p></li><li><p>jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样。<br>比如：<br>在 web 目录下有如下的文件：<br>web 目录<br>a.html 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a><br>b.jsp 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/b.jsp">http://ip:port/工程路径/b.jsp</a></p></li></ul></li></ul><h3 id="jsp-的本质"><a href="#jsp-的本质" class="headerlink" title="jsp 的本质"></a>jsp 的本质</h3><ul><li><p><strong>jsp 页面本质上是一个 Servlet 程序</strong>。</p></li><li><p>当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容是：</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103162329016.png" alt="image-20221103162329016"></p></li><li><p>我们跟踪原代码发现，HttpJspBase 类，它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接继承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序。</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103162436135.png" alt="image-20221103162436135"></p></li><li><p>总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。</p></li><li><p>观察翻译出来的 Servlet 程序的源代码，不难发现：其底层实现，也是通过输出流 把 html 页面数据回传给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span></span><br><span class="hljs-params">javax.servlet.http.HttpServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, javax.servlet.ServletException &#123;<br>    <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">String</span> <span class="hljs-variable">_jspx_method</span> <span class="hljs-operator">=</span> request.getMethod();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)<br>            &amp;&amp; !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSPs only permit GET POST or</span><br><span class="hljs-string">                HEAD&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<br>    javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<br>    <span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<br>    javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>    javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">_jspx_out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    javax.servlet.jsp.<span class="hljs-type">PageContext</span> <span class="hljs-variable">_jspx_page_context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response,<br>                <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>        _jspx_page_context = pageContext;<br>        application = pageContext.getServletContext();<br>        config = pageContext.getServletConfig();<br>        session = pageContext.getSession();<br>        out = pageContext.getOut();<br>        _jspx_out = out;<br>        out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;head&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot; &lt;title&gt;Title&lt;/title&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;/head&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;body&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot; a.jsp 页面\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;/body&gt;\r\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (java.lang.Throwable t) &#123;<br>        <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> javax.servlet.jsp.SkipPageException))&#123;<br>            out = _jspx_out;<br>            <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br>                        out.flush();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        out.clearBuffer();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;<br>            <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-literal">null</span>) _jspx_page_context.handlePageException(t);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(t);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        _jspxFactory.releasePageContext(_jspx_page_context);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="jsp-的三种语法"><a href="#jsp-的三种语法" class="headerlink" title="jsp 的三种语法"></a>jsp 的三种语法</h3><h4 id="jap-头部的-page-指令"><a href="#jap-头部的-page-指令" class="headerlink" title="jap 头部的 page 指令"></a>jap 头部的 page 指令</h4><p>jap 的 page 指令可以修改 jap 页面中一些重要的属性或者行为。</p><p>说明：一般不推荐修改。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ul><li><p>1、language 属性 </p><p>​表示 jsp 翻译后是什么语言文件。暂时只支持 java。</p></li><li><p>2、contentType 属性 </p><p>​表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值</p></li><li><p>3、pageEncoding 属性 </p><p>​表示当前 jsp 页面文件本身的字符集。</p></li><li><p>4、import 属性 </p><p>​跟 java 源代码中一样。用于导包，导类。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;两个属性是给 out 输出流使用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></li><li><p>5、autoFlush 属性 </p><p>​设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。</p></li><li><p>6、buffer 属性 </p><p>​设置 out 缓冲区的大小。默认是 8kb</p><p>缓冲区溢出错误：</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103183549184.png" alt="image-20221103183549184"></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;两个属性是给 out 输出流使用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></li><li><p>7、errorPage 属性 </p><p>​设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。</p><!--errorPage 表示错误后自动跳转去的路径 <br/>这个路径一般都是以斜杠打头，它表示请求地址为 http://ip:port/工程路径/映射到代码的 Web 目录--></li><li><p>8、isErrorPage 属性 </p><p>​设置当前 jsp 页面是否是错误信息页面，默认是 false。如果是 true 可以获取异常信息。</p></li><li><p>9、session 属性 </p><p>​设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。</p></li><li><p>10、extends 属性 </p><p>​设置 jsp 翻译出来的 java 类默认继承谁。</p></li></ul><h4 id="jsp-中的常用脚本"><a href="#jsp-中的常用脚本" class="headerlink" title="jsp 中的常用脚本"></a>jsp 中的常用脚本</h4><h5 id="声明脚本（极少使用）"><a href="#声明脚本（极少使用）" class="headerlink" title="声明脚本（极少使用）"></a>声明脚本（极少使用）</h5><ul><li><p>声明脚本的格式是：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%! 声明 java 代码 %&gt;<br></code></pre></td></tr></table></figure></li><li><p>作用：可以给 jsp 翻译出来的 java 类定义属性和方法，甚至是静态代码块、内部类等。</p></li><li><p>练习：<br>1、声明类属性<br>2、声明 static 静态代码块<br>3、声明类方法<br>4、声明内部类</p></li><li><p>代码示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<span class="hljs-number">1</span> 、声明类属性 --%&gt;<br>&lt;%!<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String,Object&gt; map;<br>%&gt;<br>&lt;%--<span class="hljs-number">2</span> 、声明 <span class="hljs-keyword">static</span> 静态代码块 --%&gt;<br>&lt;%!<br>    <span class="hljs-keyword">static</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>&#125;<br>%&gt;<br>&lt;%--<span class="hljs-number">3</span> 、声明类方法 --%&gt;<br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>&#125;<br>%&gt;<br>&lt;%--<span class="hljs-number">4</span> 、声明内部类 --%&gt;<br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">abc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure></li><li><p>声明脚本代码翻译对照：</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103223305270.png" alt="image-20221103223305270"></p></li></ul><h5 id="表达式脚本（常用）"><a href="#表达式脚本（常用）" class="headerlink" title="表达式脚本（常用）"></a>表达式脚本（常用）</h5><ul><li><p>表达式脚本的格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=表达式%&gt;<br></code></pre></td></tr></table></figure></li><li><p>表达式脚本的作用：在 jsp 页面上输出数据</p></li><li><p>表达式脚本的特点：</p><ul><li><p>所有的表达式脚本都会被翻译到 _jspService() 方法中</p></li><li><p>表达式脚本都会被翻译成为 out.print() 输出到页面上</p></li><li><p>由于表达式脚本翻译的内容都在 _jspService() 方法中，所以 <strong>_jspService()方法中的对象都可以直接使用</strong>。</p></li><li><p><strong>表达式脚本中的表达式不能以分号结束</strong>。</p></li><li><p>翻译对照：</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103224325787.png" alt="image-20221103224325787"></p></li></ul></li><li><p>示例代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=<span class="hljs-number">12</span> %&gt; &lt;br&gt;<br>&lt;%=<span class="hljs-number">12.12</span> %&gt; &lt;br&gt;<br>&lt;%=<span class="hljs-string">&quot; 我是字符串&quot;</span> %&gt; &lt;br&gt;<br>&lt;%=map%&gt; &lt;br&gt;<br>&lt;%=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h5><ul><li><p>代码脚本的格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>java 语句<br>%&gt;<br></code></pre></td></tr></table></figure></li><li><p>代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。</p></li><li><p>代码脚本的特点是：</p><ul><li>代码脚本翻译之后都在 _jspService 方法中</li><li>代码脚本由于翻译到 _jspService() 方法中，所以在 _jspService() 方法中的现有对象都可以直接使用。</li><li>还<strong>可以由多个代码脚本块组合完成一个完整的 java 语句</strong>。</li><li>代码脚本还<strong>可以和表达式脚本一起组合使用</strong>，在 jsp 页面上输出数据</li></ul></li><li><p>翻译之后的对比</p><p> <img src="/2022/10/03/JavaWebNote/image-20221103224905402.png" alt="image-20221103224905402"></p></li><li><p>示例代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>&lt;%-- 练习： --%&gt;<br>    &lt;%--<span class="hljs-number">1.</span> 代码脚本 ----<span class="hljs-keyword">if</span> 语句 --%&gt;<br>    &lt;%<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span> ;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>) &#123;<br>    %&gt;<br>    &lt;h1&gt;国哥好帅&lt;/h1&gt;<br>    &lt;%<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    %&gt;<br>    &lt;h1&gt;国哥又骗人了！&lt;/h1&gt;<br>    &lt;%<br>        &#125;<br>    %&gt;<br>    &lt;br&gt;<br>    &lt;%--<span class="hljs-number">2.</span> 代码脚本 ----<span class="hljs-keyword">for</span> 循环语句 --%&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1&quot;</span> cellspacing=<span class="hljs-string">&quot;0&quot;</span>&gt;<br>        &lt;%<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>        %&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;第 &lt;%=j + <span class="hljs-number">1</span>%&gt;行&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;%<br>            &#125;<br>        %&gt;<br>    &lt;/table&gt;<br>    &lt;%--<span class="hljs-number">3.</span> 翻译后 java 文件中 _jspService 方法内的代码都可以写 --%&gt;<br>    &lt;%<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot; 用户名的请求参数值是：&quot;</span> + username);<br>    %&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="jsp-中的三种注释"><a href="#jsp-中的三种注释" class="headerlink" title="jsp 中的三种注释"></a>jsp 中的三种注释</h4><ul><li><p>html 注释</p><p>html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户端。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 这是 html 注释 --&gt;<br></code></pre></td></tr></table></figure></li><li><p>java 注释</p></li></ul><p>  java 注释会被翻译到 java 源代码中。</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-comment">// 单行 java 注释</span><br><span class="hljs-comment">/* 多行 java 注释 */</span><br>%&gt;<br></code></pre></td></tr></table></figure><ul><li>jsp 注释</li></ul><p>  jsp 注释可以注掉 jsp 页面中所有代码。</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- 这是 jsp 注释 --%&gt;<br></code></pre></td></tr></table></figure><h3 id="jsp-九大内置对象"><a href="#jsp-九大内置对象" class="headerlink" title="jsp 九大内置对象"></a>jsp 九大内置对象</h3><p>jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，内部提供的九个对象，叫内置对象。</p><p><img src="/2022/10/03/JavaWebNote/image-20221103234209781.png" alt="image-20221103234209781"></p><ul><li>request 请求对象</li><li>response                                   响应对象</li><li>pageContext                             jsp 的上下文对象</li><li>session                                      会话对象</li><li>application                                ServletContext 对象</li><li>config                                         ServletConfig 对象</li><li>out                                               jsp 输出流对象</li><li>page                                            指向当前jsp的对象</li><li>exception                                   异常对象</li></ul><h3 id="jsp-四大域对象"><a href="#jsp-四大域对象" class="headerlink" title="jsp 四大域对象"></a>jsp 四大域对象</h3><ul><li><p>四个域对象分别是：</p><ul><li><strong>pageContext</strong> （<strong>PageContextImpl</strong> 类）：当前 jsp 页面范围内有效</li><li><strong>request</strong> （<strong>HttpServletRequest</strong> 类）：一次请求内有效</li><li><strong>session</strong> （<strong>HttpSession</strong> 类）：一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器）</li><li><strong>application</strong> （<strong>ServletContext</strong> 类）：整个 web 工程范围内有效（只要 web 工程不停止，数据都在）</li></ul></li><li><p>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。</p></li><li><p>虽然四个域对象都可以存取数据。在使用上它们是有优先顺序的。</p></li><li><p>四个域在使用的时候，优先顺序分别是，它们从小到大的范围的顺序（优先使用范围小的）。</p></li><li><p>pageContext &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; request &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; session &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; application</p></li><li><p>示例代码：</p><ul><li><p>scope.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;h1&gt;scope.jap页面&lt;/h1&gt;<br>    &lt;%<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;pageContext&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;request&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>);<br>    %&gt;<br>    pageContext域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    request域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    session域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    application域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    &lt;%<br>        <span class="hljs-comment">//请求转发</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/scope2.jsp&quot;</span>).forward(request,response);<br>    %&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li><li><p>scope2.jap 页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;h1&gt;scope2.jap页面&lt;/h1&gt;<br>    pageContext域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    request域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    session域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>    application域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="jsp-中的-out-输出和-response-getWriter-输出的区别"><a href="#jsp-中的-out-输出和-response-getWriter-输出的区别" class="headerlink" title="jsp 中的 out 输出和 response.getWriter 输出的区别"></a>jsp 中的 out 输出和 response.getWriter 输出的区别</h3><ul><li><p>response 中表示响应，我们经常用于设置返回给客户端的内容（输出）</p></li><li><p>out 也是给用户做输出使用的。</p></li><li><p><img src="/2022/10/03/JavaWebNote/image-20221104144654925.png" alt="image-20221104144654925"></p></li><li><p>当 jsp 页面中所有代码执行完成后会做以下两个操作：</p><ul><li>1、执行 <strong>out.flush()</strong> 操作，<strong>会把 out 缓冲区中的数据追加写入到 response 缓冲区末尾</strong></li><li>2、会执行 response 的刷新操作，把全部数据写给客户端</li><li>因此，如果 out 和 response.getWriter 混用，会先执行 response 的操作</li></ul></li><li><p>由于 jsp 翻译之后，底层源代码都是使用 out 来进行输出。所以一般情况下，我们在 jsp 页面中统一使用 out 来进行输出，避免打乱页面输出内容的顺序。</p></li><li><p>out.write()   输出字符串没有问题（数值会按acll码值存储到缓存数组再输出）</p></li><li><p>out.print()   输出任意数据都没有问题（会转换成为字符串后调用 write 输出）</p></li><li><p><strong>深入源码，浅出结论：在 jsp 页面中，可以统一使用 out.print()来进行输出</strong></p></li><li><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        out.write(<span class="hljs-string">&quot;out输出1&lt;br/&gt;&quot;</span>);<br>        out.flush();<br>        out.write(<span class="hljs-string">&quot;out输出2&lt;br/&gt;&quot;</span>);<br>        response.getWriter().write(<span class="hljs-string">&quot;response输出1&lt;br/&gt;&quot;</span>);<br>        response.getWriter().write(<span class="hljs-string">&quot;response输出2&lt;br/&gt;&quot;</span>);<br>    %&gt;<br>    &lt;%<br>        out.write(<span class="hljs-number">12</span>);<br>        out.print(<span class="hljs-number">12</span>);<br>    %&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="jsp-的常用标签"><a href="#jsp-的常用标签" class="headerlink" title="jsp 的常用标签"></a>jsp 的常用标签</h3><h4 id="jsp-静态包含"><a href="#jsp-静态包含" class="headerlink" title="jsp 静态包含"></a>jsp 静态包含</h4><p>示例说明：</p><ul><li><p><strong>&lt;%@ include file&#x3D;””%&gt;   就是静态包含</strong></p></li><li><p>file 属性指定你要包含的 jsp 页面的路径</p></li><li><p>地址中第一个斜杠 &#x2F; 表示为 <a href="http://ip:port/工程路径/（映射到代码的">http://ip:port/工程路径/（映射到代码的</a> web 目录）</p></li><li><p>静态包含的特点：</p><ul><li>1 、静态包含不会翻译被包含的 jsp 页面代码（即&lt;%@ include file&#x3D;”…”%&gt;）</li><li>2 、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。</li></ul></li><li><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    主题内容&lt;br/&gt;<br>    &lt;%@ include file=<span class="hljs-string">&quot;/include/footer.jsp&quot;</span>%&gt;  &lt;!--另一个jsp页面--&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="jsp-动态包含"><a href="#jsp-动态包含" class="headerlink" title="jsp 动态包含"></a>jsp 动态包含</h4><p>示例说明：</p><ul><li><p>&lt;jsp:include page&#x3D;””&gt;&lt;&#x2F;jsp:include&gt;   这是动态包含</p></li><li><p>page 属性是指定你要包含的jsp页面的路径</p></li><li><p>动态包含也可以像静态包含一样，把被包含的内容执行输出到包含位置</p></li><li><p>动态包含的特点：</p><ul><li><p>1、动态包含把包含的 jsp 页面也翻译成为 java 代码</p></li><li><p>2、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出</p><p>​JspRuntimeLibrary.include(request, response, “&#x2F;include&#x2F;footer.jsp”, out, false);</p></li><li><p>3、动态包含，还可以传递参数</p></li></ul></li><li><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--main 页面--&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/include/footer.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;bbj&quot;</span>/&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>&lt;/jsp:include&gt;<br><br>&lt;!--footer页面--&gt;<br>&lt;body&gt;<br>    页脚信息&lt;br&gt;<br>    改一下&lt;br&gt;<br>    &lt;%=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li><li><p>动态包含的底层原理：</p> <img src="image-20221104214608243.png" alt="image-20221104214608243" style="zoom: 70%;" /></li></ul><h4 id="jsp-标签-转发"><a href="#jsp-标签-转发" class="headerlink" title="jsp 标签-转发"></a>jsp 标签-转发</h4><p>示例说明：</p><ul><li><p>&lt;jsp:forward page&#x3D;””&gt;&lt;&#x2F;jsp:forward&gt; 是请求转发标签，它的功能就是请求转发</p></li><li><p>page 属性设置请求转发的路径</p></li><li><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;/scope2.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="jsp-练习题"><a href="#jsp-练习题" class="headerlink" title="jsp 练习题"></a>jsp 练习题</h3><p>练习一：在 jsp 页面中输出九九乘法口诀表</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Title&lt;/title&gt;<br>        &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>            table&#123;<br>                width: 650px;<br>            &#125;<br>        &lt;/style&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;%-- 练习一：在 jsp 页面中输出九九乘法口诀表 --%&gt;<br>        &lt;h1 align=<span class="hljs-string">&quot;center&quot;</span>&gt;九九乘法口诀表&lt;/h1&gt;<br>        &lt;table align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>            &lt;%-- 外层循环遍历行 --%&gt;<br>            &lt;% <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123; %&gt;<br>            &lt;tr&gt;<br>                &lt;%-- 内层循环遍历单元格 --%&gt;<br>                &lt;% <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i ; j++) &#123; %&gt;<br>                &lt;td&gt;&lt;%=j + <span class="hljs-string">&quot;x&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + (i*j)%&gt;&lt;/td&gt;<br>                &lt;% &#125; %&gt;<br>            &lt;/tr&gt;<br>            &lt;% &#125; %&gt;<br>        &lt;/table&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>练习二：jsp 输出一个表格，里面有 10 个学生信息。</p><p>Student 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-comment">//... ... </span><br>&#125;<br></code></pre></td></tr></table></figure><p>SearchStudentServlet 程序：</p><p><img src="/2022/10/03/JavaWebNote/image-20221104221644866.png" alt="image-20221104221644866"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchStudentServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取请求的参数</span><br>        <span class="hljs-comment">// 发 sql 语句查询学生的信息</span><br>        <span class="hljs-comment">// 使用 for 循环生成查询到的数据做模拟</span><br>        List&lt;Student&gt; studentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<br>            studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(t,<span class="hljs-string">&quot;name&quot;</span>+t, <span class="hljs-number">18</span>+t,<span class="hljs-string">&quot;phone&quot;</span>+t));<br>        &#125;<br>        <span class="hljs-comment">// 保存查询到的结果（学生信息）到 request 域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;stuList&quot;</span>, studentList);<br>        <span class="hljs-comment">// 请求转发到 showStudent.jsp 页面</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/test/showStudent.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>showStudent.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.atguigu.pojo.Student&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Title&lt;/title&gt;<br>        &lt;style&gt;<br>            table&#123;<br>                border: 1px blue solid;<br>                width: 600px;<br>                border-collapse: collapse;<br>            &#125;<br>            td,th&#123;<br>                border: 1px blue solid;<br>            &#125;<br>        &lt;/style&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;%-- 练习二： jsp 输出一个表格，里面有 <span class="hljs-number">10</span> 个学生信息。 --%&gt;<br>        &lt;%<br>        List&lt;Student&gt; studentList = (List&lt;Student&gt;) request.getAttribute(<span class="hljs-string">&quot;stuList&quot;</span>);<br>        %&gt;<br>        &lt;table&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;编号&lt;/td&gt;<br>                &lt;td&gt;姓名&lt;/td&gt;<br>                &lt;td&gt;年龄&lt;/td&gt;<br>                &lt;td&gt;电话&lt;/td&gt;<br>                &lt;td&gt;操作&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;% <span class="hljs-keyword">for</span> (Student student : studentList) &#123; %&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;%=student.getId()%&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%=student.getAge()%&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%=student.getPhone()%&gt;&lt;/td&gt;<br>                &lt;td&gt;删除、修改&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;% &#125; %&gt;<br>        &lt;/table&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><ul><li><p>1、Listener 监听器它是 JavaWeb 的三大组件之一。</p><p>​JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。</p></li><li><p>2、Listener 它是 JavaEE 的规范，就是接口。</p></li><li><p>3、监听器的作用是，监听某种事物的变化，然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</p></li></ul><h3 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h3><ul><li><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。</p></li><li><p>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。</p></li><li><p>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p></li><li><p>两个方法分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletContextListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 在 ServletContext 对象创建之后马上调用，做初始化</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 在 ServletContext 对象销毁之后调用</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象？</p><p>使用步骤如下：</p><ul><li>1、编写一个类去实现 ServletContextListener</li><li>2、实现其两个回调方法</li><li>3、到 web.xml 中去配置监听器</li></ul><p>示例代码：</p><p>监听器实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServletContextListenerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletContext 对象被创建了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletContext 对象被销毁了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置监听器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.atguigu.listener.MyServletContextListenerImpl<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><h3 id="EL-表达式的介绍"><a href="#EL-表达式的介绍" class="headerlink" title="EL 表达式的介绍"></a>EL 表达式的介绍</h3><ul><li><p>EL 表达式的全称是 Expression Language，是表达式语言。</p></li><li><p>EL 表达式的作用：EL 表达式主要是代替 jsp 页面中的表达式脚本，在 jsp 页面中进行数据的输出。</p></li><li><p>因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁得多。</p></li><li><p><strong>EL 表达式的格式是：${表达式}</strong></p></li><li><p>EL 表达式在输出 null 值的时候，输出的是空串。jsp 表达式脚本输出 null 值的时候，输出的是 null 字符串。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot; 值&quot;</span>);<br>    %&gt;<br>    表达式脚本输出 key 的值是：<br>    &lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;&quot;</span>:request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;&lt;br/&gt;<br>    EL 表达式输出 key 的值是：$&#123;key&#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="EL-表达式搜索域数据的顺序"><a href="#EL-表达式搜索域数据的顺序" class="headerlink" title="EL 表达式搜索域数据的顺序"></a>EL 表达式搜索域数据的顺序</h3><p>EL 表达式主要是在jsp页面中输出数据（主要是输出域对象中的数据）</p><p>当四个域中都有相同的key的数据的时候，EL 表达式会按照<strong>四个域的从小到大的顺序</strong>去进行搜索，找到就输出。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>    <span class="hljs-comment">// 往四个域中都保存了相同的 key 的数据。</span><br>    request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>    application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;pageContext&quot;</span>);<br>    %&gt;<br>    $&#123; key &#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="EL-表达式输出-Bean-的属性"><a href="#EL-表达式输出-Bean-的属性" class="headerlink" title="EL 表达式输出 Bean 的属性"></a>EL 表达式输出 Bean 的属性</h3><p>需求——输出 Person 类中普通属性，数组属性。list 集合属性和 map 集合属性</p><p>注意：EL表达式 获取值时不是直接通过类中属性获取，而是通过类中的 getXXX() 方法获取到对应的属性</p><p>示例代码：</p><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// i. 需求 —— 输出 Person 类中普通属性，数组属性。 list 集合属性和 map 集合属性。</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String[] phones;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; cities;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; map;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jap页面（输出信息）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot; 国哥好帅！&quot;</span>);<br>        person.setPhones(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;18610541354&quot;</span>,<span class="hljs-string">&quot;18688886666&quot;</span>,<span class="hljs-string">&quot;18699998888&quot;</span>&#125;);<br>        List&lt;String&gt; cities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        cities.add(<span class="hljs-string">&quot; 北京&quot;</span>);<br>        cities.add(<span class="hljs-string">&quot; 上海&quot;</span>);<br>        cities.add(<span class="hljs-string">&quot; 深圳&quot;</span>);<br>        person.setCities(cities);<br>        Map&lt;String,Object&gt;map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>        person.setMap(map);<br>        pageContext.setAttribute(<span class="hljs-string">&quot;p&quot;</span>, person);<br>    %&gt;<br>    输出 Person：$&#123; p &#125;&lt;br/&gt;<br>    输出 Person 的 name 属性：$&#123;p.name&#125; &lt;br&gt;<br>    输出 Person 的 pnones 数组属性值：$&#123;p.phones[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>    输出 Person 的 cities 集合中的元素值：$&#123;p.cities&#125; &lt;br&gt;<br>    输出 Person 的 List 集合中个别元素值：$&#123;p.cities[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>    输出 Person 的 Map 集合: $&#123;p.map&#125; &lt;br&gt;<br>    输出 Person 的 Map 集合中某个 key 的值: $&#123;p.map.key3&#125; &lt;br&gt;<br>    输出 Person 的 age 属性：$&#123;p.age&#125; &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="EL-表达式——运算"><a href="#EL-表达式——运算" class="headerlink" title="EL 表达式——运算"></a>EL 表达式——运算</h3><ul><li><p>语法：${ 运算表达式 } </p></li><li><p>EL 表达式支持如下运算符：</p><ul><li><p>1）关系运算</p><p><img src="/2022/10/03/JavaWebNote/image-20221105092644045.png" alt="image-20221105092644045"></p></li><li><p>2）逻辑运算</p><p><img src="/2022/10/03/JavaWebNote/image-20221105092714040.png" alt="image-20221105092714040"></p></li><li><p>3）算数运算</p><p><img src="/2022/10/03/JavaWebNote/image-20221105092836621.png" alt="image-20221105092836621"></p></li></ul></li><li><p>empty 运算</p><ul><li><p>empty 运算可以判断一个数据是否为空，如果为空则输出 true，不为空则输出 false。</p><p>以下几种情况为空：</p></li><li><p>1、值为 null 值的时候，为空</p></li><li><p>2、值为 空串 的时候，为空</p></li><li><p>3、值是 Object 类型数组，长度为零的时候</p></li><li><p>4、list 集合，元素个数为零</p></li><li><p>5、map 集合，元素个数为零</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        <span class="hljs-comment">// 1 、值为 null 值的时候，为空</span><br>        request.setAttribute(<span class="hljs-string">&quot;emptyNull&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 2 、值为空串的时候，为空</span><br>        request.setAttribute(<span class="hljs-string">&quot;emptyStr&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 3 、值是 Object 类型数组，长度为零的时候</span><br>        request.setAttribute(<span class="hljs-string">&quot;emptyArr&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        <span class="hljs-comment">// 4 、 list 集合，元素个数为零</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// list.add(&quot;abc&quot;);</span><br>        request.setAttribute(<span class="hljs-string">&quot;emptyList&quot;</span>, list);<br>        <span class="hljs-comment">// 5 、 map 集合，元素个数为零</span><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        <span class="hljs-comment">// map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br>        request.setAttribute(<span class="hljs-string">&quot;emptyMap&quot;</span>, map);<br>    %&gt;<br>    $&#123; empty emptyNull &#125; &lt;br/&gt;<br>    $&#123; empty emptyStr &#125; &lt;br/&gt;<br>    $&#123; empty emptyArr &#125; &lt;br/&gt;<br>    $&#123; empty emptyList &#125; &lt;br/&gt;<br>    $&#123; empty emptyMap &#125; &lt;br/&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>三元运算</p></li><li><p>表达式 1 ？表达式 2：表达式 3</p></li><li><p>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值。</p></li><li><p>示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123; <span class="hljs-number">12</span> != <span class="hljs-number">12</span> ? <span class="hljs-string">&quot;国哥帅呆&quot;</span> : <span class="hljs-string">&quot;国哥又骗人啦&quot;</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>“ . ” 点运算符 和 [] 中括号运算符</p></li><li><p>. 点运算，可以输出 Bean 对象中某个属性的值。</p></li><li><p>[] 中括号运算，可以输出有序集合中某个元素的值。</p><p>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值。</p></li><li><p>示例代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">&quot;a.a.a&quot;</span>, <span class="hljs-string">&quot;aaaValue&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;b+b+b&quot;</span>, <span class="hljs-string">&quot;bbbValue&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;c-c-c&quot;</span>, <span class="hljs-string">&quot;cccValue&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>, map);<br>    %&gt;<br>    $&#123; map[<span class="hljs-string">&#x27;a.a.a&#x27;</span>] &#125; &lt;br&gt;<br>    $&#123; map[<span class="hljs-string">&quot;b+b+b&quot;</span>] &#125; &lt;br&gt;<br>    $&#123; map[<span class="hljs-string">&#x27;c-c-c&#x27;</span>] &#125; &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="EL-表达式的11个隐含对象"><a href="#EL-表达式的11个隐含对象" class="headerlink" title="EL 表达式的11个隐含对象"></a>EL 表达式的11个隐含对象</h3><p>EL 表达式中的11个隐含对象，是EL表达式自己定义的，可以直接使用</p><table><thead><tr><th align="center">变量</th><th align="center">类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">PageContextImpl</td><td align="center">可以获取jsp中的九大内置对象</td></tr><tr><td align="center">pageScope</td><td align="center">Map&lt;String, Object&gt;</td><td align="center">可以获取 pageContext 域中的数据</td></tr><tr><td align="center">requestScope</td><td align="center">Map&lt;String, Object&gt;</td><td align="center">可以获取 Request 域中的数据</td></tr><tr><td align="center">sessionScope</td><td align="center">Map&lt;String, Object&gt;</td><td align="center">可以获取 Session 域中的数据</td></tr><tr><td align="center">applicationScope</td><td align="center">Map&lt;String, Object&gt;</td><td align="center">可以获取 ServletContext 域中的数据</td></tr><tr><td align="center">param</td><td align="center">Map&lt;String, String&gt;</td><td align="center">可以获取请求参数的值</td></tr><tr><td align="center">paramValues</td><td align="center">Map&lt;String,String[]&gt;</td><td align="center">可以获取请求参数的值，获取多个值的时候使用</td></tr><tr><td align="center">header</td><td align="center">Map&lt;String, String&gt;</td><td align="center">它可以获取请求头的信息</td></tr><tr><td align="center">headerValues</td><td align="center">Map&lt;String,String[]&gt;</td><td align="center">可以获取请求头的信息，它可以获取多个值的情况</td></tr><tr><td align="center">cookie</td><td align="center">Map&lt;String, Cookie&gt;</td><td align="center">它可以获取当前请求的 Cookie 信息</td></tr><tr><td align="center">initParam</td><td align="center">Map&lt;String, String&gt;</td><td align="center">可获取在 web.xml 中配置的&lt;context-param&gt;上下文参数</td></tr></tbody></table><h4 id="EL-获取四个特定域中的属性"><a href="#EL-获取四个特定域中的属性" class="headerlink" title="EL 获取四个特定域中的属性"></a>EL 获取四个特定域中的属性</h4><p>pageScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; pageContext 域<br>requestScope    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Request 域<br>sessionScope    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Session 域<br>applicationScope  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ServletContext 域</p><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;pageContext1&quot;</span>);<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;pageContext2&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    %&gt;<br>    $&#123; key2 &#125; &lt;!-- 会输出pageContext的key2 --&gt;<br>    $&#123; applicationScope.key2 &#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="pageContext-对象的使用"><a href="#pageContext-对象的使用" class="headerlink" title="pageContext 对象的使用"></a>pageContext 对象的使用</h4><ol><li>协议：${ req.scheme }</li><li>服务器 ip：${ pageContext.request.serverName }</li><li>服务器端口：${ pageContext.request.serverPort }</li><li>获取工程路径：${ pageContext.request.contextPath }</li><li>获取请求方法：${ pageContext.request.method }</li><li>获取客户端 ip 地址：${ pageContext.request.remoteHost }</li><li>获取会话的 id 编号：${ pageContext.session.id }</li></ol><p>代码示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%--<br>    JSP 方式获取相关信息：<br>        request.getScheme()  它可以获取请求的协议<br>        request.getServerName()  获取请求的服务器 ip 或域名<br>        request.getServerPort()  获取请求的服务器端口号<br>        request.getContextPath() 获取当前工程路径<br>        request.getMethod()  获取请求的方式（ GET 或 POST ）<br>        request.getRemoteHost()  获取客户端的 ip 地址<br>        session.getId()  获取会话的唯一标识<br>    --%&gt;<br>    &lt;%<br>    <span class="hljs-comment">//设置，简化代码</span><br>    pageContext.setAttribute(<span class="hljs-string">&quot;req&quot;</span>, request);  <br>    %&gt;<br>    <span class="hljs-number">1.</span>协议： $&#123; req.scheme &#125; 或 &lt;%=request.getScheme() %&gt;&lt;br&gt;<br>    <span class="hljs-number">2.</span>服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;<br>    <span class="hljs-number">3.</span>服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;<br>    <span class="hljs-number">4.</span>获取工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;<br>    <span class="hljs-number">5.</span>获取请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;<br>    <span class="hljs-number">6.</span>获取客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;<br>    <span class="hljs-number">7.</span>获取会话的 id 编号：$&#123; pageContext.session.id &#125;&lt;br&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="EL-表达式其他隐含对象的使用"><a href="#EL-表达式其他隐含对象的使用" class="headerlink" title="EL 表达式其他隐含对象的使用"></a>EL 表达式其他隐含对象的使用</h4><ul><li><p>param Map&lt;String,String&gt;    它可以获取请求参数的值</p></li><li><p>paramValues             Map&lt;String,String[]&gt;              它也可以获取请求参数的值，获取多个值的时候使用。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- <br>请求地址为：http:<span class="hljs-comment">//localhost:8080/09_EL_JSTL/other_el_obj.jsp?username=wzg168&amp;password=666666&amp;hobby=java&amp;hobby=cpp </span><br>--&gt;<br>输出请求参数 username 的值：$&#123; param.username &#125; &lt;br&gt;<br>输出请求参数 password 的值：$&#123; param.password &#125; &lt;br&gt;<br>输出请求参数 username 的值：$&#123; paramValues.username[<span class="hljs-number">0</span>] &#125; &lt;br&gt;<br>输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="hljs-number">0</span>] &#125; &lt;br&gt;<br>输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="hljs-number">1</span>] &#125; &lt;br&gt;<br></code></pre></td></tr></table></figure></li><li><p>header                      Map&lt;String,String&gt;                 它可以获取请求头的信息</p></li><li><p>headerValues          Map&lt;String,String[]&gt;               它可以获取请求头的信息，它可以获取多个值的情况</p><img src="image-20221105105607665.png" alt="image-20221105105607665" style="zoom:80%;" /><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">输出请求头信息：$&#123; header &#125;&lt;br&gt;<br>输出请求头【User-Agent】的值：$&#123; header[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] &#125; &lt;br&gt;<br>输出请求头【Connection】的值：$&#123; header.Connection &#125; &lt;br&gt;<br>输出请求头【User-Agent】的值：$&#123; headerValues[<span class="hljs-string">&#x27;User-Agent&#x27;</span>][<span class="hljs-number">0</span>] &#125; &lt;br&gt;<br></code></pre></td></tr></table></figure></li><li><p>cookie                       Map&lt;String,Cookie&gt;                它可以获取当前请求的 Cookie 信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">获取 Cookie 的名称：$&#123; cookie.JSESSIONID.name &#125; &lt;br&gt;<br>获取 Cookie 的值：$&#123; cookie.JSESSIONID.value &#125; &lt;br&gt;<br></code></pre></td></tr></table></figure></li><li><p>initParam           Map&lt;String,String&gt;        它可以获取在 web.xml 中配置的&lt;context-param&gt;上下文参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- xml中的配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql:///test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 示例代码 --&gt;<br>输出&amp;lt;Context-param&amp;gt;username 的值：$&#123; initParam.username &#125; &lt;br&gt;<br>输出&amp;lt;Context-param&amp;gt;url 的值：$&#123; initParam.url &#125; &lt;br&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="JSTL-标签库（次重点）"><a href="#JSTL-标签库（次重点）" class="headerlink" title="JSTL 标签库（次重点）"></a>JSTL 标签库（次重点）</h2><h3 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h3><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标签库。<br>EL 表达式主要是为了替换 jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个 jsp 页面变得更佳简洁。</p><ul><li><p>JSTL 由五个不同功能的标签库组成。</p><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心 标签库（重点）</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr><tr><td>数据库（不使用）</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML（不使用）</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table></li><li><p>在 jsp 标签库中使用 taglib 指令引入标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">CORE 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>XML 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;x&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/xml&quot;</span> %&gt;<br>FMT 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;fmt&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;<br>SQL 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;sql&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;<br>FUNCTIONS 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;fn&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="JSTL-标签库的使用步骤"><a href="#JSTL-标签库的使用步骤" class="headerlink" title="JSTL 标签库的使用步骤"></a>JSTL 标签库的使用步骤</h3><ul><li><p>1、先导入 jstl 标签库的 jar 包。</p><ul><li>taglibs-standard-impl-1.2.1.jar</li><li>taglibs-standard-spec-1.2.1.jar</li></ul><p> <img src="/2022/10/03/JavaWebNote/image-20221105112814881.png" alt="image-20221105112814881"></p></li><li><p>2、第二步，使用 taglib 指令引入标签库。</p><ul><li>&lt;%@ taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>“ %&gt;</li></ul></li></ul><h3 id="core-核心库使用"><a href="#core-核心库使用" class="headerlink" title="core 核心库使用"></a>core 核心库使用</h3><ul><li><p>&lt;c:set &#x2F;&gt; （使用很少）</p><p>作用：set 标签可以往域中保存数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<br>    i.&lt;c:set /&gt;<br>    作用： set 标签可以往域中保存数据<br>        <br>    域对象.setAttribute(key,value);<br>scope 属性设置保存到哪个域<br>        page 表示 PageContext 域（默认值）<br>        request 表示 Request 域<br>        session 表示 Session 域<br>        application 表示 ServletContext 域<br>    <span class="hljs-keyword">var</span> 属性设置 key<br>    value 属性设置 值<br>--&gt;<br>保存之前：$&#123; sessionScope.abc &#125; &lt;br&gt;<br>&lt;c:set scope=<span class="hljs-string">&quot;session&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;abc&quot;</span> value=<span class="hljs-string">&quot;abcValue&quot;</span>/&gt;<br>保存之后：$&#123; sessionScope.abc &#125; &lt;br&gt;<br></code></pre></td></tr></table></figure></li><li><p>&lt;c:if &#x2F;&gt;</p></li></ul><p>  if 标签用来做 if 判断。(注：没有else标签)</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<br>    ii.&lt;c:<span class="hljs-keyword">if</span> /&gt;<br>        <span class="hljs-keyword">if</span> 标签用来做 <span class="hljs-keyword">if</span> 判断。<br>        test 属性表示判断的条件（使用 EL 表达式输出）<br>--&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123; 12 == 12 &#125;&quot;</span>&gt;<br>    &lt;h1&gt;<span class="hljs-number">12</span> 等于 <span class="hljs-number">12</span>&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123; 12 != 12 &#125;&quot;</span>&gt;<br>    &lt;h1&gt;<span class="hljs-number">12</span> 不等于 <span class="hljs-number">12</span>&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><p>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt; 标签</p><p>作用：多路判断。跟 switch … case …. default 非常接近</p><p>​不同之处，不需要break</p><p>注意：标签里不能使用 html 注释，要使用 jsp 注释</p><p>​when 标签的父标签一定要是 choose 标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<br>    iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt; 标签<br>        作用：多路判断。跟 <span class="hljs-keyword">switch</span> ... <span class="hljs-keyword">case</span> .... <span class="hljs-keyword">default</span> 非常接近<br>            <br>        choose 标签开始选择判断<br>        when 标签表示每一种判断情况<br>        test 属性表示当前这种判断情况的值<br>        otherwise 标签表示剩下的情况<br>        &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt; 标签使用时需要注意的点：<br>            <span class="hljs-number">1</span>、标签里不能使用 html 注释，要使用 jsp 注释<br>            <span class="hljs-number">2</span>、when 标签的父标签一定要是 choose 标签<br>--&gt;<br>&lt;%<br>request.setAttribute(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">180</span>);<br>%&gt;<br>&lt;c:choose&gt;<br>    &lt;%--（标签里不能使用 html 注释，要使用 jsp 注释）--%&gt;  <br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 190 &#125;&quot;</span>&gt;<br>        &lt;h2&gt;小巨人&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 180 &#125;&quot;</span>&gt;<br>        &lt;h2&gt;很高&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 170 &#125;&quot;</span>&gt;<br>        &lt;h2&gt;还可以&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:otherwise&gt;<br>        &lt;c:choose&gt;  &lt;%-- when 标签的父标签一定要是 choose 标签 --%&gt; <br>            &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height &gt; 160&#125;&quot;</span>&gt;<br>                &lt;h3&gt;大于 <span class="hljs-number">160</span>&lt;/h3&gt;<br>            &lt;/c:when&gt;<br>            &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height &gt; 150&#125;&quot;</span>&gt;<br>                &lt;h3&gt;大于 <span class="hljs-number">150</span>&lt;/h3&gt;<br>            &lt;/c:when&gt;<br>            &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height &gt; 140&#125;&quot;</span>&gt;<br>                &lt;h3&gt;大于 <span class="hljs-number">140</span>&lt;/h3&gt;<br>            &lt;/c:when&gt;<br>            &lt;c:otherwise&gt;<br>                其他小于 <span class="hljs-number">140</span><br>            &lt;/c:otherwise&gt;<br>        &lt;/c:choose&gt;<br>    &lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>&lt;c:forEach &#x2F;&gt;</strong></p></li></ul><p>  作用：遍历输出使用。</p><ul><li><p>1）遍历 1 到 10，输出</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<span class="hljs-number">1.</span> 遍历 <span class="hljs-number">1</span> 到 <span class="hljs-number">10</span> ，输出<br>    begin 属性设置开始的索引<br>    end 属性设置结束的索引<br>    <span class="hljs-keyword">var</span> 属性表示循环的变量 ( 也是当前正在遍历到的数据 )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>--&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;c:forEach begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;第$&#123;i&#125;行&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure></li><li><p>2）遍历 Object 数组</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- <span class="hljs-number">2.</span> 遍历 Object 数组<br>    <span class="hljs-keyword">for</span> (Object item: arr)<br>    items 表示遍历的数据源（遍历的集合）<br>    <span class="hljs-keyword">var</span> 表示当前遍历到的数据<br>--&gt;<br>&lt;%<br>request.setAttribute(<span class="hljs-string">&quot;arr&quot;</span>, <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;18610541354&quot;</span>,<span class="hljs-string">&quot;18688886666&quot;</span>,<span class="hljs-string">&quot;18699998888&quot;</span>&#125;);<br>%&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123; requestScope.arr &#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>    $&#123; item &#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li><li><p>3）遍历 Map 集合</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br><span class="hljs-comment">//  for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) &#123;</span><br><span class="hljs-comment">//  &#125;</span><br>    request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>, map);<br>%&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123; requestScope.map &#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span>&gt;<br>    &lt;h1&gt;$&#123;entry.key&#125; = $&#123;entry.value&#125;&lt;/h1&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li><li><p>4）遍历 List 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student 类：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//4. 编号，用户名，密码，年龄，电话信息</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 示例代码 --&gt;<br>&lt;!--<br>遍历 List 集合 ---list 中存放 Student 类，有属性：编号，用户名，密码，年龄，电话信息 <br>--&gt;<br>&lt;%<br>    List&lt;Student&gt; studentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(i,<span class="hljs-string">&quot;username&quot;</span>+i ,<span class="hljs-string">&quot;pass&quot;</span>+i,<span class="hljs-number">18</span>+i,<span class="hljs-string">&quot;phone&quot;</span>+i));<br>    &#125;<br>    request.setAttribute(<span class="hljs-string">&quot;stus&quot;</span>, studentList);<br>%&gt;<br>&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;用户名&lt;/th&gt;<br>        &lt;th&gt;密码&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>        &lt;th&gt;电话&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;!--<br>        items 表示遍历的集合<br>        <span class="hljs-keyword">var</span> 表示遍历到的数据<br>        begin 表示遍历的开始索引值<br>        end 表示结束的索引值<br>        step 属性表示遍历的步长值<br>        varStatus 属性表示当前遍历到的数据的状态<br>        <span class="hljs-keyword">for</span> （ <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i+=<span class="hljs-number">2</span> ）<br>    --&gt;<br>    &lt;c:forEach begin=<span class="hljs-string">&quot;2&quot;</span> end=<span class="hljs-string">&quot;7&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span> varStatus=<span class="hljs-string">&quot;status&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.stus&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;stu&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;status.index&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><p>文件的上传和下载，是非常常见的功能。很多的系统中，或者软件中都经常使用文件的上传和下载。</p><p>比如：QQ头像，使用了上传；邮箱中也有附件的上传和下载功能；QA系统中审批有附件材料的上传。</p><h3 id="文件的上传介绍"><a href="#文件的上传介绍" class="headerlink" title="文件的上传介绍"></a>文件的上传介绍</h3><ul><li><p>1、要有一个 form 标签，method&#x3D;post 请求</p></li><li><p>2、form标签的 encType 属性值必须为 myltipart&#x2F;form-data 值</p></li><li><p>3、在 form 标签中使用 input type&#x3D;file 添加上传的文件</p></li><li><p>4、编写服务器代码（Servlet 程序）接收，处理上传的数据</p></li><li><p>encType&#x3D;multipart&#x2F;form-data 表示提交的数据，</p><p>以多段（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的形式发送给服务器。</p></li></ul><h4 id="文件上传，HTTP-协议内容的说明"><a href="#文件上传，HTTP-协议内容的说明" class="headerlink" title="文件上传，HTTP 协议内容的说明"></a>文件上传，HTTP 协议内容的说明</h4><p><img src="/2022/10/03/JavaWebNote/image-20221105165555719.png" alt="image-20221105165555719"></p><p>如何解析上传的数据？</p><h4 id="commons-fileupload-jar-常用-API-介绍说明"><a href="#commons-fileupload-jar-常用-API-介绍说明" class="headerlink" title="commons-fileupload.jar 常用 API 介绍说明"></a>commons-fileupload.jar 常用 API 介绍说明</h4><p>commons-fileupload.jar 赖 需要依赖 commons-io.jar 这个包，所以两个包我们都要引入。</p><p>第一步，就是需要导入两个 jar 包：commons-fileupload-1.2.1.jar 和 commons-io-1.4.jar</p><ul><li><p>commons-fileupload.jar 和 和 commons-io.jar 包中，我们常用的类有哪些？</p><ul><li><p>ServletFileUpload 类</p><p>​用于解析上传的数据。</p></li><li><p>FileItem 类</p><p>​表示每一个表单项。</p></li><li><p>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</p><p>​判断当前上传的数据格式是否是多段的格式。</p><p>​若返回值为true则是带文件上传的表单；返回值为false则是普通表单。</p></li><li><p>public List&lt;FileItem&gt; parseRequest(HttpServletRequest request)</p><p>​解析上传的数据</p></li><li><p>boolean FileItem.isFormField()</p><p>​判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。</p><p>​true 表示普通类型的表单项</p><p>​false 表示上传的是文件类型</p></li><li><p>String FileItem.getFieldName()</p><p>​获取表单项的 name 属性值</p></li><li><p>String FileItem.getString()</p><p>​获取当前表单项的值。</p></li><li><p>String FileItem.getName();</p><p>​获取上传的文件名</p></li><li><p>void FileItem.write( file );</p><p>​将上传的文件写到 参数 file 所指向的硬盘位置 。</p></li></ul></li></ul><h4 id="fileupload-类库的使用"><a href="#fileupload-类库的使用" class="headerlink" title="fileupload 类库的使用"></a>fileupload 类库的使用</h4><p>上传文件的表单：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;http://192.168.31.74:8080/09_EL_JSTL/uploadServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span><br>      enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> /&gt; &lt;br&gt;<br>    头像：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;photo&quot;</span> &gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot; 上传&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>解析上传的数据的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 用来处理上传的数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的）</span><br>    <span class="hljs-keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;<br>        <span class="hljs-comment">// 创建 FileItemFactory 工厂实现类</span><br>        <span class="hljs-type">FileItemFactory</span> <span class="hljs-variable">fileItemFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();<br>        <span class="hljs-comment">// 创建用于解析上传数据的工具类 ServletFileUpload 类</span><br>        <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">servletFileUpload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(fileItemFactory);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 解析上传的数据，得到每一个表单项 FileItem</span><br>            List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);<br>            <span class="hljs-comment">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span><br>            <span class="hljs-keyword">for</span> (FileItem fileItem : list) &#123;<br>                <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<br>                    <span class="hljs-comment">// 普通表单项</span><br>                    System.out.println(<span class="hljs-string">&quot; 表单项的 name 属性值：&quot;</span> + fileItem.getFieldName());<br>                    <span class="hljs-comment">// 参数 UTF-8. 解决乱码问题</span><br>                    System.out.println(<span class="hljs-string">&quot; 表单项的 value 属性值：&quot;</span> + fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 上传的文件</span><br>                    System.out.println(<span class="hljs-string">&quot; 表单项的 name 属性值：&quot;</span> + fileItem.getFieldName());<br>                    System.out.println(<span class="hljs-string">&quot; 上传的文件名：&quot;</span> + fileItem.getName());<br>                    fileItem.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\&quot;</span> + fileItem.getName()));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>下载的常用API说明：</p><ul><li>response.getOutputStream();</li><li>servletContext.getResourceAsStream();</li><li>servletContext.getMimeType();</li><li>response.setContentType();</li></ul><p>response.setHeader(“Content-Disposition”, “attachment; fileName&#x3D;1.jpg”);</p><p>这个响应头告诉浏览器。这是需要下载的。而 attachment 表示附件，也就是下载的一个文件。fileName&#x3D;后面，表示下载的文件名。</p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确显示出正确的中文名。</p><p>原因是在响应头中，不能包含有中文字符，只能包含 ASCII 码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Download</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1、获取要下载的文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;duolaAmeng.png&quot;</span>;<br><br>        <span class="hljs-comment">//2、读取要下载的文件内容（通过ServletContext对象可以读取）</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> servletContext.getResourceAsStream(<span class="hljs-string">&quot;/file/&quot;</span> + downloadFileName);<br><br>        <span class="hljs-comment">//3、在回传前，通过响应头告诉客户端返回的数据类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mimeType</span> <span class="hljs-operator">=</span> servletContext.getMimeType(<span class="hljs-string">&quot;/file/&quot;</span> + downloadFileName);<br>        <span class="hljs-comment">//  / 斜杆被服务器解析表示为 http://ip:port/工程名/   映射到代码的Web目录</span><br>        System.out.println(<span class="hljs-string">&quot;下载的文件类型：&quot;</span>+mimeType);<br>        resp.setContentType(mimeType);<br><br>        <span class="hljs-comment">///4、还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span><br>        <span class="hljs-comment">//解决 下载文件名（中文） 乱码问题</span><br>        <span class="hljs-keyword">if</span>(req.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>).contains(<span class="hljs-string">&quot;Firefox&quot;</span>))&#123;<br><span class="hljs-comment">//            resp.setHeader(&quot;attachment; fileName=&quot; + &quot;=?utf-8?B?&quot;</span><br><span class="hljs-comment">//                + new BASE64Encoder().encode(&quot;中文.jpg&quot;.getBytes(&quot;utf-8&quot;)) + &quot;?=&quot;);</span><br>            <span class="hljs-comment">// jdk9 以后就没有BASE64Encoder的包了，所以使用不了</span><br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment; filename=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;中文.png&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            <span class="hljs-comment">// Content-Disposition 响应头，表示收到的数据怎么处理</span><br>            <span class="hljs-comment">// attachment 表示附件，表示下载使用</span><br>            <span class="hljs-comment">// filename 表示指定下载的文件名</span><br>        &#125;<br><br>        <span class="hljs-comment">//5、把下载的文件内容回传给客户端</span><br>        <span class="hljs-comment">//获取响应的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>        <span class="hljs-comment">//读取输入流中全部的数据，复制给输出流，输出给客户端</span><br>        IOUtils.copy(resourceAsStream,outputStream);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="附件中文名乱码问题解决方案："><a href="#附件中文名乱码问题解决方案：" class="headerlink" title="附件中文名乱码问题解决方案："></a>附件中文名乱码问题解决方案：</h4><p><strong>方案一：URLEncoder 决 解决 IE 和谷歌浏览器的 和谷歌浏览器的 附件中文名问题。</strong></p><p>如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码操作。因为 IE 浏览器 和 谷歌浏览器 收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把中文名进行 UTF-8 编码操作。</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 然后把编码后的字符串设置到响应头中</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br></code></pre></td></tr></table></figure><p><strong>方案二：BASE64 编解码 编解码 决 解决 火狐浏览器的附件中文名问题</strong></p><p>如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作。</p><p>这时候需要把请求头 Content-Disposition: attachment; filename&#x3D;中文名</p><p>编码成为：Content-Disposition: attachment; filename&#x3D;&#x3D;?charset?B?xxxxx?&#x3D;</p><p>&#x3D;?charset?B?xxxxx?&#x3D;   现在我们对这段内容进行一下说明。<br>&#x3D;?表示编码内容的开始<br>charset   表示字符集<br>B  表示 BASE64编码<br>xxxx表示文件名 BASE64编码后的内容<br>?&#x3D;表示编码内容的结束</p><p>BASE64 编解码操作：</p><p>因为 火狐 使用的是 BASE64 的编解码 方式还原响应中的汉字。所以需要使用 BASE64Encoder 类进行编码操作</p><p>import sun.misc.BASE64Decoder; </p><p>import sun.misc.BASE64Encoder; </p><p>jdk9以后就没有这几个包了，所以使用不了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用下面的格式进行 BASE64 编码后</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + <span class="hljs-string">&quot;=?utf-8?B?&quot;</span><br>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">BASE64Encoder</span>().encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>)) + <span class="hljs-string">&quot;?=&quot;</span>;<br><span class="hljs-comment">// 设置到响应头中</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br></code></pre></td></tr></table></figure><p><strong>那么我们如何解决上面两种不同编解码方式呢。</strong></p><p>我们只需要通过判断请求头中 User-Agent 这个请求头携带过来的浏览器信息即可判断出是什么浏览器。</p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">ua</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br><span class="hljs-comment">// 判断是否是火狐浏览器</span><br><span class="hljs-keyword">if</span> (ua.contains(<span class="hljs-string">&quot;Firefox&quot;</span>)) &#123;<br>    <span class="hljs-comment">// 使用下面的格式进行 BASE64 编码后</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + <span class="hljs-string">&quot;=?utf-8?B?&quot;</span><br>        + <span class="hljs-keyword">new</span> <span class="hljs-title class_">BASE64Encoder</span>().encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>)) + <span class="hljs-string">&quot;?=&quot;</span>;<br>    <span class="hljs-comment">// 设置到响应头中</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 把中文名进行 UTF-8 编码操作。</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">// 然后把编码后的字符串设置到响应头中</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie简介"><a href="#Cookie简介" class="headerlink" title="Cookie简介"></a>Cookie简介</h3><ul><li>Cookie 翻译过来就是饼干的意思</li><li>Cookie 是服务器通知客户端保存键值对的一种技术</li><li>客户端有了 Cookie 后，每次请求都发送给服务器</li><li><strong>每个 Cookie 的大小不能超过 4kb</strong></li></ul><h3 id="如何创建-Cookie"><a href="#如何创建-Cookie" class="headerlink" title="如何创建 Cookie"></a>如何创建 Cookie</h3><p><img src="/2022/10/03/JavaWebNote/image-20221106092646241.png" alt="image-20221106092646241"></p><p>Servlet 程序中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1 创建 Cookie 对象</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key4&quot;</span>, <span class="hljs-string">&quot;value4&quot;</span>);<br>    <span class="hljs-comment">//2 通知客户端保存 Cookie</span><br>    resp.addCookie(cookie);<br>    <span class="hljs-comment">//1 创建 Cookie 对象</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key5&quot;</span>, <span class="hljs-string">&quot;value5&quot;</span>);<br>    <span class="hljs-comment">//2 通知客户端保存 Cookie</span><br>    resp.addCookie(cookie1);<br>    <br>    resp.getWriter().write(<span class="hljs-string">&quot;Cookie 创建成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务器如何获取-Cookie"><a href="#服务器如何获取-Cookie" class="headerlink" title="服务器如何获取 Cookie"></a>服务器如何获取 Cookie</h3><p>服务器获取客户端的 Cookie 只需要一行代码: req.getCookies():Cookie[]</p><p><img src="/2022/10/03/JavaWebNote/image-20221106092817265.png" alt="image-20221106092817265"></p><p>Cookie 的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查找指定名称的 Cookie 对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> cookies</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cookie <span class="hljs-title function_">findCookie</span><span class="hljs-params">(String name , Cookie[] cookies)</span>&#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span> || cookies == <span class="hljs-literal">null</span> || cookies.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span> (name.equals(cookie.getName())) &#123;<br>                <span class="hljs-keyword">return</span> cookie;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Servlet 程序中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    Cookie[] cookies = req.getCookies();<br>    <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>        <span class="hljs-comment">// getName 方法返回 Cookie 的 key （名）</span><br>        <span class="hljs-comment">// getValue 方法返回 Cookie 的 value 值</span><br>        resp.getWriter().write(<span class="hljs-string">&quot;Cookie[&quot;</span> + cookie.getName() + <span class="hljs-string">&quot;=&quot;</span> + cookie.getValue() + <span class="hljs-string">&quot;] &lt;br/&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">iWantCookie</span> <span class="hljs-operator">=</span> CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>, cookies);<br>    <span class="hljs-comment">// for (Cookie cookie : cookies) &#123;</span><br>    <span class="hljs-comment">// if (&quot;key2&quot;.equals(cookie.getName())) &#123;</span><br>    <span class="hljs-comment">// iWantCookie = cookie;</span><br>    <span class="hljs-comment">// break;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 如果不等于 null ，说明赋过值，也就是找到了需要的 Cookie</span><br>    <span class="hljs-keyword">if</span> (iWantCookie != <span class="hljs-literal">null</span>) &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot; 找到了需要的 Cookie&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Cookie-值的修改"><a href="#Cookie-值的修改" class="headerlink" title="Cookie 值的修改"></a>Cookie 值的修改</h3><p>注意：对于 Version 0 cookie，值不应包含空格、方括号、圆括号、等号、逗号、双引号、斜杠、问号、at符号、冒号和分号。控制在不同浏览器上的行为不一定相同。</p><p>方案一：</p><ul><li><p>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象</p></li><li><p>2、在构造器，同时赋于新的 Cookie 值。</p></li><li><p>3、调用 response.addCookie( Cookie );</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方案一：</span><br><span class="hljs-comment">// 1 、先创建一个要修改的同名的 Cookie 对象</span><br><span class="hljs-comment">// 2 、在构造器，同时赋于新的 Cookie 值。</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;newValue1&quot;</span>);<br><span class="hljs-comment">// 3 、调用 response.addCookie( Cookie ); 通知 客户端 保存修改</span><br>resp.addCookie(cookie);<br></code></pre></td></tr></table></figure></li></ul><p>方案二：</p><ul><li><p>1、先查找到需要修改的 Cookie 对象</p></li><li><p>2、调用 setValue()方法赋于新的 Cookie 值。</p></li><li><p>3、调用 response.addCookie()通知客户端保存修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方案二：</span><br><span class="hljs-comment">// 1 、先查找到需要修改的 Cookie 对象</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> CookieUtils.findCookie(<span class="hljs-string">&quot;key2&quot;</span>, req.getCookies());<br><span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 2 、调用 setValue() 方法赋于新的 Cookie 值。</span><br>    cookie.setValue(<span class="hljs-string">&quot;newValue2&quot;</span>);<br>    <span class="hljs-comment">// 3 、调用 response.addCookie() 通知客户端保存修改</span><br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="浏览器查看-Cookie"><a href="#浏览器查看-Cookie" class="headerlink" title="浏览器查看 Cookie"></a>浏览器查看 Cookie</h3><ul><li><p>谷歌浏览器如何查看 Cookie：</p><p><img src="/2022/10/03/JavaWebNote/image-20221106093217145.png" alt="image-20221106093217145"></p></li><li><p>火狐浏览器如何查看 Cookie：</p><p><img src="/2022/10/03/JavaWebNote/image-20221106093227280.png" alt="image-20221106093227280"></p></li></ul><h3 id="Cookie-生命控制"><a href="#Cookie-生命控制" class="headerlink" title="Cookie 生命控制"></a>Cookie 生命控制</h3><ul><li><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p></li><li><p>setMaxAge()</p><ul><li>正数，表示在指定的秒数后过期</li><li>负数，表示浏览器一旦关闭，Cookie 就会被删除（默认值是-1）</li><li>零，表示马上删除 Cookie</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 设置存活 1 个小时的 Cooie</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">life3600</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;life3600&quot;</span>, <span class="hljs-string">&quot;life3600&quot;</span>);<br>    cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>); <span class="hljs-comment">// 设置 Cookie 一小时之后被删除。无效</span><br>    resp.addCookie(cookie);<br>    resp.getWriter().write(<span class="hljs-string">&quot; 已经创建了一个存活一小时的 Cookie&quot;</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 马上删除一个 Cookie</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNow</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-comment">// 先找到你要删除的 Cookie 对象</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> CookieUtils.findCookie(<span class="hljs-string">&quot;key4&quot;</span>, req.getCookies());<br>    <span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 调用 setMaxAge(0);</span><br>        cookie.setMaxAge(<span class="hljs-number">0</span>); <span class="hljs-comment">// 表示马上删除，都不需要等待浏览器关闭</span><br>        <span class="hljs-comment">// 调用 response.addCookie(cookie);</span><br>        resp.addCookie(cookie);<br>        resp.getWriter().write(<span class="hljs-string">&quot;key4 的 的 Cookie 已经被删除&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 默认的会话级别的 Cookie</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;defalutLife&quot;</span>,<span class="hljs-string">&quot;defaultLife&quot;</span>);<br>    cookie.setMaxAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">// 设置存活时间</span><br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Cookie-有效路径-Path-的设置"><a href="#Cookie-有效路径-Path-的设置" class="headerlink" title="Cookie 有效路径 Path 的设置"></a>Cookie 有效路径 Path 的设置</h3><p>Cookie 的path属性可以有效地过滤哪些 Cookie 可以发送给服务器，哪些不发</p><p>path 属性是通过请求的地址来进行有效的过滤，默认path是工程路径</p><ul><li><p>CookieA path&#x3D;&#x2F;工程路径</p></li><li><p>CookieB path&#x3D;&#x2F;工程路径&#x2F;abc</p></li><li><p>请求地址如下：</p><ul><li><a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a><ul><li>CookieA 发送</li><li>CookieB 不发送</li></ul></li><li><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a><ul><li>CookieA 发送</li><li>CookieB 发送</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPath</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;path1&quot;</span>, <span class="hljs-string">&quot;path1&quot;</span>);<br>    <span class="hljs-comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span><br>    cookie.setPath( req.getContextPath() + <span class="hljs-string">&quot;/abc&quot;</span> ); <span class="hljs-comment">// ===&gt;&gt;&gt;&gt; / 工程路径 /abc</span><br>    resp.addCookie(cookie);<br>    resp.getWriter().write(<span class="hljs-string">&quot; 创建了一个带有 Path 路径的 Cookie&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Cookie-练习—免输入用户名登录"><a href="#Cookie-练习—免输入用户名登录" class="headerlink" title="Cookie 练习—免输入用户名登录"></a>Cookie 练习—免输入用户名登录</h3><p><img src="/2022/10/03/JavaWebNote/image-20221106093748695.png" alt="image-20221106093748695"></p><ul><li><p>login.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;http://localhost:8080/13_cookie_session/loginServlet&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt; &lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot; 登录&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>LoginServlet 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;wzg168&quot;</span>.equals(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password)) &#123;<br>        <span class="hljs-comment">// 登录 成功</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>);<span class="hljs-comment">// 当前 Cookie 一周内有效</span><br>        resp.addCookie(cookie);<br>        System.out.println(<span class="hljs-string">&quot;录 登录 成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 登录 失败</span><br>        System.out.println(<span class="hljs-string">&quot;录 登录 失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Session-会话"><a href="#Session-会话" class="headerlink" title="Session 会话"></a>Session 会话</h2><h3 id="什么是-Session-会话"><a href="#什么是-Session-会话" class="headerlink" title="什么是 Session 会话"></a>什么是 Session 会话</h3><ul><li>1、Session 就一个接口（HttpSession接口）。</li><li>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。</li><li>3、每个客户端都有自己的一个 Session 会话。</li><li>4、Session 会话中，我们经常用来保存用户登录之后的信息。</li></ul><h3 id="如何创建-Session-和获取-id-号-是否为新"><a href="#如何创建-Session-和获取-id-号-是否为新" class="headerlink" title="如何创建 Session 和获取(id 号, 是否为新)"></a>如何创建 Session 和获取(id 号, 是否为新)</h3><ul><li><p>如何创建和获取 Session？它们的 API 是一样的。</p></li><li><p>request.getSession()</p><ul><li>第一次调用是： 创建 Session 会话</li><li>之后调用都是： 获取前面创建好的 Session 会话对象。</li><li>isNew();   判断到底是不是刚创建出来的（新的）<ul><li>true 表示刚创建</li><li>false 表示获取之前创建</li></ul></li><li>每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。</li><li>getId() 得到 Session 的会话 id 值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionServlet</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOrGetSession</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//创建和获取Session会话对象</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        <span class="hljs-comment">//判断当前Session会话，是否是新创建出来的</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isNew</span> <span class="hljs-operator">=</span> session.isNew();<br>        <span class="hljs-comment">//获取Session会话的唯一标识（id）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getId();<br><br>        resp.getWriter().write(<span class="hljs-string">&quot;得到的Session的id值为：&quot;</span>+id+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;这个Session是否是新创建的：&quot;</span>+isNew+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Session-域数据的存取"><a href="#Session-域数据的存取" class="headerlink" title="Session 域数据的存取"></a>Session 域数据的存取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 往 Session 中保存数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    req.getSession().setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot; 已经往 Session 中保存了数据&quot;</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取 Session 域中的数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,<br>IOException &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> req.getSession().getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;从 Session 中获取出 key1 的数据是：&quot;</span> + attribute);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Session-生命周期控制"><a href="#Session-生命周期控制" class="headerlink" title="Session 生命周期控制"></a>Session 生命周期控制</h3><ul><li><p>public void setMaxInactiveInterval(int interval) </p><p>​设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。</p><p>​值为正数的时候，设定 Session 的超时时长</p><p>​值为负数的时候，表示永不超时（极少使用，会使服务器不断堆积数据）</p></li><li><p>public int getMaxInactiveInterval()   </p><p>​获取 Session 的超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxInactiveInterval</span> <span class="hljs-operator">=</span> req.getSession().getMaxInactiveInterval();<br>    resp.getWriter().write(<span class="hljs-string">&quot;Session的默认超时时长为：&quot;</span>+maxInactiveInterval+<span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>public void invalidate()   </p><p>​让当前 Session 会话马上超时无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNow</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">// 先获取 Session 对象</span><br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>    <span class="hljs-comment">// 让 Session 会话马上超时</span><br>    session.invalidate();<br>    resp.getWriter().write(<span class="hljs-string">&quot;Session 已经设置为超时（无效）&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Session 默认的超时时间长为 30 分钟。</p><ul><li><p>因为在Tomcat服务器的配置文件web.xml中默认有以下的配置，它就表示配置了当前Tomcat服务器下所有的Session超时配置默认时长为：30 分钟。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果说，你希望你的 web 工程，默认的 Session 的超时时长为其他时长，你可以在你自己的 web.xml 配置文件中做以上相同的配置，就可以修改你的 web 工程所有 Seession 的默认超时时长。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 表示当前 web 工程。创建出来 的所有 Session 默认是 20 分钟 超时时长 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>&lt;/session-config<br></code></pre></td></tr></table></figure></li></ul></li><li><p>如果你想只修改个别 Session 的超时时长。就可以使用上面的 API。setMaxInactiveInterval(int interval)来进行单独的设置。</p><ul><li><p>session.setMaxInactiveInterval(int interval);单独设置超时时长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">life3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">// 先获取 Session 对象</span><br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>    <span class="hljs-comment">// 设置当前 Session3 秒后超时</span><br>    session.setMaxInactiveInterval(<span class="hljs-number">3</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot; 当前 Session 已经设置为 3 秒后超时&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Session 超时的概念介绍：</p><p><img src="/2022/10/03/JavaWebNote/image-20221106094417773.png" alt="image-20221106094417773"></p></li></ul></li></ul><h3 id="浏览器和-Session-之间关联的技术内幕"><a href="#浏览器和-Session-之间关联的技术内幕" class="headerlink" title="浏览器和 Session 之间关联的技术内幕"></a>浏览器和 Session 之间关联的技术内幕</h3><p>Session 技术，底层其实是基于 Cookie 技术来实现的。</p><p><img src="/2022/10/03/JavaWebNote/image-20221106094631669.png" alt="image-20221106094631669"></p><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><h3 id="Filter-过滤器介绍"><a href="#Filter-过滤器介绍" class="headerlink" title="Filter 过滤器介绍"></a>Filter 过滤器介绍</h3><ul><li>Filter 过滤器是 javaWeb 的三大组件之一。三大组件分别是：Servlet 程序、Listener 监听器、filter 过滤器</li><li>Filter 过滤器是 JavaEE 的规范，也就是接口</li><li>Filter 过滤器的作用是：<strong>拦截请求</strong>，过滤响应</li><li>拦截请求的常见的应用场景有：<ul><li>权限检查</li><li>日记操作</li><li>事务管理</li><li>… … 等等</li></ul></li></ul><h3 id="Filter-的初体验"><a href="#Filter-的初体验" class="headerlink" title="Filter 的初体验"></a>Filter 的初体验</h3><p>要求：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必须是用户登录之后才允许访问。</p><p>思考：根据之前我们学过内容。我们知道，用户登录之后都会把用户登录的信息保存到 Session 域中。所以要检查用户是否登录，可以判断 Session 中是否包含有用户登录的信息即可！！！</p><p><strong>Filter 的工作流程图：</strong></p><p><img src="/2022/10/03/JavaWebNote/image-20221106165954177.png" alt="image-20221106165954177"></p><p><strong>Filter 过滤器的使用步骤：</strong></p><ul><li>1、编写一个类去实现 Filter 接口</li><li>2、实现过滤方法 doFilter()</li><li>3、到 web.xml 中去配置 Filter 的拦截路径</li></ul><p><strong>完整的用户登录</strong></p><ul><li><p>Filter 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* doFilter 方法，专门用于拦截请求。可以做权限检查</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpServletRequest.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">// 如果等于 null ，说明还没有登录</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>servletRequest.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>)<br>    .forward(servletRequest,servletResponse);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 让程序继续往下访问用户的目标资源</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- filter 标签用于配置一个 Filter 过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 给 filter 起一个别名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 filter 的全类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- filter-mapping 配置 Filter 过滤器的拦截路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter 使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        url-pattern 配置拦截路径</span><br><span class="hljs-comment">        / 表示请求地址为： http://ip:port/ 工程路径 / 映射到 IDEA 的 web 目录</span><br><span class="hljs-comment">        /admin/* 表示请求地址为： http://ip:port/ 工程路径 /admin/*</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>login.jsp 页面 &#x3D;&#x3D; 登录表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">这是登录页面。login.jsp 页面 &lt;br&gt;<br>&lt;form action=<span class="hljs-string">&quot;http://localhost:8080/15_filter/loginServlet&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt; &lt;br&gt;<br>    密 码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>LoginServlet 程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;wzg168&quot;</span>.equals(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password)) &#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>,username);<br>            resp.getWriter().write(<span class="hljs-string">&quot;录 登录 成功！！！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Filter-的生命周期"><a href="#Filter-的生命周期" class="headerlink" title="Filter 的生命周期"></a>Filter 的生命周期</h3><p>Filter 的生命周期包含几个方法</p><ul><li><p>1、构造器方法</p></li><li><p>2、init 初始化方法</p><p>​第1、2步，在 web 工程启动的时候执行（Filter 已经创建）</p></li><li><p>3、doFilter 过滤方法</p><p>​第3步，每次拦截到请求，就会执行</p></li><li><p>4、destory 销毁</p><p>​第 4 步，停止web工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）</p></li></ul><h3 id="FilterConfig-类"><a href="#FilterConfig-类" class="headerlink" title="FilterConfig 类"></a>FilterConfig 类</h3><ul><li><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。</p></li><li><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。</p></li><li><p>FilterConfig 类的作用是  获取 filter 过滤器的配置内容</p><ul><li>1、获取 Filter 的名称 filter-name 的内容</li><li>2、获取在 Filter 中配置的 <strong>init-param 初始化参数</strong></li><li>3、获取 ServletContext 对象</li></ul></li><li><p>java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;2.Filter 的 的 init(FilterConfig filterConfig) 初始化&quot;</span>);<br>    <br>    <span class="hljs-comment">// 1 、获取 Filter 的名称 filter-name 的内容</span><br>    System.out.println(<span class="hljs-string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());<br>    <br>    <span class="hljs-comment">// 2 、获取在 web.xml 中配置的 init-param 初始化参数</span><br>    System.out.println(<span class="hljs-string">&quot; 初始化参数 username 的值是 ：&quot;</span> +   <br>                       filterConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot; 初始化参数 url 的值是：&quot;</span> + <br>                       filterConfig.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));<br>    <br>    <span class="hljs-comment">// 3 、获取 ServletContext 对象</span><br>    System.out.println(filterConfig.getServletContext());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--filter 标签用于配置一个 Filter 过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 给 filter 起一个别名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 filter 的全类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h3><p><img src="/2022/10/03/JavaWebNote/image-20221106192429369.png" alt="image-20221106192429369"></p><ul><li><p>Filter1 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;Filter1 前置代码&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;Filter1 线程：&quot;</span>+Thread.currentThread().getName());<br>    servletRequest.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    filterChain.doFilter(servletRequest,servletResponse);<br>    System.out.println(<span class="hljs-string">&quot;Filter1 后置代码&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Filter2 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;Filter2 前置代码&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;Filter2 线程：&quot;</span>+Thread.currentThread().getName());<br>    System.out.println(<span class="hljs-string">&quot;Filter2 取 Filter1 中保存的 key1 的值为：&quot;</span>+servletRequest.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    filterChain.doFilter(servletRequest,servletResponse);<br>    System.out.println(<span class="hljs-string">&quot;Filter2 后置代码&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>target.jsp 页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        System.out.println(<span class="hljs-string">&quot;target&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;target 线程：&quot;</span>+Thread.currentThread().getName());<br>    %&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li><li><p>web.xml 文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>Filter1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.stuyd.filter.Filter1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>Filter1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/target.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>Filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.stuyd.filter.Filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>Filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/target.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>访问 target.jsp 页面后的输出为：</p><p>Filter1 前置代码<br>Filter1 线程：http-nio-8080-exec-23<br>Filter2 前置代码<br>Filter2 线程：http-nio-8080-exec-23<br>Filter2 取 Filter1 中保存的 key1 的值为：value1<br>target<br>target 线程：http-nio-8080-exec-23<br>Filter2 后置代码<br>Filter1 后置代码</p></li></ul><h3 id="Filter-的拦截路径"><a href="#Filter-的拦截路径" class="headerlink" title="Filter 的拦截路径"></a>Filter 的拦截路径</h3><p><strong>说明：Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</strong></p><h4 id="–精确匹配"><a href="#–精确匹配" class="headerlink" title="–精确匹配"></a>–精确匹配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/target.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上配置的路径，表示请求地址必须为：http://ip:port/工程路径/target.jsp --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="–目录匹配"><a href="#–目录匹配" class="headerlink" title="–目录匹配"></a>–目录匹配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上配置的路径，表示请求地址必须为：http://ip:port/工程路径/admin/* --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="–后缀名匹配"><a href="#–后缀名匹配" class="headerlink" title="–后缀名匹配"></a>–后缀名匹配</h4><p>注意：后缀名匹配，不关心后缀名是否有意义，只关心能否匹配到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上配置的路径，表示请求地址必须以.html 结尾才会拦截到 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上配置的路径，表示请求地址必须以.do 结尾才会拦截到 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.action<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上配置的路径，表示请求地址必须以.action 结尾才会拦截到 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON-介绍"><a href="#JSON-介绍" class="headerlink" title="JSON 介绍"></a>JSON 介绍</h3><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON采用完全独立于语言的文本格式，而且很多语言都提供了对 json 的支持（包括 C, C++, C#, Java, JavaScript, Perl, Python等）。 这样就使得 JSON 成为理想的数据交换格式。</p><ul><li>JSON 是一种<strong>轻量级</strong>的<strong>数据交换格式</strong>。</li><li><strong>轻量级</strong>指的是跟 xml 做比较。</li><li><strong>数据交换</strong>指的是客户端和服务器之间业务数据的传递格式。</li></ul><h3 id="JSON-在-JavaScript-中的使用（客户端）"><a href="#JSON-在-JavaScript-中的使用（客户端）" class="headerlink" title="JSON 在 JavaScript 中的使用（客户端）"></a>JSON 在 JavaScript 中的使用（客户端）</h3><h4 id="json-的定义"><a href="#json-的定义" class="headerlink" title="json 的定义"></a>json 的定义</h4><p>json 是由键值对组成，并且由<strong>花括号</strong>包围。每个键由<strong>引号</strong>引起来，键和值之间使用<strong>冒号</strong>进行分隔，多组键值对之间进行<strong>逗号</strong>进行分隔。</p><p>json 定义示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// json的定义</span><br>var json = <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">12</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//整型</span><br>    <span class="hljs-attr">&quot;key2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;abc&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//字符串</span><br>    <span class="hljs-attr">&quot;key3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//布尔值</span><br>    <span class="hljs-attr">&quot;key4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;arr&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//数组</span><br>    <span class="hljs-attr">&quot;key5&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// JSON对象</span><br>        <span class="hljs-attr">&quot;key5_1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">551</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;key5_2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;key5_2_value&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key6&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// JSON数组</span><br>        <span class="hljs-attr">&quot;key6_1_1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">6611</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;key6_1_2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;key6_1_2_value&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key6_2_1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">6621</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;key6_2_2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;key6_2_2_value&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><h4 id="json-的访问"><a href="#json-的访问" class="headerlink" title="json 的访问"></a>json 的访问</h4><ul><li><p>json 本身是一个对象。</p></li><li><p>json 中的 key 我们可以理解为是对象中的一个属性。</p></li><li><p>json 中的 key 访问就跟访问对象的属性一样： json 对象.key</p></li><li><p>json 中的 key 访问 还可以通过 json对象[“key”] 来访问</p></li><li><p>json 访问示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">alert(typeof(jsonObj)); <span class="hljs-comment">// object json 就是一个对象</span><br>alert(jsonObj.key1); <span class="hljs-comment">//12</span><br>alert(jsonObj.key2); <span class="hljs-comment">// abc</span><br>alert(jsonObj.key3); <span class="hljs-comment">// true</span><br>alert(jsonObj.key4);<span class="hljs-comment">// 得到数组 [11,&quot;arr&quot;,false]</span><br><br><span class="hljs-comment">// json 中 数组值的遍历</span><br>for(var i = <span class="hljs-number">0</span>; i &lt; jsonObj.key4.length; i++) <span class="hljs-punctuation">&#123;</span><br>    alert(jsonObj.key4<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span>);<br><span class="hljs-punctuation">&#125;</span><br>alert(jsonObj.key5.key5_1);<span class="hljs-comment">//551</span><br>alert(jsonObj.key5.key5_2);<span class="hljs-comment">//key5_2_value</span><br><br>alert( jsonObj.key6 );<br><span class="hljs-comment">// 得到 json 数组，取出来每一个元素都是 json 对象</span><br>var jsonItem = jsonObj.key6<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span>;<br><span class="hljs-comment">// alert( jsonItem.key6_1_1 ); //6611</span><br>alert( jsonItem.key6_1_2 ); <span class="hljs-comment">//key6_1_2_value</span><br><br>alert(json<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;key6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;key6_2_2&quot;</span><span class="hljs-punctuation">]</span>); <span class="hljs-comment">//key6_2_2_value</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="json-的两个常用方法"><a href="#json-的两个常用方法" class="headerlink" title="json 的两个常用方法"></a>json 的两个常用方法</h4><ul><li><p>json 的存在有两种形式。</p><ul><li>1）以对象的形式存在，我们叫它 json 对象。</li><li>2）以字符串的形式存在，我们叫它 json 字符串。</li><li>一般我们要<strong>操作 json 中的数据</strong>的时候，需要 <strong>json 对象</strong>的格式。</li><li>一般我们要在客户端和服务器之间进行<strong>数据交换</strong>的时候，使用 <strong>json 字符串</strong>。</li><li><strong>JSON.stringify()</strong>        把 json 对象转换成为 json 字符串</li><li><strong>JSON.parse()</strong>            把 json 字符串转换成为 json 对象</li></ul></li><li><p>示例代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 把 json 对象转换成为 json 字符串</span><br>var jsonObjString = JSON.stringify(jsonObj); <span class="hljs-comment">// 特别像 Java 中对象的 toString</span><br>alert(jsonObjString)<br><br><span class="hljs-comment">// 把 json 字符串。转换成为 json 对象</span><br>var jsonObj2 = JSON.parse(jsonObjString);<br>alert(jsonObj2.key1);<span class="hljs-comment">// 12</span><br>alert(jsonObj2.key2);<span class="hljs-comment">// abc</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="JSON-在-java-中的使用-（服务器端）"><a href="#JSON-在-java-中的使用-（服务器端）" class="headerlink" title="JSON 在 java 中的使用 （服务器端）"></a>JSON 在 java 中的使用 （服务器端）</h3><p>注意：在Java中，如果要操作JSON，要先导入JSON的jar包</p><p> <img src="/2022/10/03/JavaWebNote/image-20221107150829615.png" alt="image-20221107150829615"></p><h4 id="javaBean-和-json-的互转"><a href="#javaBean-和-json-的互转" class="headerlink" title="javaBean 和 json 的互转"></a>javaBean 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot; 国哥好帅!&quot;</span>);<br>    <span class="hljs-comment">// 创建 Gson 对象实例</span><br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-comment">// toJson 方法可以把 java 对象转换成为 json 字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>    System.out.println(personJsonString);<br>    <span class="hljs-comment">// fromJson 把 json 字符串转换回 Java 对象</span><br>    <span class="hljs-comment">// 第一个参数是 json 字符串</span><br>    <span class="hljs-comment">// 第二个参数是转换回去的 Java 对象类型</span><br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> gson.fromJson(personJsonString, Person.class);<br>    System.out.println(person1);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="List-和-json-的互转"><a href="#List-和-json-的互转" class="headerlink" title="List 和 json 的互转"></a>List 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.2.2 、 List 和 json 的互转</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Person&gt; personList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;国哥&quot;</span>));<br>    personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;康师傅&quot;</span>));<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-comment">// 把 List 转换为 json 字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">personListJsonString</span> <span class="hljs-operator">=</span> gson.toJson(personList);<br>    System.out.println(personListJsonString);<br><br>    <span class="hljs-comment">// 把 json 字符串转换回 List</span><br>    <span class="hljs-comment">//方法一：需要单独创建一个类，该类要继承TypeToken&lt;List&lt;类&gt;&gt;，里面可以什么都不填</span><br>    <span class="hljs-comment">//        List&lt;Person&gt; list = gson.fromJson(personListJsonString,</span><br>    <span class="hljs-comment">//                          new PersonListType().getType());</span><br>    <span class="hljs-comment">//方法二：使用匿名内部类，就不需要单独创建一个类</span><br>    List&lt;Person&gt; list = gson.fromJson(personListJsonString,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;ArrayList&lt;Person&gt;&gt;()&#123;&#125;.getType());<br><br>    System.out.println(list);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>    System.out.println(person);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把 json 字符串转换回 List</span><br><span class="hljs-comment">// 需要为成功转换回原来的 List&lt;类&gt; 创建一个类，继承TypeToken&lt;List&lt;类&gt;&gt;，里面可以什么都不填</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonListType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeToken</span>&lt;ArrayList&lt;Person&gt;&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="map-和-json-的互转"><a href="#map-和-json-的互转" class="headerlink" title="map 和 json 的互转"></a>map 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.2.3 、 map 和 json 的互转</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;Integer,Person&gt; personMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    personMap.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot; 国哥好帅&quot;</span>));<br>    personMap.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot; 康师傅也好帅&quot;</span>));<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <br>    <span class="hljs-comment">// 把 map 集合转换成为 json 字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">personMapJsonString</span> <span class="hljs-operator">=</span> gson.toJson(personMap);<br>    System.out.println(personMapJsonString);<br>    <br>    <span class="hljs-comment">// 把 json 字符串转换为 map 集合</span><br>    <span class="hljs-comment">// 创建一个类继承TypeToken的方法</span><br>    <span class="hljs-comment">// Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(personMapJsonString, new</span><br>    <span class="hljs-comment">//PersonMapType().getType());</span><br>    <span class="hljs-comment">// 不需要单独创建一个类的方法（使用匿名内部类）</span><br>    Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(personMapJsonString, <br>                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;HashMap&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());<br>    System.out.println(personMap2);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> personMap2.get(<span class="hljs-number">1</span>);<br>    System.out.println(p);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AJAX-请求"><a href="#AJAX-请求" class="headerlink" title="AJAX 请求"></a>AJAX 请求</h2><h3 id="什么是-AJAX-请求"><a href="#什么是-AJAX-请求" class="headerlink" title="什么是 AJAX 请求"></a>什么是 AJAX 请求</h3><ul><li>AJAX 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</li><li>AJAX 是一种浏览器通过 <strong>js 异步</strong>发起请求，<strong>局部更新</strong>页面的技术。</li><li>Ajax 请求的局部更新，浏览器地址栏不会发生变化，局部更新不会舍弃原来页面的内容</li></ul><h3 id="原生-AJAX-请求的示例"><a href="#原生-AJAX-请求的示例" class="headerlink" title="原生 AJAX 请求的示例"></a>原生 AJAX 请求的示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- html页面（前端） --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 在这里使用javaScript语言发起Ajax请求，</span></span><br><span class="language-javascript"><span class="hljs-comment">// 访问AjaxServlet中的javaScriptAjax</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxRequest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 1、我们首先要创建XMLHttpRequest </span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> xmlHttpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"><span class="hljs-comment">// 2、调用open方法设置请求参数</span></span><br><span class="language-javascript">xmlHttpRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080/&quot;</span> +</span><br><span class="language-javascript"><span class="hljs-string">&quot;study_16_json_ajax_i18n/ajaxServlet?action=javaScriptAjax&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript"><span class="hljs-comment">// 3、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span><br><span class="language-javascript">xmlHttpRequest.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(xmlHttpRequest.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> </span><br><span class="language-javascript">                       &amp;&amp; xmlHttpRequest.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// alert(xmlHttpRequest.responseText);</span></span><br><span class="language-javascript"><span class="hljs-comment">// 把响应返回的数据显示在页面上</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> jsonObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xmlHttpRequest.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div01&quot;</span>).<span class="hljs-property">innerHTML</span> =</span><br><span class="language-javascript"><span class="hljs-string">&quot;编号：&quot;</span>+ jsonObj.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;&lt;br/&gt; 姓名：&quot;</span> + jsonObj.<span class="hljs-property">name</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 4、调用send方法发送请求</span></span><br><span class="language-javascript">xmlHttpRequest.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ajaxRequest()&quot;</span>&gt;</span>ajax request<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>不会变化<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AjaxServlet 程序（后端）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaScriptAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Ajax请求过来了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web.xml配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>AjaxServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.study.servlet.AjaxServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>AjaxServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/ajaxServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jQuery-中的-AJAX-请求"><a href="#jQuery-中的-AJAX-请求" class="headerlink" title="jQuery 中的 AJAX 请求"></a>jQuery 中的 AJAX 请求</h3><ul><li><p>$.ajax 方法</p><ul><li>url                       表示请求的地址</li><li>type                    表示请求的类型 GET 或 POST 请求</li><li>data                    表示发送给服务器的数据<ul><li>data 的格式有两种：</li><li>一：name&#x3D;value&amp;name&#x3D;value</li><li>二：{key:value}</li></ul></li><li>success              请求成功，响应的回调函数</li><li>dataType           响应的数据类型（预期服务器返回的数据类型）<ul><li>常用的数据类型有：</li><li>text      表示纯文本</li><li>xml      表示 xml 数据</li><li>json     表示 json 对象</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/study_16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>        <span class="hljs-comment">// data:&quot;action=jQueryAjax&quot;,</span><br>        <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">action</span>:<span class="hljs-string">&quot;jQueryAjax&quot;</span>&#125;,<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-comment">// 函数括号里需要填上一个参数，该参数用来接收服务器返回的数据</span><br>            <span class="hljs-comment">// alert(&quot;服务器返回的数据是：&quot;+data);</span><br>            <span class="hljs-comment">// var jsonObj = JSON.parse(data);</span><br>            $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;编号：&quot;</span>+ data.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;&lt;br/&gt;姓名：&quot;</span> + data.<span class="hljs-property">name</span>);<br>        &#125;,<br>        <span class="hljs-comment">// dataType:&quot;text&quot;</span><br>        <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;json&quot;</span><br>    &#125;);<br><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>$.get 方法 和 $.post 方法</p><ul><li>url               请求的 url 地址</li><li>data            发送的数据</li><li>callback      成功的回调函数</li><li>type             返回的数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ajax--get 请求</span><br>$(<span class="hljs-string">&quot;#getBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>          <span class="hljs-string">&quot;action=jQueryGet&quot;</span>,<br>          <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot; get 编号：&quot;</span> + data.<span class="hljs-property">id</span> + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.<span class="hljs-property">name</span>);<br>      &#125;,<br>          <span class="hljs-string">&quot;json&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// ajax--post 请求</span><br>$(<span class="hljs-string">&quot;#postBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>        <span class="hljs-string">&quot;action=jQueryPost&quot;</span>,<br>            <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot; post 编号：&quot;</span> + data.<span class="hljs-property">id</span> + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.<span class="hljs-property">name</span>);<br>    &#125;,<br>            <span class="hljs-string">&quot;json&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>$.getJSON 方法</p><ul><li>url              请求的 url 地址</li><li>data           发送给服务器的数据</li><li>callback     成功的回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ajax--getJson 请求</span><br>$(<span class="hljs-string">&quot;#getJSONBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>              <span class="hljs-string">&quot;action=jQueryGetJSON&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot; getJSON 编号：&quot;</span> + data.<span class="hljs-property">id</span> + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.<span class="hljs-property">name</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>表单序列化 serialize()</p><p>serialize() 可以把表单中所有表单项的内容都获取到，并以 name&#x3D;value&amp;name&#x3D;value 的形式进行拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// ajax 请求</span><br>$(<span class="hljs-string">&quot;#submit&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 把参数序列化</span><br>    $.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>          <span class="hljs-string">&quot;action=jQuerySerialize&amp;&quot;</span> + $(<span class="hljs-string">&quot;#form01&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>              <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>         $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot; Serialize 编号：&quot;</span> + data.<span class="hljs-property">id</span> + <br>                                <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.<span class="hljs-property">name</span>);<br>      &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="AjaxServlet-后端-java-程序"><a href="#AjaxServlet-后端-java-程序" class="headerlink" title="AjaxServlet 后端 java 程序"></a>AjaxServlet 后端 java 程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaScriptAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Ajax请求过来了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQueryAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot; jQueryAjax == 方法调用了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQueryGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot; jQueryGet == 方法调用了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQueryPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot; jQueryPost == 方法调用了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQueryGetJSON</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot; jQueryGetJSON == 方法调用了&quot;</span>);<br><br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQuerySerialize</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 报错：No &#x27;Access-Control-Allow-Origin&#x27; header 解决方法：</span><br>        resp.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot; jQuerySerialize == 方法调用了&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;用户名:&quot;</span>+req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span>+req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">// 响应，回传数据（假设要回传 person 对象）</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥&quot;</span>);<br>        <span class="hljs-comment">// 交互传输需要 json格式的字符串</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        <span class="hljs-comment">// 响应</span><br>        resp.getWriter().write(personJsonString);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i18n-国际化"><a href="#i18n-国际化" class="headerlink" title="i18n 国际化"></a>i18n 国际化</h2><h3 id="什么是-i18n-国际化"><a href="#什么是-i18n-国际化" class="headerlink" title="什么是 i18n 国际化"></a>什么是 i18n 国际化</h3><ul><li>国际化（Internationalization）指的是同一个网站可以支持多种不同的语言，以方便不同国家，不同语种的用户访问。</li><li>关于国际化我们想到的最简单的方案就是为不同的国家创建不同的网站，比如苹果公司，他的英文官网是：<br><a href="http://www.apple.com/">http://www.apple.com</a> 而中国官网是 <a href="http://www.apple.com/cn">http://www.apple.com/cn</a></li><li>苹果公司这种方案并不适合全部公司，而我们希望相同的一个网站，而不同人访问的时候可以根据用户所在的区域显示不同的语言文字，而网站的布局样式等不发生改变。</li><li>于是就有了我们说的国际化，国际化总的来说就是同一个网站不同国家的人来访问可以显示出不同的语言。但实际上这种需求并不强烈，一般真的有国际化需求的公司，主流采用的依然是苹果公司的那种方案，为不同的国家创建不同的页面。所以国际化的内容我们了解一下即可。</li><li>国际化的英文 Internationalization，但是由于拼写过长，老外想了一个简单的写法叫做 I18N，代表的是 Internationalization这个单词，以 I 开头，以 N 结尾，而中间是 18 个字母，所以简写为 I18N。以后我们说 I18N 和国际化是一个意思。</li></ul><h3 id="国际化相关要素介绍"><a href="#国际化相关要素介绍" class="headerlink" title="国际化相关要素介绍"></a>国际化相关要素介绍</h3><p><img src="/2022/10/03/JavaWebNote/image-20221112143554038.png" alt="image-20221112143554038"></p><h3 id="国际化资源-properties-测试-测试"><a href="#国际化资源-properties-测试-测试" class="headerlink" title="国际化资源 properties 测试 测试"></a>国际化资源 properties 测试 测试</h3><ul><li><p>配置两个语言的配置文件：</p><ul><li><p>i18n_en_US.properties 英文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">username</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">password</span><br><span class="hljs-attr">sex</span>=<span class="hljs-string">sex</span><br><span class="hljs-attr">age</span>=<span class="hljs-string">age</span><br><span class="hljs-attr">regist</span>=<span class="hljs-string">regist</span><br><span class="hljs-attr">boy</span>=<span class="hljs-string">boy</span><br><span class="hljs-attr">email</span>=<span class="hljs-string">email</span><br><span class="hljs-attr">girl</span>=<span class="hljs-string">girl</span><br><span class="hljs-attr">reset</span>=<span class="hljs-string">reset</span><br><span class="hljs-attr">submit</span>=<span class="hljs-string">submit</span><br></code></pre></td></tr></table></figure></li><li><p>i18n_zh_CN.properties 中文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>= <span class="hljs-string">用户名</span><br><span class="hljs-attr">password</span>= <span class="hljs-string">密码</span><br><span class="hljs-attr">sex</span>= <span class="hljs-string">性别</span><br><span class="hljs-attr">age</span>= <span class="hljs-string">年龄</span><br><span class="hljs-attr">regist</span>= <span class="hljs-string">注册</span><br><span class="hljs-attr">boy</span>= <span class="hljs-string">男</span><br><span class="hljs-attr">girl</span>= <span class="hljs-string">女</span><br><span class="hljs-attr">email</span>= <span class="hljs-string">邮箱</span><br><span class="hljs-attr">reset</span>= <span class="hljs-string">重置</span><br><span class="hljs-attr">submit</span>= <span class="hljs-string">提交</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>国际化测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">I18nTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLocale</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 获取你系统默认的语言。国家信息</span><br>        <span class="hljs-comment">// Locale locale = Locale.getDefault();</span><br>        <span class="hljs-comment">// System.out.println(locale);</span><br>        <span class="hljs-comment">// for (Locale availableLocale : Locale.getAvailableLocales()) &#123;</span><br>        <span class="hljs-comment">// System.out.println(availableLocale);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// 获取中文，中文的常量的 Locale 对象</span><br>        System.out.println(Locale.CHINA);<br>        <span class="hljs-comment">// 获取英文，美国的常量的 Locale 对象</span><br>        System.out.println(Locale.US);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testI18n</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 得到我们需要的 Locale 对象</span><br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> Locale.CHINA;<br>        <span class="hljs-comment">// 通过指定的 basename 和 Locale 对象，读取 相应的配置文件</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;i18n&quot;</span>, locale);<br>        <br>        System.out.println(<span class="hljs-string">&quot;username ：&quot;</span> + bundle.getString(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;password ：&quot;</span> + bundle.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;Sex ：&quot;</span> + bundle.getString(<span class="hljs-string">&quot;sex&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;age ：&quot;</span> + bundle.getString(<span class="hljs-string">&quot;age&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="通过请求头国际化页面"><a href="#通过请求头国际化页面" class="headerlink" title="通过请求头国际化页面"></a>通过请求头国际化页面</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Locale&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ResourceBundle&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;pragma&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;cache-control&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Expires&quot;</span> content=<span class="hljs-string">&quot;0&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>        &lt;title&gt;Insert title here&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;%<br>        <span class="hljs-comment">// 从请求头中获取 Locale 信息（语言）</span><br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> request.getLocale();<br>        System.out.println(locale);<br>        <span class="hljs-comment">// 获取读取包（根据 指定的 baseName 和 Locale 读取 语言信息）</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">i18n</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;i18n&quot;</span>, locale);<br>        %&gt;<br>        &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;中文&lt;/a&gt;|<br>        &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;english&lt;/a&gt;<br>        &lt;center&gt;<br>            &lt;h1&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;regist&quot;</span>)%&gt;&lt;/h1&gt;<br>            &lt;table&gt;<br>                &lt;form&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;username&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;username&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;password&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;password&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;sex&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;boy&quot;</span>)%&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;girl&quot;</span>)%&gt;<br>                        &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;email&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td colspan=<span class="hljs-string">&quot;2&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;reset&quot;</span> value=<span class="hljs-string">&quot;&lt;%=i18n.getString(&quot;</span>reset<span class="hljs-string">&quot;)%&gt;&quot;</span> /&gt;&amp;nbsp;&amp;nbsp;<br>                            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;&lt;%=i18n.getString(&quot;</span>submit<span class="hljs-string">&quot;)%&gt;&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                &lt;/form&gt;<br>            &lt;/table&gt;<br>            &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;<br>        &lt;/center&gt;<br>        国际化测试：<br>        &lt;br /&gt; <span class="hljs-number">1</span>、访问页面，通过浏览器设置，请求头信息确定国际化语言。<br>        &lt;br /&gt; <span class="hljs-number">2</span>、通过左上角，手动切换语言<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="通过显示的选择语言类型进行国际化"><a href="#通过显示的选择语言类型进行国际化" class="headerlink" title="通过显示的选择语言类型进行国际化"></a>通过显示的选择语言类型进行国际化</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Locale&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ResourceBundle&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;pragma&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;cache-control&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Expires&quot;</span> content=<span class="hljs-string">&quot;0&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>        &lt;title&gt;Insert title here&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;%<br>        <span class="hljs-comment">// 从请求头中获取 Locale 信息（语言）</span><br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">country</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;country&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;cn&quot;</span>.equals(country)) &#123;<br>            locale = Locale.CHINA;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;usa&quot;</span>.equals(country)) &#123;<br>            locale = Locale.US;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            locale = request.getLocale();<br>        &#125;<br>        System.out.println(locale);<br>        <span class="hljs-comment">// 获取读取包（根据 指定的 baseName 和 Locale 读取 语言信息）</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">i18n</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;i18n&quot;</span>, locale);<br>        %&gt;<br>        &lt;a href=<span class="hljs-string">&quot;i18n.jsp?country=cn&quot;</span>&gt;中文&lt;/a&gt;|<br>        &lt;a href=<span class="hljs-string">&quot;i18n.jsp?country=usa&quot;</span>&gt;english&lt;/a&gt;<br>        &lt;center&gt;<br>            &lt;h1&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;regist&quot;</span>)%&gt;&lt;/h1&gt;<br>            &lt;table&gt;<br>                &lt;form&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;username&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;username&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;password&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;password&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;sex&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;boy&quot;</span>)%&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;girl&quot;</span>)%&gt;<br>                        &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;%=i18n.getString(<span class="hljs-string">&quot;email&quot;</span>)%&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td colspan=<span class="hljs-string">&quot;2&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;reset&quot;</span> value=<span class="hljs-string">&quot;&lt;%=i18n.getString(&quot;</span>reset<span class="hljs-string">&quot;)%&gt;&quot;</span> /&gt;&amp;nbsp;&amp;nbsp;<br>                            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;&lt;%=i18n.getString(&quot;</span>submit<span class="hljs-string">&quot;)%&gt;&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                &lt;/form&gt;<br>            &lt;/table&gt;<br>            &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;<br>        &lt;/center&gt;<br>        国际化测试：<br>        &lt;br /&gt; <span class="hljs-number">1</span>、访问页面，通过浏览器设置，请求头信息确定国际化语言。<br>        &lt;br /&gt; <span class="hljs-number">2</span>、通过左上角，手动切换语言<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="JSTL-标签库实现国际化"><a href="#JSTL-标签库实现国际化" class="headerlink" title="JSTL 标签库实现国际化"></a>JSTL 标签库实现国际化</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<span class="hljs-number">1</span> 使用标签设置 Locale 信息 --%&gt;<br>&lt;fmt:setLocale value=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>&lt;%--<span class="hljs-number">2</span> 使用标签设置 baseName--%&gt;<br>&lt;fmt:setBundle basename=<span class="hljs-string">&quot;&quot;</span>/&gt;<br>&lt;%--<span class="hljs-number">3</span> 使用标签输出指定 key 的国际化信息 --%&gt;<br>&lt;fmt:message key=<span class="hljs-string">&quot;&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;fmt&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;pragma&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;cache-control&quot;</span> content=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Expires&quot;</span> content=<span class="hljs-string">&quot;0&quot;</span> /&gt;<br>        &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>        &lt;title&gt;Insert title here&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        &lt;%--<span class="hljs-number">1</span> 使用标签设置 Locale 信息 --%&gt;<br>        &lt;fmt:setLocale value=<span class="hljs-string">&quot;$&#123;param.locale&#125;&quot;</span> /&gt;<br>        &lt;%--<span class="hljs-number">2</span> 使用标签设置 baseName--%&gt;<br>        &lt;fmt:setBundle basename=<span class="hljs-string">&quot;i18n&quot;</span>/&gt;<br>        &lt;a href=<span class="hljs-string">&quot;i18n_fmt.jsp?locale=zh_CN&quot;</span>&gt;中文&lt;/a&gt;|<br>        &lt;a href=<span class="hljs-string">&quot;i18n_fmt.jsp?locale=en_US&quot;</span>&gt;english&lt;/a&gt;<br>        &lt;center&gt;<br>            &lt;h1&gt;&lt;fmt:message key=<span class="hljs-string">&quot;regist&quot;</span> /&gt;&lt;/h1&gt;<br>            &lt;table&gt;<br>                &lt;form&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;fmt:message key=<span class="hljs-string">&quot;username&quot;</span> /&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;username&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;fmt:message key=<span class="hljs-string">&quot;password&quot;</span> /&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;password&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;fmt:message key=<span class="hljs-string">&quot;sex&quot;</span> /&gt;&lt;/td&gt;<br>                        &lt;td&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;fmt:message key=<span class="hljs-string">&quot;boy&quot;</span> /&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> /&gt;&lt;fmt:message key=<span class="hljs-string">&quot;girl&quot;</span> /&gt;<br>                        &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;fmt:message key=<span class="hljs-string">&quot;email&quot;</span> /&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td colspan=<span class="hljs-string">&quot;2&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>                            &lt;input type=<span class="hljs-string">&quot;reset&quot;</span> value=<span class="hljs-string">&quot;&lt;fmt:message key=&quot;</span>reset<span class="hljs-string">&quot; /&gt;&quot;</span> /&gt;&amp;nbsp;&amp;nbsp;<br>                            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;&lt;fmt:message key=&quot;</span>submit<span class="hljs-string">&quot; /&gt;&quot;</span> /&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                &lt;/form&gt;<br>            &lt;/table&gt;<br>            &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;<br>        &lt;/center&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/06/30/JavaNote/"/>
    <url>/2022/06/30/JavaNote/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-转义字符"><a href="#Java-转义字符" class="headerlink" title="Java 转义字符"></a>Java 转义字符</h2><h3 id="Java-常用的转义字符"><a href="#Java-常用的转义字符" class="headerlink" title="Java 常用的转义字符"></a>Java 常用的转义字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">在控制台，输入 tab 键，可以实现命令补全<br>\t ：一个制表位，实现对齐的功能<br>\n ：换行符<br>\\ ：一个\<br>\<span class="hljs-string">&quot; :一个&quot;</span><br>\<span class="hljs-string">&#x27; ：一个&#x27;</span><br>\r :一个回车 System.out.println(<span class="hljs-string">&quot;韩顺平教育\r 北京&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量表示内存中的一个存储区域 [不同的变量，类型不同，占用的空间大小不同]</p><p>比如： int 4 个字节，double 就是 8 个字节</p></li><li><p>该区域有自己的名称[变量名] 和类型[数据类型]</p></li><li><p>变量必须先声明，后使用，即有顺序</p></li><li><p>该区域的数据&#x2F;值可以在同一类型范围内不断变化</p></li><li><p>变量在同一个作用域内不能重名</p></li><li><p>变量 &#x3D; 变量名 + 值 + 数据类型 【变量三要素】</p></li></ul><h3 id="程序中-号的使用"><a href="#程序中-号的使用" class="headerlink" title="程序中 +号的使用"></a>程序中 +号的使用</h3><ul><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边有一方为字符串，则做拼接运算</li><li>运算顺序为从左到右</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span> + <span class="hljs-number">98</span>);  <span class="hljs-comment">//198</span><br>System.out.println(<span class="hljs-string">&quot;100&quot;</span> + <span class="hljs-number">98</span>);  <span class="hljs-comment">//10098</span><br>System.out.println(<span class="hljs-number">100</span> + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;hello&quot;</span>);  <span class="hljs-comment">//103hello</span><br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-number">100</span> + <span class="hljs-number">3</span>);  <span class="hljs-comment">//hello1003</span><br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节)。</p> <img src="image-20220914094409741.png" alt="image-20220914094409741" style="zoom:60%;" /><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="整型的类型"><a href="#整型的类型" class="headerlink" title="整型的类型"></a>整型的类型</h4> <img src="image-20220914095054681.png" alt="image-20220914095054681" style="zoom:50%;" /><h4 id="整型的使用细节"><a href="#整型的使用细节" class="headerlink" title="整型的使用细节"></a>整型的使用细节</h4><ul><li>Java 各整数类型有固定的范围和字段长度，不受具体OS[操作系统]的影响，以保证java程序的可移植性</li><li>Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加 ‘l’ 或 ‘L’</li><li>Java 程序中变量常声明为 int 型，除非不足以表示大数，才使用 long</li><li>bit（比特）：计算机中的最小存储单位。</li><li>byte（字节）：计算机中基本存储单元，1 byte &#x3D; 8 bit</li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>Java 的浮点类型可以表示一个小数，比如 123.4 ，7.8 ，0.12 等等</p><h4 id="浮点型的分类"><a href="#浮点型的分类" class="headerlink" title="浮点型的分类"></a>浮点型的分类</h4> <img src="image-20220914095723827.png" alt="image-20220914095723827" style="zoom:60%;" /><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><p>关于浮点数在机器中存放形式的简单说明，<strong>浮点数 &#x3D; 符号位 + 指数位 + 尾数位</strong></p></li><li><p>尾数部分可能丢失，造成精度损失(小数都是近似值)。</p></li></ol><h4 id="浮点型使用细节"><a href="#浮点型使用细节" class="headerlink" title="浮点型使用细节"></a>浮点型使用细节</h4><ul><li><p>与整数类似，Java 浮点类型也有固定的范围和字段长度，不受具体OS的影响。</p><p>[float 4 个字节，double 8 个字节]</p></li><li><p>Java 的浮点型常量（具体值）默认为 double 型，声明 float 型常量，须后加 ‘f’ 或 ‘F’</p></li><li><p>浮点型常量有两种表示形式</p><p>十进制数形式：如：5.12512.0f        .572      （必须有小数点）</p><p>科学计数法形式：如：5.12e2（5.12*10的2次方）  5.12E-2（5.12&#x2F;10的2次方）</p></li><li><p>通常情况下，应该是使用 double 型，因为它比 float 型更精确</p></li><li><p>浮点数使用陷阱：2.7 和 8.1&#x2F;3 比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//浮点数使用陷阱: 2.7 和 8.1 / 3 比较</span><br><span class="hljs-comment">//看看一段代码</span><br><span class="hljs-type">double</span> <span class="hljs-variable">num11</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.7</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">num12</span> <span class="hljs-operator">=</span> <span class="hljs-number">8.1</span>/<span class="hljs-number">3</span>; <span class="hljs-comment">//8.1 / 3; //2.7</span><br>System.out.println(num11);<span class="hljs-comment">//2.7</span><br>System.out.println(num12);<span class="hljs-comment">//接近 2.7 的一个小数，而不是 2.7</span><br><span class="hljs-comment">//得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断是，要小心</span><br><span class="hljs-comment">//应该是以两个数的差值的绝对值，在某个精度范围类判断</span><br><span class="hljs-keyword">if</span>( num11 == num12) &#123;  <span class="hljs-comment">//错误</span><br>System.out.println(<span class="hljs-string">&quot;num11 == num12 相等&quot;</span>);<br>&#125;<br><span class="hljs-comment">//正确的写法</span><br><span class="hljs-type">double</span> num1=<span class="hljs-number">2.7</span>;<br><span class="hljs-type">double</span> num2=<span class="hljs-number">8.1</span>/<span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span>(Math.abs(num7-num8)&lt;<span class="hljs-number">0.00001</span>)&#123;  <span class="hljs-comment">//正确</span><br>System.out.println(<span class="hljs-string">&quot;相等~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h3><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>字符类型（char）可表示单个字符，char 是两个字节（Java 中 char 使用 Unicode 编码，可以存放汉字）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;韩&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-number">97</span>;<br></code></pre></td></tr></table></figure><h4 id="字符类型使用细节"><a href="#字符类型使用细节" class="headerlink" title="字符类型使用细节"></a>字符类型使用细节</h4><ul><li>字符常量是用单引号（’’）括起来的单个字符，例如 char c1 &#x3D; ‘a’;  char c2 &#x3D; ‘\t’;  char c3 &#x3D; ‘韩’;  char c4 &#x3D; 97;</li><li>Java 中还允许使用转义字符 ‘\‘ 来将其后的字符转变为特殊字符型常量。例如 char c &#x3D; ‘\n’;  ‘\n’ 表示换行符</li><li>在java中，char的本质是一个整数，在输出时，时unicode码对应的字符</li><li>可以直接给char赋一个整数，然后输出时，会按照对应的unicode字符输出  [97 -&gt; a]</li><li>char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharDetail</span> &#123;<br>    <span class="hljs-comment">//编写一个 main 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//在 java 中，char 的本质是一个整数，在默认输出时，是 unicode 码对应的字符</span><br>        <span class="hljs-comment">//要输出对应的数字，可以(int)字符</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-number">97</span>;<br>        System.out.println(c1); <span class="hljs-comment">// a</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">//输出&#x27;a&#x27; 对应的 数字</span><br>        System.out.println((<span class="hljs-type">int</span>)c2);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;韩&#x27;</span>;<br>        System.out.println((<span class="hljs-type">int</span>)c3);<span class="hljs-comment">//38889</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-number">38889</span>;<br>        System.out.println(c4);<span class="hljs-comment">//韩</span><br>        <span class="hljs-comment">//char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码.</span><br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">10</span>);<span class="hljs-comment">//107</span><br>        <span class="hljs-comment">//课堂小测试</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;b&#x27;</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//98+1==&gt; 99</span><br>        System.out.println((<span class="hljs-type">int</span>)c5); <span class="hljs-comment">//99</span><br>        System.out.println(c5); <span class="hljs-comment">//99-&gt;对应的字符-&gt;编码表 ASCII(规定好的)=&gt;c</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//补充了一个增强for</span><br><span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>&#125;;<br><span class="hljs-comment">//普通的for循环</span><br>System.out.println(<span class="hljs-string">&quot;=====普通的for=====&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    System.out.println(nums[i]);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;=====增强的for=====&quot;</span>);<br><span class="hljs-comment">//执行流程是 依次从nums数组中取出数据，赋给i, 如果取出完毕，则退出for</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : nums) &#123;<br>    System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i);<br>&#125;<br></code></pre></td></tr></table></figure><p>增强 for 不能做删除元素等操作，否则会出错</p><p>三元运算符  是一个整体</p><p>IDEA 显示所有的快捷键的的快捷键 ctrl + j</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="包的三大作用"><a href="#包的三大作用" class="headerlink" title="包的三大作用"></a>包的三大作用</h3><ol><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类 [看Java api 文档，一个包里面存放相对应的接口和类等等]</li><li>控制访问范围</li></ol><h3 id="包的基本语法"><a href="#包的基本语法" class="headerlink" title="包的基本语法"></a>包的基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>package：关键字，表示打包</li><li>com.java_study：表示包名，实际上就是文件夹 com\java_study\</li></ol><h3 id="包的本质分析（原理）"><a href="#包的本质分析（原理）" class="headerlink" title="包的本质分析（原理）"></a>包的本质分析（原理）</h3><p>包的本质实际上就是创建不同的文件夹来保存类文件</p><p> <img src="/2022/06/30/JavaNote/image-20220830151659522.png" alt="image-20220830151659522"></p><h3 id="包的快速入门"><a href="#包的快速入门" class="headerlink" title="包的快速入门"></a>包的快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.use;<br><br><span class="hljs-keyword">import</span> com.xiaoqiang.Dog;<br><span class="hljs-comment">//import com.xiaoming.Dog;  //报错：已在单类型导入中定义 &#x27;com.xiaoqiang.Dog&#x27;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">// com.xiaoqiang.Dog dog = new com.xiaoqiang.Dog(); //把包名写全也可以</span><br>        System.out.println(dog);  <span class="hljs-comment">//com.xiaoqiang.Dog@7c30a502</span><br><br>        com.xiaoming.<span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.xiaoming.Dog(); <span class="hljs-comment">//带有包名</span><br>        System.out.println(dog1);  <span class="hljs-comment">//com.xiaoming.Dog@49e4cb85</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.xiaoming;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.xiaoqiang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><ul><li><p>命名规则：</p><p>只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">demo</span>.<span class="hljs-number">12</span>a  //错误，<span class="hljs-number">12</span>a是数字开头<br></code></pre></td></tr></table></figure></li><li><p>命名规范</p><p>一般时小写字母 + 小圆点：com.公司名.项目名.业务模块名</p></li></ul><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><ul><li>java.lang.*  &#x2F;&#x2F;lang包是基本包，默认引入，不需要再手动引入</li><li>java.util.*  &#x2F;&#x2F;util包，系统提供的工具包，工具类，使用 Scanner</li><li>java.net.*  &#x2F;&#x2F;网络包，网络开发</li><li>java.awt.*  &#x2F;&#x2F;是做java的界面开发，GUI</li></ul><h3 id="包的使用细节"><a href="#包的使用细节" class="headerlink" title="包的使用细节"></a>包的使用细节</h3><ul><li><p>如何引入包</p><ol><li>import 包.类  &#x2F;&#x2F;只引入该包里面的这一个类</li><li>import 包.*  &#x2F;&#x2F;该包里面的所有类都引入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.java_study.pkg;<br><br><span class="hljs-keyword">import</span>  java.util.Scanner;  <span class="hljs-comment">//表示只会引入java.util 包下的 Scanner类</span><br><span class="hljs-keyword">import</span>  java.util.*;  <span class="hljs-comment">//表示将java.util 包下的所有类都引入(导入)</span><br><span class="hljs-comment">//建议：需要使用哪个类，就导入哪个类即可，即推荐使用第一种方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Import01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//... ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项和使用细节</p><ol><li>package 的作用是声明当前类所在的包，需要放在class的最上面，一个类中最多只有一条package语句</li><li>import指令 位置放在package的下面，在类定义前面，可以有多句且没有顺序要求</li><li><strong>同包的不同类之间可以直接使用，不需要导入</strong></li></ol></li></ul><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>java 提供四种访问控制修饰符号，用于控制 方法和属性 的访问权限：</p><ol><li>public：对外公开</li><li>protected：对子类和同一个包中的类公开</li><li>默认：向同一个包的类公开</li><li>private：只有本类可以访问，不对外公开</li></ol> <img src="image-20220830161016547.png" alt="image-20220830161016547" style="zoom: 80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.modifier;<br><span class="hljs-keyword">import</span> com.java_study.pkg.D;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a.func1();  <span class="hljs-comment">//本类方法，四种访问修饰符均可访问</span><br><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.func2();  <span class="hljs-comment">//同包不同类方法，private 不可访问，其它三种均可</span><br><br>        <span class="hljs-type">D</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br>        d.func4();  <span class="hljs-comment">//不同包下，只能访问 public</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 只有 public 和 默认 可以修饰类</span><br><span class="hljs-comment">// 在一个文件中只能有一个 public 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><br>    <span class="hljs-comment">//四个属性，分别使用不同的访问修饰符修饰</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//本类的方法，四种访问修饰的都可以访问到</span><br>        <span class="hljs-comment">//该方法可以访问上面四个属性</span><br>        System.out.println(<span class="hljs-string">&quot;n1=&quot;</span> + n1 + <span class="hljs-string">&quot; n2=&quot;</span> + n2 + <span class="hljs-string">&quot; n3=&quot;</span> + n3 + <span class="hljs-string">&quot; n4=&quot;</span> + n4);<br>    &#125;<br><br>    <span class="hljs-comment">//成员方法也一样</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//在同一类中，四种权限均可访问</span><br>        m1();<br>        m2();<br>        m3();<br>        m4();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-comment">//在同一个包下，可以访问 public、protected、默认 ，不可以访问private</span><br>        System.out.println(<span class="hljs-string">&quot;n1=&quot;</span> + a.n1 + <span class="hljs-string">&quot; n2=&quot;</span> + a.n2 + <span class="hljs-string">&quot; n3=&quot;</span> + a.n3);<br>        <span class="hljs-comment">//加 n4 之后将会报错：&#x27;n4&#x27; 在 &#x27;com.java_study.modifier.A&#x27; 中具有 private 访问权限</span><br><br>        <span class="hljs-comment">//在同一个包下，可以访问 public、protected、默认 ，不可以访问private</span><br>        a.m1();<br>        a.m2();<br>        a.m3();<br>        <span class="hljs-comment">// a.m4(); //报错</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.pkg;<br><br><span class="hljs-keyword">import</span> com.java_study.modifier.A;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-comment">//在不同包中，只能访问 public 权限</span><br>        System.out.println(<span class="hljs-string">&quot;n1=&quot;</span> + a.n1);<br><br>        <span class="hljs-comment">//在不同包中，只能访问 public 权限</span><br>        a.m1();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>修饰符可以用来修饰类中的属性，成员方法以及类</li><li><strong>只有 默认 和 public 才能修饰类</strong></li><li>成员方法的访问规则和属性完全一样</li><li><strong>关于在子类中的访问权限后面再学</strong></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是把抽象出的数据[属性]和对数据的操作[方法]封装在一起，数据背保护在内部，程序的其它部分只有通过被授权的操作[方法]，才能对数据进行操作。</p><h3 id="封装的理解与好处"><a href="#封装的理解与好处" class="headerlink" title="封装的理解与好处"></a>封装的理解与好处</h3><ul><li><p>隐藏实现细节：方法(连接数据库) &lt;– 调用(传入参数…)</p></li><li><p>可以对数据进行验证，保证安全合理  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Person &#123;name, age&#125;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>p.age = <span class="hljs-number">1200</span>;  <span class="hljs-comment">//不合理的数据</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="封装的实现步骤"><a href="#封装的实现步骤" class="headerlink" title="封装的实现步骤"></a>封装的实现步骤</h3><ol><li>将属性进行私有化 private [不能直接修改属性]</li><li>提供一个公共的 set 方法，用于对属性输入判断并赋值</li><li>提供一个公共的 get 方法，用于获取属性的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.encap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Encapsulation01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//person.age = 3000;  //报错：私有权限不能访问</span><br>        person.setName(<span class="hljs-string">&quot;jack&quot;</span>);<br>        person.setAge(<span class="hljs-number">18</span>);<br>        person.setSalary(<span class="hljs-number">30000</span>);<br>        System.out.println(person.info());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;  <span class="hljs-comment">//名字公开</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;  <span class="hljs-comment">//age 私有化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary; <span class="hljs-comment">//薪水 私有化</span><br><br>    <span class="hljs-comment">// 构造器 与 setXXX 结合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> &#123;<br><span class="hljs-comment">//        this.name = name;</span><br><span class="hljs-comment">//        this.age = age;</span><br><span class="hljs-comment">//        this.salary = salary;</span><br>        <span class="hljs-comment">//我们可以将 set 方法写在构造器中，这样仍然可以验证</span><br>        setName(name);<br>        setAge(age);<br>        setSalary(salary);<br>    &#125;<br><br>    <span class="hljs-comment">// 快捷键写 set 和 get</span><br>    <span class="hljs-comment">// Alt + ins</span><br>    <span class="hljs-comment">// 然后根据要求完善代码</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">//加入对数据的校验</span><br>        <span class="hljs-keyword">if</span>(name.length() &gt;=<span class="hljs-number">2</span> &amp;&amp; name.length()&lt;=<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字长度不对，需要 2-6 个字符，默认为 无名&quot;</span>);<br>            <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;无名&quot;</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">1</span> &amp;&amp; age&lt;=<span class="hljs-number">120</span>)&#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄应在 1-120 之间，默认值为18&quot;</span>);<br>            <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里可以增加对当前对象的权限判断</span><br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br> <span class="hljs-keyword">if</span>(salary&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">this</span>.salary = salary;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.salary = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息为 name=&quot;</span> + name + <span class="hljs-string">&quot; age=&quot;</span> + age + <span class="hljs-string">&quot; 薪水=&quot;</span> + salary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="继承基本介绍和示意图"><a href="#继承基本介绍和示意图" class="headerlink" title="继承基本介绍和示意图"></a>继承基本介绍和示意图</h3><p>继承可以解决代码复用，让我们的编程更加靠近人类思维。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过 extends 来声明继承父类即可。</p> <img src="image-20220830221838618.png" alt="image-20220830221838618" style="zoom:40%;" /><h3 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class 子类 extends 父类 &#123;<br>  <span class="hljs-comment">//... ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类会自动拥有父类定义的属性和方法</li><li>父类 又叫 超类，基类</li><li>子类 又叫 派生类</li></ul><p><strong>快速入门</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.extend;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Extends01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Pupil</span> <span class="hljs-variable">pupil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pupil</span>();<br>        pupil.name = <span class="hljs-string">&quot;银角大王~&quot;</span>;<br>        pupil.age = <span class="hljs-number">11</span>;<br>        pupil.testing();<br>        pupil.setScore(<span class="hljs-number">50</span>);<br>        pupil.showInfo();<br>        System.out.println(<span class="hljs-string">&quot;=======&quot;</span>);<br>        <span class="hljs-type">Graduate</span> <span class="hljs-variable">graduate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graduate</span>();<br>        graduate.name = <span class="hljs-string">&quot;金角大王~&quot;</span>;<br>        graduate.age = <span class="hljs-number">23</span>;<br>        graduate.testing();<br>        graduate.setScore(<span class="hljs-number">80</span>);<br>        graduate.showInfo();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.extend;<br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//共有属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-comment">//共有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生 &quot;</span> + name + <span class="hljs-string">&quot; 年龄 &quot;</span> + age + <span class="hljs-string">&quot; 成绩 &quot;</span> + score);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.extend;<br><span class="hljs-comment">//大学生 类 -&gt; 模拟大学生的考试简单情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graduate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;大学生 &quot;</span> + name + <span class="hljs-string">&quot; 正在考大学数学&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.extend;<br><span class="hljs-comment">// 小学生 类 -&gt; 模拟小学生考试的情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pupil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小学生 &quot;</span>+ name +<span class="hljs-string">&quot; 正在考小学数学&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="继承的细节问题-重要"><a href="#继承的细节问题-重要" class="headerlink" title="继承的细节问题(重要)"></a>继承的细节问题(重要)</h3><p>继承的好处：</p><ul><li>提高代码复用性</li><li>提高代码的扩展性和维护性</li></ul><p><strong>继承的细节问题（重要）：</strong></p><ul><li><p>子类继承了父类所有的属性和方法，并且可以直接访问父类中非私有的属性和方法，</p><p>但是子类不能直接访问父类中的私有属性和方法，要通过父类中的公有方法去访问</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，<strong>默认情况下总会去调用父类的无参构造器</strong>，</p><p>如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类</p><p>的初始化工作。否则，编译不会通过</p></li><li><p>如果希望指定去调用父类的某个构造器，则可以显式地调用一下</p></li><li><p>super 在使用时，需要放在构造器第一行</p></li><li><p>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器里面</p></li><li><p>java 所有类都是 Object 类的子类, Object 是所有类的基类</p></li><li><p><strong>父类构造器的调用不限于直接父类，将一直往上追溯直到 Object 类(顶级父类)</strong></p></li><li><p><strong>子类最多只能继承一个父类(指直接继承)，即 java 中是 单继承机制。</strong></p><p>思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】</p></li><li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;===第 1 个对象====&quot;);</span><br>        <span class="hljs-comment">// Sub sub = new Sub(); //创建了子类对象 sub</span><br>        <span class="hljs-comment">// System.out.println(&quot;===第 2 个对象====&quot;);</span><br>        <span class="hljs-comment">// Sub sub2 = new Sub(&quot;jack&quot;); //创建了子类对象 sub2</span><br>        System.out.println(<span class="hljs-string">&quot;===第 3 对象====&quot;</span>);<br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">sub3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>(<span class="hljs-string">&quot;king&quot;</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">//创建了子类对象 sub2</span><br>        <span class="hljs-comment">//sub.sayOk();</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.hspedu.extend_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TopBase</span> &#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-comment">//4 个属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Base</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;父类 Base()构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Base</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-comment">//有参构造器</span><br>        <span class="hljs-comment">//默认 super()</span><br>        System.out.println(<span class="hljs-string">&quot;父类 Base(String name, int age)构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Base</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-comment">//有参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;父类 Base(String name)构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//父类提供一个 public 的方法,返回了 n4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> n4;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test100</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test100&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test200</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test200&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test300</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test300&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test400</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test400&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//call</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callTest400</span><span class="hljs-params">()</span> &#123;<br>        test400();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.hspedu.extend_;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-comment">//输入 ctrl + H 可以看到类的继承关系</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-comment">//1. 老师要调用父类的无参构造器, 如下或者 什么都不写,默认就是调用 super()</span><br>        <span class="hljs-comment">//super();//父类的无参构造器</span><br>        <span class="hljs-comment">//2. 老师要调用父类的 Base(String name) 构造器</span><br>        <span class="hljs-comment">//super(&quot;hsp&quot;);</span><br>        <span class="hljs-comment">//3. 老师要调用父类的 Base(String name, int age) 构造器</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;king&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//细节： super 在使用时，必须放在构造器第一行</span><br>        <span class="hljs-comment">//细节: super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span><br>        <span class="hljs-comment">//this() 不能再使用了</span><br>        System.out.println(<span class="hljs-string">&quot;子类 Sub(String name, int age)构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//无参构造器</span><br>        <span class="hljs-comment">//super(); //默认调用父类的无参构造器</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;子类 Sub()构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">30</span>);<br>        <span class="hljs-comment">//do nothing...</span><br>        System.out.println(<span class="hljs-string">&quot;子类 Sub(String name)构造器被调用....&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayOk</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//子类方法</span><br>        <span class="hljs-comment">//非私有的属性和方法可以在子类直接访问</span><br>        <span class="hljs-comment">//但是私有属性和方法不能在子类直接访问</span><br>        System.out.println(n1 + <span class="hljs-string">&quot; &quot;</span> + n2 + <span class="hljs-string">&quot; &quot;</span> + n3);<br>        test100();<br>        test200();<br>        test300();<br>        <span class="hljs-comment">//test400();错误</span><br>        <span class="hljs-comment">//要通过父类提供公共的方法去访问</span><br>        System.out.println(<span class="hljs-string">&quot;n4=&quot;</span> + getN4());<br>        callTest400();<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.hspedu.extend_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopBase</span> &#123; <span class="hljs-comment">//父类是 Object</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TopBase</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//super(); Object 的无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;构造器 TopBase() 被调用...&quot;</span>);<span class="hljs-comment">//1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承的本质分析-重要"><a href="#继承的本质分析-重要" class="headerlink" title="继承的本质分析(重要)"></a>继承的本质分析(重要)</h3><p>当子类对象创建好后，将会建立 查找的关系</p><p><strong>(1)</strong> 首先看子类是否有该属性</p><p><strong>(2)</strong> 如果子类有这个属性，并且可以访问，则返回信息</p><p><strong>(3)</strong> 如果子类没有这个属性，就看父类有没有这个属性</p><p>​（如果父类有该属性，并且可以访问，就返回信息..）</p><p>​（如果父类有该属性，但不可访问，则会报错，不会继续找上级父类）</p><p><strong>(4)</strong> 如果父类没有就按照(3)的规则，继续找上级父类，直到 Object…</p><p><strong>子类创建的内存布局：</strong></p><img src="image-20220830225514550.png" alt="image-20220830225514550" style="zoom:50%;" /><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.extend;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 讲解继承的本质</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<span class="hljs-comment">//内存的布局</span><br>        <span class="hljs-comment">//?-&gt; 这时请大家注意，要按照查找关系来返回信息</span><br>        <span class="hljs-comment">//(1) 首先看子类是否有该属性</span><br>        <span class="hljs-comment">//(2) 如果子类有这个属性，并且可以访问，则返回信息</span><br>        <span class="hljs-comment">//(3) 如果子类没有这个属性，就看父类有没有这个属性(如果父类有该属性，并且可以访问，就返回信息..)</span><br>        <span class="hljs-comment">//(4) 如果父类没有就按照(3)的规则，继续找上级父类，直到 Object...</span><br>        System.out.println(son.name);<span class="hljs-comment">//返回就是大头儿子</span><br>        <span class="hljs-comment">//System.out.println(son.age);//返回的就是 39</span><br>        <span class="hljs-comment">//System.out.println(son.getAge());//返回的就是 39</span><br>        System.out.println(son.hobby);<span class="hljs-comment">//返回的就是旅游</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandPa</span> &#123; <span class="hljs-comment">//爷类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爷爷&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;旅游&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;  <span class="hljs-comment">//因为Father的age是私有属性，Son类不能直接使用age找到Grandpa的age</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrandPa</span> &#123;<span class="hljs-comment">//父类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爸爸&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">39</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">//子类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头儿子&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li>基本介绍</li></ul><p>super 代表父类的引用，用于访问父类的属性、方法、构造器</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>访问父类的属性，但不能访问父类的 private 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.属性名<br></code></pre></td></tr></table></figure></li><li><p>访问父类的方法，但不能访问父类的 private 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.方法名(参数列表)<br></code></pre></td></tr></table></figure></li><li><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>(参数列表);  <span class="hljs-comment">//只能放在构造器的第一句，并且只能出现一次</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="super-的相关细节"><a href="#super-的相关细节" class="headerlink" title="super 的相关细节"></a>super 的相关细节</h3><p>super 带来的好处</p><ul><li><p>调用父类的构造器的好处（分工明确，父类属性由父类初始化，子类的属性由子类初始化）</p></li><li><p>当子类中有和父类中的成员（属性&#x2F;方法）重名时，为了访问父类的成员，必须通过 super 。</p><p>如果没有重名，使用 super、this、直接访问 是一样的效果</p></li><li><p>super 的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用 super 去访问爷爷类的成员</p><p>如果多个基类（上级类）中都有同名的成员，使用 super 访问遵循就近原则，同时遵循继承的访问权限规则</p></li><li><p>注意：如果查找属性的过程中，找到了但不能访问，则报错  cannot access；如果查找属性的过程中，没有找到，则提示属性不存在</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">888</span>;<br>    <span class="hljs-comment">//编写测试方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//super 的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用 super 去访问爷爷类的成员；</span><br>        <span class="hljs-comment">// 如果多个基类(上级类)中都有同名的成员，使用 super 访问遵循就近原则。A-&gt;B-&gt;C</span><br>        System.out.println(<span class="hljs-string">&quot;super.n1=&quot;</span> + <span class="hljs-built_in">super</span>.n1);<br>        <span class="hljs-built_in">super</span>.cal();<br>    &#125;<br>    <span class="hljs-comment">//访问父类的属性 , 但不能访问父类的 private 属性 [案例]super.属性名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">super</span>.n1 + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">super</span>.n2 + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">super</span>.n3 );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 类的 cal() 方法...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 类的 sum()&quot;</span>);<br>        <span class="hljs-comment">//希望调用父类-A 的 cal 方法</span><br>        <span class="hljs-comment">//这时，因为子类 B 没有 cal 方法，因此我可以使用下面三种方式</span><br>        <span class="hljs-comment">//找 cal 方法时(cal() 和 this.cal())，顺序是:</span><br>        <span class="hljs-comment">// (1)先找本类，如果有，则调用</span><br>        <span class="hljs-comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span><br>        <span class="hljs-comment">// (3)如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object 类</span><br>        <span class="hljs-comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错, cannot access</span><br>        <span class="hljs-comment">// 如果查找方法的过程中，没有找到，则提示方法不存在</span><br>        <span class="hljs-comment">//cal();</span><br>        <span class="hljs-built_in">this</span>.cal(); <span class="hljs-comment">//等价 cal</span><br>        <span class="hljs-comment">//找 cal 方法(super.call()) 的顺序是直接查找父类，其他的规则一样</span><br>        <span class="hljs-comment">//super.cal();</span><br>        <span class="hljs-comment">//演示访问属性的规则</span><br>        <span class="hljs-comment">//n1 和 this.n1 查找的规则是</span><br>        <span class="hljs-comment">//(1) 先找本类，如果有，则调用</span><br>        <span class="hljs-comment">//(2) 如果没有，则找父类(如果有，并可以调用，则调用)</span><br>        <span class="hljs-comment">//(3) 如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object 类</span><br>        <span class="hljs-comment">// 提示：如果查找属性的过程中，找到了，但是不能访问， 则报错, cannot access</span><br>        <span class="hljs-comment">// 如果查找属性的过程中，没有找到，则提示属性不存在</span><br>        System.out.println(n1);<br>        System.out.println(<span class="hljs-built_in">this</span>.n1);<br>        <span class="hljs-comment">//找 n1 (super.n1) 的顺序是直接查找父类属性，其他的规则一样</span><br>        System.out.println(<span class="hljs-built_in">super</span>.n1);<br>    &#125;<br>    <span class="hljs-comment">//访问父类的方法，不能访问父类的 private 方法      super.方法名(参数列表);</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.test100();<br>        <span class="hljs-built_in">super</span>.test200();<br>        <span class="hljs-built_in">super</span>.test300();<br>        <span class="hljs-comment">//super.test400();//不能访问父类 private 方法</span><br>    &#125;<br>    <span class="hljs-comment">//访问父类的构造器(这点前面用过)：super(参数列表);只能放在构造器的第一句，只能出现一句！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//super();</span><br>        <span class="hljs-comment">//super(&quot;jack&quot;, 10);</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="super-和-this-的比较"><a href="#super-和-this-的比较" class="headerlink" title="super 和 this 的比较"></a>super 和 this 的比较</h3> <img src="image-20220901151016279.png" alt="image-20220901151016279" style="zoom: 48%;" /><h2 id="方法重写-x2F-覆盖"><a href="#方法重写-x2F-覆盖" class="headerlink" title="方法重写&#x2F;覆盖"></a>方法重写&#x2F;覆盖</h2><ul><li>基本介绍</li></ul><p>简单地说：<strong>方法重写（覆盖）</strong>就是子类有一个方法，和父类的某个方法的 <strong>名称、返回类型、参数</strong> 均一致，那么就称子类的这个方法覆盖了父类的方法（其中的父类不要求是直接父类）</p><h3 id="注意事项与细节"><a href="#注意事项与细节" class="headerlink" title="注意事项与细节"></a>注意事项与细节</h3><p>方法重写需要满足的条件</p><ul><li><p>子类方法的 <strong>参数，方法名称</strong> 均要和父类方法一致</p></li><li><p>子类方法的 <strong>返回类型</strong> 要和父类方法的 <strong>返回类型一致</strong>，或者是父类<strong>返回类型的子类</strong></p><p>比如：父类方法返回类型是 Object，子类返回类型可以是 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类方法</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br><span class="hljs-keyword">public</span> A <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br><span class="hljs-comment">//子类方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br><span class="hljs-keyword">public</span> B <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br><span class="hljs-comment">//其中B是A的子类</span><br></code></pre></td></tr></table></figure></li><li><p><strong>子类方法不能缩小父类方法的访问权限</strong></p></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>多态的基本介绍</li></ul><p>方法或对象具有多种形态</p><h3 id="多态的具体体现"><a href="#多态的具体体现" class="headerlink" title="多态的具体体现"></a>多态的具体体现</h3><ul><li><h4 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h4><p><strong>重写和重载均体现多态</strong></p></li><li><h4 id="对象的多态（-核心，困难，重点）"><a href="#对象的多态（-核心，困难，重点）" class="headerlink" title="对象的多态（ 核心，困难，重点）"></a><strong>对象的多态（ 核心，困难，重点）</strong></h4><ul><li><strong>一个对象的编译类型和运行类型可以不一致</strong></li><li>编译类型在定义对象是就已经确定了，不能改变</li><li>运行类型是可以变化的</li><li><strong>编译类型看 定义时 &#x3D; 号的 左边，运行类型看 &#x3D; 号的 右边</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();  <span class="hljs-comment">// animal 编译类型是 Animal，运行类型是 Dog</span><br>animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();  <span class="hljs-comment">// animal 编译类型仍然是 Animal，但运行类型变成了 Cat</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.poly_.objectPoly;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//体验对象多态特点</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">// animal 编译类型就是 Animal，运行类型是 Dog</span><br>        animal.cry(); <span class="hljs-comment">// 因为运行到这里时，animal 的运行类型是 Dog，所以是Dog的cry()</span><br><br>        animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">// animal 编译类型仍是 Animal，运行类型是 Cat</span><br>        animal.cry(); <span class="hljs-comment">// 因为运行到这里时，animal 的运行类型是 Cat，所以是Cat的cry()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.objectPoly;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog cry()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.objectPoly;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat cry()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="多态注意事项与细节"><a href="#多态注意事项与细节" class="headerlink" title="多态注意事项与细节"></a>多态注意事项与细节</h3><p><strong>多态的前提： 两个对象（类）存在继承关系</strong></p><h4 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h4><ul><li><p><strong>本质：父类的引用指向了子类的对象</strong></p></li><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">父类类型 引用名 = <span class="hljs-keyword">new</span> 子类类型();<br></code></pre></td></tr></table></figure></li><li><p><strong>特点：</strong>编译类型看左边，运行类型看右边</p><p>​可以调用父类中的所有成员（需遵守访问权限）</p><p>​不能调用子类中的特有成员（因为在编译阶段，能调用哪些成员，是由编译类型决定的）</p><p>​<strong>最终运行效果看子类的具体实现（运行(调用方法)时，按照从运行类型(子类)开始查找方法）</strong></p></li></ul><h4 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h4><ul><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">子类类型 引用名 = (子类类型) 父类引用;<br></code></pre></td></tr></table></figure></li><li><p>只能强转父类的引用，不能强转父类的对象</p></li><li><p>要求父类的引用当前必须指向目标类型的对象</p></li><li><p><strong>向下转型后，可以调用子类类型中所有的成员</strong></p></li><li><p>（用 引用的指向 的思想来思考）</p></li></ul><p>案例：向上转型和向下转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//向上转型：父类的引用指向了子类的对象</span><br>        <span class="hljs-comment">//语法：父类类型 引用名 = new 子类类型();</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">// 这个也没有问题，Object 是 Animal 的父类</span><br><br>        <span class="hljs-comment">//向上转型调用方法的规则如下:</span><br>        <span class="hljs-comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span><br>        <span class="hljs-comment">//(2)但是不能调用子类的特有的成员</span><br>        <span class="hljs-comment">//   因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span><br>        <span class="hljs-comment">//   animal.catchMouse();错误</span><br>        <span class="hljs-comment">//(3)最终运行效果看子类(运行类型)的具体实现, 即运行(调用方法)时，从子类(运行类型)开始查找方法</span><br>        <span class="hljs-comment">//   然后调用，规则和前面我们讲的方法调用规则一致。</span><br>        animal.eat(); <span class="hljs-comment">//猫吃鱼..</span><br>        animal.run(); <span class="hljs-comment">//跑</span><br>        animal.sleep(); <span class="hljs-comment">//睡</span><br>        animal.show(); <span class="hljs-comment">//hello,你好</span><br>        <br>        System.out.println(<span class="hljs-string">&quot;=============&quot;</span>);<br>        <br>        <span class="hljs-comment">//希望可以调用子类的特有方法（Cat的catchMouse()方法）</span><br>        <span class="hljs-comment">//多态的向下转型</span><br>        <span class="hljs-comment">//语法：子类类型 引用名 = (子类类型) 父类引用;</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;  <span class="hljs-comment">//编译类型变成了Cat，运行类型也是Cat</span><br>        cat.catchMouse();  <span class="hljs-comment">//猫抓老鼠</span><br>        <span class="hljs-comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span><br>        <span class="hljs-comment">// Dog dog = (Dog) animal; //错误</span><br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;动物&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;吃&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;跑&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;睡&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;hello,你好&quot;</span>);&#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 方法重写</span><br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// Cat的特有方法</span><br>        System.out.println(<span class="hljs-string">&quot;猫抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 方法重写</span><br>        System.out.println(<span class="hljs-string">&quot;狗吃骨头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态的属性问题"><a href="#多态的属性问题" class="headerlink" title="多态的属性问题"></a>多态的属性问题</h4><ul><li><strong>属性没有重写之说，属性的值看编译类型</strong></li><li><strong>instanceOf 比较操作符</strong>，用于判断对象的 <strong>运行类型</strong> 是否为 XX类型 或 XX类型 的 子类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//属性没有重写之说！属性的值看编译类型</span><br>        <span class="hljs-type">Base</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<span class="hljs-comment">//向上转型</span><br>        System.out.println(base.count);<span class="hljs-comment">// ？ 看编译类型 10</span><br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(sub.count);<span class="hljs-comment">//? 看编译类型 20</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//属性</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<span class="hljs-comment">//子类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<span class="hljs-comment">//属性</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.java_study.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BB</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>        System.out.println(bb <span class="hljs-keyword">instanceof</span> BB);  <span class="hljs-comment">//true</span><br>        System.out.println(bb <span class="hljs-keyword">instanceof</span> AA);  <span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">//aa 编译类型 AA, 运行类型是 BB</span><br>        <span class="hljs-comment">//BB 是 AA 子类</span><br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>        System.out.println(aa <span class="hljs-keyword">instanceof</span> AA);  <span class="hljs-comment">//true</span><br>        System.out.println(aa <span class="hljs-keyword">instanceof</span> BB);  <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;&#125;  <span class="hljs-comment">//父类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> &#123;&#125;  <span class="hljs-comment">//子类</span><br></code></pre></td></tr></table></figure><h3 id="动态绑定机制（很重要）"><a href="#动态绑定机制（很重要）" class="headerlink" title="动态绑定机制（很重要）"></a>动态绑定机制（很重要）</h3><ul><li>当调用对象方法的时候，该方法会和该对象的 内存地址&#x2F;运行类型 绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用<strong>（用谁的方法就用谁的属性）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.poly_.dynamic_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicBinding</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//a 的编译类型 A, 运行类型 B</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">//向上转型</span><br>        System.out.println(a.sum()); <span class="hljs-comment">//? 40 -&gt; 30</span><br>        System.out.println(a.sum1()); <span class="hljs-comment">//? 30 -&gt; 20</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//动态绑定机制:</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//父类 sum()</span><br>        <span class="hljs-keyword">return</span> getI() + <span class="hljs-number">10</span>; <span class="hljs-comment">//20 + 10</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//父类 sum1()</span><br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">10</span>; <span class="hljs-comment">//10 + 10</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//父类 getI</span><br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123; <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-comment">// public int sum() &#123;</span><br>    <span class="hljs-comment">// return i + 20;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//子类 getI()</span><br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-comment">// public int sum1() &#123;</span><br>    <span class="hljs-comment">// return i + 10;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>数组的定义类型为父类类型，里面保存的实际元素类型为子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.polyarr_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 应用实例：现有一个继承结构如下：要求创建 1 个 Person 对象、2 个 Student 对象和 2 个 Teacher 对象,</span><br>        <span class="hljs-comment">// 统一放在数组中，并调用每个对象say 方法.</span><br>        Person[] person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>        person[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>);<br>        person[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;marry&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>);<br>        person[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">17</span>,<span class="hljs-number">30.1</span>);<br>        person[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teather</span>(<span class="hljs-string">&quot;scott&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20000</span>);<br>        person[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teather</span>(<span class="hljs-string">&quot;king&quot;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">30000</span>);<br>        <span class="hljs-comment">//循环遍历多态数组，调用say</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; person.length; i++) &#123;<br>            <span class="hljs-comment">// 提示：person[i]的编译类型时Person，运行情况时根据实际情况由JVM判断</span><br>            System.out.println(person[i].say()); <span class="hljs-comment">//动态绑定机制</span><br>            <span class="hljs-comment">//应用实例升级：如何调用子类特有的方法，比如</span><br>            <span class="hljs-comment">//Teacher 有一个 teach , Student 有一个 study</span><br>            <span class="hljs-comment">//怎么调用？</span><br>            <span class="hljs-comment">//方法：类型判断 + 向下转型</span><br>            <span class="hljs-keyword">if</span> (person[i] <span class="hljs-keyword">instanceof</span> Teather) &#123;<br>                <span class="hljs-type">Teather</span> <span class="hljs-variable">teather</span> <span class="hljs-operator">=</span>(Teather) person[i]; <span class="hljs-comment">//向下转型</span><br>                teather.teach();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (person[i] <span class="hljs-keyword">instanceof</span> Student) &#123;<br>                ((Student)person[i]).study();  <span class="hljs-comment">// 合并为一条语句</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.polyarr_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 返回名字和年龄</span><br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;\t&quot;</span> + age;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">package</span> com.java_study.polyarr_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teather</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">//重写父类say</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;老师 &quot;</span> + <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot; salary = &quot;</span> + salary;<br>    &#125;<br>    <span class="hljs-comment">//特有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师 &quot;</span> + getName() + <span class="hljs-string">&quot; 正在授课&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.polyarr_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-comment">//重写父类say</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学生 &quot;</span> + <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot; score = &quot;</span> + score;<br>    &#125;<br>    <span class="hljs-comment">//特有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生 &quot;</span> + getName() + <span class="hljs-string">&quot; 正在学习&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h3><ul><li><p>方法定义的形参类型为父类类型，实参类型允许为子类类型</p><p>应用实例1：前面的主人喂动物</p><p>应用实例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.poly_.polyparameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyParameter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">2500</span>);<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">milan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">200000</span>);<br>        <span class="hljs-type">PolyParameter</span> <span class="hljs-variable">polyParameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PolyParameter</span>();<br>        polyParameter.showEmpAnnual(tom);<br>        polyParameter.showEmpAnnual(milan);<br>        polyParameter.testWork(tom);<br>        polyParameter.testWork(milan);<br>    &#125;<br><span class="hljs-comment">//实现获取任何员工对象的年工资,并在 main 方法中调用该方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showEmpAnnual</span><span class="hljs-params">(Employee e)</span>&#123;<br>        System.out.println(e.getAnnual());<br>    &#125;<br><span class="hljs-comment">//添加一个方法，testWork,如果是普通员工，则调用 work 方法，如果是经理，则调用 manage 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">(Employee e)</span>&#123;<br>        <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> Worker)&#123;<br>            ((Worker) e).work();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> Manager)&#123;<br>            ((Manager) e).manage();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不做处理...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.java_study.poly_.polyparameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">//得到年工资的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">12</span> * salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.polyparameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">double</span> bonus;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">double</span> bonus)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary);<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBonus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> bonus)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;经理 &quot;</span> + getName() + <span class="hljs-string">&quot; 正在管理&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//重写获取年薪方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual() + bonus;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.java_study.poly_.polyparameter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通员工 &quot;</span> + getName() + <span class="hljs-string">&quot; 正在工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//因为其它员工没有其它收入，故直接调用父类方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="Object-类详解"><a href="#Object-类详解" class="headerlink" title="Object 类详解"></a>Object 类详解</h2><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><ul><li><p>&#x3D;&#x3D; 和 equals 的对比</p><ul><li><p>&#x3D;&#x3D; 是一个比较运算符，既可以判断基本类型，又可以判断引用类型</p><p>&#x3D;&#x3D; ：如果判断基本类型，判断的是值是否相等</p><p><strong>&#x3D;&#x3D; ：如果判断引用类型，判断的是地址是否相等，而不是判断是否为同一个类的对象</strong></p></li><li><p>equals 是Object类中的方法，只能判断引用类型</p><p><strong>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1000</span>);<br>System.out.println(integer1 == integer2); <span class="hljs-comment">//false</span><br>System.out.println(integer1.equals(integer2)); <span class="hljs-comment">//true</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java_study&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java_study&quot;</span>);<br>System.out.println(str1 == str2); <span class="hljs-comment">//false</span><br>System.out.println(str1.equals(str2)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.object_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        System.out.println(person1.equals(person2));  <br>        <span class="hljs-comment">//未重写equals() -&gt; flase</span><br>        <span class="hljs-comment">//重写后equals() -&gt; true</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br><br>    <span class="hljs-comment">//重写equals方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-comment">//判断如果比较的两个对象是同一个对象，则直接返回true</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Person) &#123; <span class="hljs-comment">//如果obj是Person，则进行比较</span><br>            <span class="hljs-comment">//进行向下转型，因为需要得到obj的各个属性</span><br>            <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) obj;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(p.name) &amp;&amp; <br>                <span class="hljs-built_in">this</span>.age == p.age &amp;&amp; <span class="hljs-built_in">this</span>.gender == p.gender;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> gender;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<span class="hljs-built_in">this</span>.gender = gender;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h3><ul><li><p>提高具有哈希结构的容器的效率</p></li><li><p>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</p><p>两个引用，如果指向的是不同对象，则哈希值是不一样的（此处不严谨）</p></li><li><p>哈希值主要根据地址号来的，不能完全的将哈希值等价于地址</p></li><li><p>后面在集合中 hashCode 如果需要的话也会重写（在讲解集合时学习重写 hashCode 方法）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.object_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HsahCode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa3</span> <span class="hljs-operator">=</span> aa;<br>        System.out.println(<span class="hljs-string">&quot;aa.hashCode()=&quot;</span> + aa.hashCode());  <span class="hljs-comment">//93122545</span><br>        System.out.println(<span class="hljs-string">&quot;aa2.hashCode()=&quot;</span> + aa2.hashCode());  <span class="hljs-comment">//1449621165</span><br>        System.out.println(<span class="hljs-string">&quot;aa3.hashCode()=&quot;</span> + aa3.hashCode());  <span class="hljs-comment">//93122545</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><br></code></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><ul><li><p>基本介绍</p><p>默认返回：全类名 + @ + 哈希值的十六进制</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p></li><li><p>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式</p></li><li><p>当直接输出一个对象时，toString 方法会被默认的调用</p><p>例如 System.out.plintln(monster);  &#x2F;&#x2F;就会默认调用 monster.toString()</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.object_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Object 的 toString() 源码</span><br><span class="hljs-comment">        (1)getClass().getName() 类的全类名(包名+类名 )</span><br><span class="hljs-comment">        (2)Integer.toHexString(hashCode()) 将对象的 hashCode 值转成 16 进制字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        public String toString() &#123;</span><br><span class="hljs-comment">            return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-type">Monster</span> <span class="hljs-variable">monster</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>(<span class="hljs-string">&quot;小妖怪&quot;</span>, <span class="hljs-string">&quot;巡山&quot;</span>, <span class="hljs-number">1000</span>);<br>        System.out.println(monster.toString());<br>        <span class="hljs-comment">//未重写 com.java_study.object_.Monster@58ceff1</span><br>        <br>        System.out.println(monster);<br>        <span class="hljs-comment">//当直接输出一个对象时，toString 方法会被默认的调用</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String job;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Monster</span><span class="hljs-params">(String name, String job, <span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.job = job;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br><br>    <span class="hljs-comment">//重写 toString 方法，输出对象的属性</span><br>    <span class="hljs-comment">//可使用快捷键 alt+insert -&gt; toString</span><br>    <span class="hljs-comment">//重写后一般时把对象的属性值输出，当然也可以自定义</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Monster&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, job=&#x27;&quot;</span> + job + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sal=&quot;</span> + sal +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="finalize-方法（已弃用）"><a href="#finalize-方法（已弃用）" class="headerlink" title="finalize 方法（已弃用）"></a>finalize 方法（已弃用）</h3><ul><li><p>当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些释放资源的操作</p></li><li><p>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收</p><p>机制来销毁该对象，在销毁该对象前，会先调用 finalize 方法。</p></li><li><p>垃圾回收机制的调用，是由系统来决定(即有自己的 GC 算法)</p><p>也可以通过 System.gc() 主动触发垃圾回收机制</p></li><li><p>提示： 我们在实际开发中，几乎不会运用 finalize，所以更多就是为了应付面试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_study.object_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Finalize_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宝马&quot;</span>);<br>        car = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//这时 car 原本指向的对象就成为一个垃圾，垃圾回收器就会回收（销毁）对象，</span><br>        <span class="hljs-comment">//在销毁对象前会调用该对象的 finalize 方法</span><br>        <span class="hljs-comment">//程序员就可以在 finalize 中，写自己的业务逻辑代码(比如释放资源：数据库连接,或者打开文件..)</span><br>        <span class="hljs-comment">//如果程序员不重写 finalize，那么就会调用 Object 类的 finalize，即默认处理</span><br>        System.gc();<span class="hljs-comment">//主动调用垃圾回收器</span><br>        System.out.println(<span class="hljs-string">&quot;程序退出了....&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//重写 finalize</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.finalize();<br>        System.out.println(<span class="hljs-string">&quot;我们销毁汽车&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;释放了内存空间&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="断点调试-Debug"><a href="#断点调试-Debug" class="headerlink" title="断点调试(Debug)"></a>断点调试(Debug)</h2><ul><li><p>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看到各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下，进而分析从而找到这个Bug</p></li><li><p>断点调试也能帮助我们查看 java 底层源代码的执行过程，提高程序员的 java 水平</p></li><li><p><strong>重要提示</strong>：在断点调试过程中，是运行状态，是以对象的 运行类型 来执行的</p></li><li><p>快捷键</p><p>F9(resume,执行到下一个断点)<br>F7：跳入方法内<br>F8: 逐行执行代码.<br>shift+F8: 跳出方法</p><p> <img src="/2022/06/30/JavaNote/image-20220902150812545.png" alt="image-20220902150812545"></p></li></ul><h2 id="类变量和类方法"><a href="#类变量和类方法" class="headerlink" title="类变量和类方法"></a>类变量和类方法</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</p><ul><li>类变量（静态变量）被同一个类的所有对象实例共享</li><li>static 类变量，在类加载的时候就生成了</li><li><strong>说明：</strong>类变量是随着类的加载而创建的，所以没有创建对象实例也可以访问</li></ul><p>JDK8以前，类变量是放在方法区的静态域</p><p>JDK8以后，类变量是放在堆里面的，通过反射机制加载一个叫该类的Class对象… …</p><ul><li><h4 id="如何定义类变量"><a href="#如何定义类变量" class="headerlink" title="如何定义类变量"></a>如何定义类变量</h4><p>定义语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 <span class="hljs-keyword">static</span> 数据类型 变量名;  <span class="hljs-comment">//推荐</span><br><span class="hljs-keyword">static</span> 访问修饰符 数据类型 变量名;  <br></code></pre></td></tr></table></figure></li><li><h4 id="如何访问类变量"><a href="#如何访问类变量" class="headerlink" title="如何访问类变量"></a>如何访问类变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">类名.类变量名  <span class="hljs-comment">//推荐</span><br>对象名.类变量名  <br><span class="hljs-comment">//注：静态变量的访问修饰符的访问权限规则和普通属性是一样的</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="类变量注意事项和细节"><a href="#类变量注意事项和细节" class="headerlink" title="类变量注意事项和细节"></a>类变量注意事项和细节</h4><ul><li><p>什么时候需要用类变量</p><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）</p></li><li><p>类变量与普通属性的区别</p><p>类变量时该类的所有对象共享的，而实例变量是每个对象独享的</p></li><li><p>类变量可以通过 类名.类变量名 或者 对象名.类变量名 来访问（推荐使用 类名.类变量名）</p></li><li><p>类变量是在类加载时就初始化了，因此即使没有创建对象，只要类加载了就可以使用类变量</p></li><li><p>类变量的生命周期时随类的加载开始，随着类的消亡而销毁</p></li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li><p>类方法也叫静态方法</p></li><li><p>形式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 <span class="hljs-keyword">static</span> 数据返回类型 方法名()&#123;&#125;  <span class="hljs-comment">//推荐</span><br><span class="hljs-keyword">static</span> 访问修饰符 数据返回类型 方法名()&#123;&#125; <br></code></pre></td></tr></table></figure></li><li><p>类方法的调用（使用方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">类名.类方法名<br>对象名.类方法名<br><span class="hljs-comment">//同样需要满足访问修饰符的访问权限规则</span><br></code></pre></td></tr></table></figure></li><li><p>类方法经典使用场景</p><p><strong>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率</strong></p><p>比如：工具类中的方法 utils 的 Math类、Arrays类、Collections集合类 等等</p></li></ul><h4 id="类方法注意事项和细节"><a href="#类方法注意事项和细节" class="headerlink" title="类方法注意事项和细节"></a>类方法注意事项和细节</h4><ul><li><p>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区</p><p>类方法中无 this 的参数，普通成员方法中隐含着 this 的参数</p></li><li><p>类方法可以通过类名调用，也可以通过对象名调用</p><p>普通成员方法与对象有关，不可以通过类名调用，需要通过对象名调用（对象名.方法名(参数)）</p></li><li><p>类方法中不允许使用和对象有关的关键字，比如 this 和 super</p><p>普通成员方法可以使用和对象有关的关键字，比如 this 和 super</p></li><li><p><strong>类方法（静态方法）只能访问 静态变量 和 静态方法 (不能直接访问，可以在方法内先创建一个对象再访问)</strong></p><p>普通成员方法 既可以访问 非静态成员，也可以访问 静态成员</p></li><li><p><strong>注意：类方法 通过创建本类对象的方式也可以访问 非静态成员</strong></p></li><li><p><strong>小结：静态方法只能访问静态成员，非静态方法可以访问静态成员和非静态成员（均需要遵守访问权限）</strong></p></li><li><p>补充：<strong>Java中的静态方法不能被子类重写</strong></p><p>特点：静态方法属于类的方法，也属于对象的方法，但是静态方法随类的存在。</p><p>结论：Java中的静态方法不能被子类重写，实际上，子类的静态方法隐藏了父类的静态方法，因此父类的子类的静态方法同时存在，只不过父类通过类名（或对象名）调用的是父类的静态方法，子类通过类名（或对象名）调用的是子类的静态方法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.static_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticMethodDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        D.hi();<span class="hljs-comment">//ok</span><br>        <span class="hljs-comment">//非静态方法，不能通过类名调用</span><br>        <span class="hljs-comment">//D.say();, 错误，需要先创建对象，再调用</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>().say();<span class="hljs-comment">//可以</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//非静态方法,普通方法</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//静态方法,类方法</span><br>        <span class="hljs-comment">//类方法中不允许使用和对象有关的关键字，</span><br>        <span class="hljs-comment">//比如this和super。普通方法(成员方法)可以。</span><br>        <span class="hljs-comment">//System.out.println(this.n1);</span><br>    &#125;<br><br>    <span class="hljs-comment">//类方法(静态方法)中 只能访问 静态变量 或静态方法</span><br>    <span class="hljs-comment">//口诀:静态方法只能访问静态成员.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(n2);<br>        System.out.println(D.n2);<br>        <span class="hljs-comment">//System.out.println(this.n2);不能使用</span><br>        hi();<span class="hljs-comment">//OK</span><br>        <span class="hljs-comment">//say();//错误</span><br>    &#125;<br>    <span class="hljs-comment">//普通成员方法，既可以访问  非静态成员，也可以访问静态成员</span><br>    <span class="hljs-comment">//小结: 非静态方法可以访问 静态成员和非静态成员</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//非静态成员</span><br>        System.out.println(n1);<br>        say();<br>        <span class="hljs-comment">//静态成员</span><br>        System.out.println(n2);<br>        hello();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="深入理解-main-方法"><a href="#深入理解-main-方法" class="headerlink" title="深入理解 main 方法"></a>深入理解 main 方法</h2><p><strong>解释 main 方法的形式：public static void main(String[] args) {}</strong></p><ul><li>main 方法是由 java虚拟机 调用的</li><li>java 虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public</li><li>java 虚拟机在执行main()方法时不必创建对象，所以该方法必须是static</li><li>该方法接受String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li><li>java 执行的程序 参数1 参数2 参数3 [举例说明]</li></ul><p> <img src="/2022/06/30/JavaNote/image-20220903110827060.png" alt="image-20220903110827060"></p><p><strong>特别提示</strong></p><ul><li>在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性（不需要权限）</li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.static_.main_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main01</span> &#123;<br>    <span class="hljs-comment">//静态成员</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;学习Java&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的hi1方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//非静态成员</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的hi2方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、静态方法main可以直接访问本类的静态成员</span><br>        System.out.println(n1);<br>        hi1();<br>        <span class="hljs-comment">// 2、静态方法main不可以直接访问本类的非静态成员</span><br>        <span class="hljs-comment">//stem.out.println(n2);  //错误</span><br>        <span class="hljs-comment">//hi2();  //错误</span><br>        <span class="hljs-comment">// 3、如果静态方法main要访问本类的非静态成员，需要先创建对象再调用</span><br>        <span class="hljs-type">Main01</span> <span class="hljs-variable">main01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main01</span>();<br>        System.out.println(main01.n2);<br>        main01.hi2();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块又称为初始化块，属于类中的成员[ 即 是类的一部分 ]，类似于方法，将逻辑语句封装再方法体中，通过{}包围起来；但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且<strong>不用通过对象或类显式调用，而是加载类时，或者创建对象时隐式调用。</strong></p><p><strong>基本语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符(可选项)] &#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><strong>修饰符 可选，要写的话也只能写 static</strong></li><li>代码块分为两类，使用 static 修饰的叫静态代码块，没有 static 修饰的，叫普通代码块&#x2F;非静态代码块</li><li>逻辑语句可以分为任何逻辑语句（输入、输出、方法调用、循环、判断等）</li><li>{}; 中的分号 ( ; ) 可以写上，也可以省略</li></ul><p><strong>用处：</strong></p><ul><li>相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作</li><li>场景：如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的复用性</li></ul><h3 id="代码块注意事项与细节"><a href="#代码块注意事项与细节" class="headerlink" title="代码块注意事项与细节"></a>代码块注意事项与细节</h3><ul><li><p>普通的代码块，在创建对象实例时，会被隐式的调用；每创建一次，就会调用一次。</p><p>如果只是使用类的静态成员时，普通代码块并不会执行。</p></li><li><p>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。</p></li><li><p>类什么时候被加载 [ 重要 ]</p><ul><li>创建对象实例时（new）</li><li>加载子类时，父类也会被加载</li><li>使用类的静态成员时（静态属性、静态方法）</li><li>注：每个类最多只会加载一次</li></ul></li><li><p><strong>创建一个对象时，在 一个类中 的调用顺序是（重难点）：</strong></p><ol><li>调用静态代码块和静态属性初始化（同优先级，按定义顺序来调用）</li><li>调用普通代码块和普通属性的初始化（同优先级，按定义顺序来调用）</li><li>调用构造方法</li></ol><p>注意：静态代码块和静态属性初始化的调用优先级一样，如果有多个静态代码块和多个静态变量初始化，则按它们定义的顺序调用；  同样，普通代码块和普通属性初始化的调用优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用。</p></li><li><p>构造方法（构造器）的最前面其实隐含了 super() 和 调用普通代码块及普通属性初始化，而静态相关的代码块和属性初始化在类加载时就执行完毕，因此是优先于构造器和普通代码块执行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">//构造器</span><br>        <span class="hljs-comment">//这里有隐藏的执行要求</span><br>        <span class="hljs-comment">// 在此之前先会进行 类的加载 (如果还没加载的话)</span><br>        <span class="hljs-comment">//（0）静态相关的代码块和属性初始化会在类加载时执行完毕</span><br>        <span class="hljs-comment">//（1）super();</span><br>        <span class="hljs-comment">//（2）调用普通代码块以及普通属性初始化</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>继承关系中 静态代码块、静态属性初始化、普通代码块、普通属性初始化、构造方法 的调用顺序：</p><ol><li>父类的静态代码块和静态属性（同优先级，按定义顺序来调用）</li><li>子类的静态代码块和静态属性（同优先级，按定义顺序来调用）</li><li>父类的普通代码块和普通属性初始化（同优先级，按定义顺序来调用）</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化（同优先级，按定义顺序来调用）</li><li>子类的构造方法</li></ol></li><li><p>静态代码块直接调用的话只能调用调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.codeblock_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//老师说明</span><br>        <span class="hljs-comment">//(1) 进行类的加载</span><br>        <span class="hljs-comment">//1.1 先加载 父类 A02   1.2 再加载 B02</span><br>        <span class="hljs-comment">//(2) 创建对象</span><br>        <span class="hljs-comment">//2.1 从子类的构造器开始</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">B02</span>();<span class="hljs-comment">//对象</span><br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">C02</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A02</span> &#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getVal01();<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的一个静态代码块..&quot;</span>);<span class="hljs-comment">//(2)</span><br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的第一个普通代码块..&quot;</span>);<span class="hljs-comment">//(5)</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> getVal02();<span class="hljs-comment">//普通属性的初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal01</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的静态属性初始化&quot;</span>);<span class="hljs-comment">//(1)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal02</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的普通属性初始化&quot;</span>);<span class="hljs-comment">//(6)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A02</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-comment">//隐藏</span><br>        <span class="hljs-comment">//super()</span><br>        <span class="hljs-comment">//普通代码和普通属性的初始化......</span><br>        System.out.println(<span class="hljs-string">&quot;A02的构造器&quot;</span>);<span class="hljs-comment">//(7)</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A02</span> &#123; <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> getVal03();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的一个静态代码块..&quot;</span>);<span class="hljs-comment">//(4)</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n5</span> <span class="hljs-operator">=</span> getVal04();<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的第一个普通代码块..&quot;</span>);<span class="hljs-comment">//(9)</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal03</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的静态属性初始化&quot;</span>);<span class="hljs-comment">//(3)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal04</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的普通属性初始化&quot;</span>);<span class="hljs-comment">//(8)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">//一定要慢慢的去品..</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B02</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-comment">//隐藏了</span><br>        <span class="hljs-comment">//super()</span><br>        <span class="hljs-comment">//普通代码块和普通属性的初始化...</span><br>        System.out.println(<span class="hljs-string">&quot;B02的构造器&quot;</span>);<span class="hljs-comment">//(10)</span><br>        <span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C02</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//静态代码块，只能调用静态成员</span><br>        <span class="hljs-comment">//System.out.println(n1);错误</span><br>        System.out.println(n2);<span class="hljs-comment">//ok</span><br>        <span class="hljs-comment">//m1();//错误</span><br>        m2();<br>    &#125;<br>    &#123;<br>        <span class="hljs-comment">//普通代码块，可以使用任意成员</span><br>        System.out.println(n1);<br>        System.out.println(n2);<span class="hljs-comment">//ok</span><br>        m1();<br>        m2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>PS：目前公认的设计模式有（23种）</p><p>​<strong>什么是单例模式</strong></p><ul><li>采用一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</li><li>单例模式有两种方式：（1）饿汉式  （2）懒汉式</li></ul><p><strong>单例设计模式应用实例：</strong></p><p>步骤如下：</p><ol><li>构造器私有化（防止直接new）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法   getInstance</li><li>代码实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//饿汉式</span><br><span class="hljs-keyword">package</span> com.hspedu.single_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        GirlFriend xh = new GirlFriend(&quot;小红&quot;);</span><br><span class="hljs-comment">//        GirlFriend xb = new GirlFriend(&quot;小白&quot;);</span><br><br>        <span class="hljs-comment">//通过方法可以获取对象</span><br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> GirlFriend.getInstance();<br>        System.out.println(instance);<br><br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> GirlFriend.getInstance();<br>        System.out.println(instance2);<br><br>        System.out.println(instance == instance2);<span class="hljs-comment">//T</span><br>        <span class="hljs-comment">//System.out.println(GirlFriend.n1);</span><br><br>        <span class="hljs-comment">//...</span><br><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//有一个类， GirlFriend</span><br><span class="hljs-comment">//只能有一个女朋友</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//public static  int n1 = 100;</span><br>    <span class="hljs-comment">//为了能够在静态方法中，返回 gf对象，需要将其修饰为static</span><br>    <span class="hljs-comment">//對象，通常是重量級的對象, 餓漢式可能造成創建了對象，但是沒有使用.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>(<span class="hljs-string">&quot;小红红&quot;</span>);<br>    <span class="hljs-comment">//如何保障我们只能创建一个 GirlFriend 对象</span><br>    <span class="hljs-comment">//步骤[单例模式-饿汉式]</span><br>    <span class="hljs-comment">//1. 将构造器私有化</span><br>    <span class="hljs-comment">//2. 在类的内部直接创建对象(该对象是static)</span><br>    <span class="hljs-comment">//3. 提供一个公共的static方法，返回 gf对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">GirlFriend</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;構造器被調用.&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GirlFriend <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gf;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GirlFriend&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.single_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//new Cat(&quot;大黃&quot;);</span><br>        <span class="hljs-comment">//System.out.println(Cat.n1);</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Cat.getInstance();<br>        System.out.println(instance);<br><br><br>        <span class="hljs-comment">//再次調用getInstance</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> Cat.getInstance();<br>        System.out.println(instance2);<br><br>        System.out.println(instance == instance2);<span class="hljs-comment">//T</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//希望在程序運行過程中，只能創建一個Cat對象</span><br><span class="hljs-comment">//使用單例模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Cat cat ; <span class="hljs-comment">//默認是null</span><br><br>    <span class="hljs-comment">//步驟</span><br>    <span class="hljs-comment">//1.仍然構造器私有化</span><br>    <span class="hljs-comment">//2.定義一個static靜態屬性對象</span><br>    <span class="hljs-comment">//3.提供一個public的static方法，可以返回一個Cat對象</span><br>    <span class="hljs-comment">//4.懶漢式，只有當用戶使用getInstance時，才返回cat對象, 後面再次調用時，會返回上次創建的cat對象</span><br>    <span class="hljs-comment">//  從而保證了單例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;構造器調用...&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cat <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span>(cat == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//如果還沒有創建cat對象</span><br>            cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;小可愛&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cat&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="饿汉式-VS-懒汉式"><a href="#饿汉式-VS-懒汉式" class="headerlink" title="饿汉式 VS 懒汉式"></a>饿汉式 VS 懒汉式</h3><ul><li><p>二者最主要的区别在于创建对象的时机不同：</p><p>饿汉式是在类加载时就创建了对象实例，而懒汉式是在使用时才创建对象实例</p></li><li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题。</p></li><li><p>饿汉式存在浪费资源的可能，而懒汉式不存在这个问题。</p></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final 可以修饰 类、属性、方法 和 局部变量</p><p>​<strong>使用 final 的情景：</strong></p><ul><li>当不希望类被继承时，可以用 final 修饰 </li><li>当不希望父类的某个方法被子类覆盖&#x2F;重写（override）时，可以用 final 修饰</li><li>当不希望类的某个属性的值被修改，可以用 final 修饰</li><li>当不希望某个局部变量被修改，可以使用 final 修饰</li></ul><h3 id="final-注意事项和细节"><a href="#final-注意事项和细节" class="headerlink" title="final 注意事项和细节"></a>final 注意事项和细节</h3><ul><li><p>final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名</p></li><li><p>final 修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一</p><ul><li>定义时：如 public final double TAX_RATE &#x3D; 0.08;</li><li>在构造器中</li><li>在代码块中</li></ul></li><li><p>如果 final 修饰的属性是静态的，则初始化的位置只能是</p><p>（1）定义时（2）在静态代码块中（不能在构造器中赋值）</p></li><li><p><em>final 类不能继承，但是可以实例化对象</em></p></li><li><p><em>如果类不是 final 类，但是含有 final 方法，则该方法虽然不能重写，但是可以被继承</em></p></li><li><p>一般来说，如果一个类已经是 final 类了，就没有必要再将方法修饰成 final 方法了</p></li><li><p>final 不能修饰构造方法（即构造器）</p></li><li><p>final 和 static 往往搭配使用，效率更高，不会导致类加载（底层编译器做了优化处理）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.final_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(BBB.num);<br>        <span class="hljs-comment">//包装类（String、Double等）是final类，不能被继承</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//final 和 static 往往搭配使用，效率更高，不会导致类加载（底层编译器做了优化处理）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB 静态代码块被执行&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//10000</span><br><span class="hljs-comment">//不会输出 &quot;BBB 静态代码块被执行&quot;</span><br></code></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</p><p>抽象类的介绍：</p><ul><li><p>用 abstract 关键字来修饰一个类时，这个类就叫抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 <span class="hljs-keyword">abstract</span> 类名 &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>用 abstract 关键字来修饰一个方法时，这个方法就是抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 <span class="hljs-keyword">abstract</span> 返回类型 方法名(参数列表);  <span class="hljs-comment">//没有方法体</span><br></code></pre></td></tr></table></figure></li><li><p>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类()</p></li><li><p>抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多</p></li></ul><h3 id="抽象类注意事项和细节"><a href="#抽象类注意事项和细节" class="headerlink" title="抽象类注意事项和细节"></a>抽象类注意事项和细节</h3><ul><li>抽象类不能被实例化</li><li><strong>抽象类不一定要包含 abstract 方法。也就是说，抽象类可以没有 abstract 方法</strong></li><li><strong>一旦类包含了 abstract 方法，则这个类必须声明为 abstract</strong> </li><li>abstract 只能修饰类和方法，不能修饰属性和其它的</li><li>抽象类可以有任意成员 [抽象类本质还是类] ，比如：非抽象成员、构造器、静态属性等等（可用于继承）</li><li>抽象方法不能有主体，即不能实现</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</li><li><strong>抽象方法不能使用 private、final 和 static 来修饰，因为这些关键字都是和重写相违背的</strong></li></ul><h3 id="抽象类最佳实践-——-模板设计模式"><a href="#抽象类最佳实践-——-模板设计模式" class="headerlink" title="抽象类最佳实践 —— 模板设计模式"></a>抽象类最佳实践 —— 模板设计模式</h3><ul><li><p>基本介绍：</p><p>抽象类体现的是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式</p></li><li><p>模板设计模式能解决的问题：</p><ul><li>当功能实现内部一部分是确定的，一部分是不确定的，这是可以把不确定的部分暴露出去，让子类去实现</li><li>编写一个抽象父类，父类提供了多个子类的通用方法，并把一个或多个方法留给其子类实现</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">package</span> com.hspedu.abstract_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTemplate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        aa.calculateTime(); <span class="hljs-comment">//这里还是需要有良好的OOP基础，对多态</span><br><br>        <span class="hljs-type">BB</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>        bb.calculateTime();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.hspedu.abstract_;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123; <span class="hljs-comment">//抽象类-模板设计模式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateTime</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//实现方法，调用job方法</span><br>        <span class="hljs-comment">//得到开始的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        job(); <span class="hljs-comment">//动态绑定机制</span><br>        <span class="hljs-comment">//得的结束的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;任务执行时间 &quot;</span> + (end - start));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.hspedu.abstract_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-comment">//计算任务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//实现Template的抽象方法job</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">800000</span>; i++) &#123;<br>            num += i;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.hspedu.abstract_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span>&#123;<br>    <span class="hljs-comment">//计算任务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//这里也去，重写了Template的job方法</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">80000</span>; i++) &#123;<br>            num *= i;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>接口就是给出一些没有实现的方法并封装到一起，到某个类要使用时，再根据具体情况把这些方法写出来</p><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名 &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-comment">//抽象方法（在接口中，抽象方法可以省略abstract关键字）</span><br>&#125;<br>class 类名 implements 接口 &#123;<br>    <span class="hljs-comment">//自己属性;</span><br>    <span class="hljs-comment">//自己方法;</span><br>    <span class="hljs-comment">//必须实现的接口的抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>小结：接口是更加抽象的抽象的类，抽象类里的方法可以有方法体，接口里的所有方法都没有方法体 [JDK7.0]。</p><p>​接口一线了程序设计的多态和高内聚低耦合的设计思想</p><p>​<strong>补充：JDK8.0 后接口类可以有 静态方法 和 默认方法 ，也就是说接口中可以有方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AInterface</span> &#123;<br>    <span class="hljs-comment">//写属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//写方法</span><br>    <span class="hljs-comment">//在接口中，抽象方法，可以省略abstract关键字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//在jdk8后，可以有默认实现方法,需要使用default关键字修饰</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;ok ...&quot;</span>);&#125;<br>    <span class="hljs-comment">//在jdk8后, 可以有静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;cry ....&quot;</span>);&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的应用场景之一：统一规范</p><h3 id="接口注意事项和细节"><a href="#接口注意事项和细节" class="headerlink" title="接口注意事项和细节"></a>接口注意事项和细节</h3><ul><li><p>接口不能被实例化</p></li><li><p>接口中所有的方法是 public 方法，接口中抽象方法，可以不用 abstract 修饰</p><p>（修饰符 ‘public’ 对于接口成员是冗余的，可以不写 ）</p></li><li><p>一个普通类实现接口，就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口，可以不用实现接口的方法</p></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性，只能是 final 的，而且是 <strong>public static final</strong> 修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">比如： <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;   实际上是 <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; （必须初始化）<br></code></pre></td></tr></table></figure></li><li><p>接口中属性的访问形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">接口名.属性名<br></code></pre></td></tr></table></figure></li><li><p><strong>接口不能继承类，但是可以继承多个别的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>,C &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>接口的修饰符只能是 public 和 默认，这点和类的修饰符是一样的</strong></p></li></ul><h3 id="实现接口-VS-继承类"><a href="#实现接口-VS-继承类" class="headerlink" title="实现接口 VS 继承类"></a>实现接口 VS 继承类</h3><p>​接口和继承解决的问题不同</p><ul><li><p>继承的价值主要在于：解决代码的复用性和可维护性</p></li><li><p>接口的价值主要在于：设计好各种规范 (方法) ，让其它类去实现这些方法，更加灵活</p></li><li><p>继承是满足 is - a 的关系，而接口只需满足 like - a 的关系</p></li><li><p>接口再一定程度上实现代码解耦 [即：接口规范性 + 动态绑定机制]</p></li></ul><p><strong>小结:</strong>   当子类继承了父类，就自动的拥有父类的功能<br>            如果子类需要扩展功能，可以通过实现接口的方式扩展.<br>            可以理解 实现接口 是对 java 单继承机制 的一种补充.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsVsInterface</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LittleMonkey</span> <span class="hljs-variable">wuKong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LittleMonkey</span>(<span class="hljs-string">&quot;悟空&quot;</span>);<br>        wuKong.climbing();<br>        wuKong.swimming();<br>        wuKong.flying();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fishable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Birdable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">flying</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//猴子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monkey</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Monkey</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">climbing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot; 会爬树...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//继承</span><br><span class="hljs-comment">//小结:  当子类继承了父类，就自动的拥有父类的功能</span><br><span class="hljs-comment">//      如果子类需要扩展功能，可以通过实现接口的方式扩展.</span><br><span class="hljs-comment">//      可以理解 实现接口 是 对java 单继承机制的一种补充.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LittleMonkey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Monkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fishable</span>,Birdable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LittleMonkey</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; 通过学习，可以像鱼儿一样游泳...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flying</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; 通过学习，可以像鸟儿一样飞翔...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ul><li><h4 id="多态参数（前面案例体现）"><a href="#多态参数（前面案例体现）" class="headerlink" title="多态参数（前面案例体现）"></a>多态参数（前面案例体现）</h4><p>在前面的USB接口案例，UsbInterface usb，既可以接收手机对象，又可以接收相机对象，就体现了接口多态</p><p>（接口引用可以指向实现了接口的类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//多态参数</span><br><span class="hljs-keyword">package</span> com.hspedu.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyParameter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//接口的多态体现</span><br>        <span class="hljs-comment">//接口类型的变量 if01 可以指向 实现了IF接口类的对象实例</span><br>        <span class="hljs-type">IF</span> <span class="hljs-variable">if01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>();<br>        if01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br><br>        <span class="hljs-comment">//继承体现的多态</span><br>        <span class="hljs-comment">//父类类型的变量 a 可以指向 继承AAA的子类的对象实例</span><br>        <span class="hljs-type">AAA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBB</span>();<br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CCC</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IF</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IF</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">IF</span>&#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AAA</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AAA</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CCC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AAA</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="多态数组-1"><a href="#多态数组-1" class="headerlink" title="多态数组"></a>多态数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态数组 -&gt; 接口类型数组</span><br>        Usb[] usbs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Usb</span>[<span class="hljs-number">2</span>];<br>        usbs[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone_</span>();<br>        usbs[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera_</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        给Usb数组中，存放 Phone  和  相机对象，Phone类还有一个特有的方法call（），</span><br><span class="hljs-comment">        请遍历Usb数组，如果是Phone对象，除了调用Usb 接口定义的方法外，</span><br><span class="hljs-comment">        还需要调用Phone 特有方法 call</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; usbs.length; i++) &#123;<br>            usbs[i].work();<span class="hljs-comment">//动态绑定..</span><br>            <span class="hljs-comment">//和前面一样，我们仍然需要进行类型的向下转型</span><br>            <span class="hljs-keyword">if</span>(usbs[i] <span class="hljs-keyword">instanceof</span> Phone_) &#123;<span class="hljs-comment">//判断他的运行类型是 Phone_</span><br>                ((Phone_) usbs[i]).call();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机可以打电话...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机工作中...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Camera_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;相机工作中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="接口存在-多态传递-现象"><a href="#接口存在-多态传递-现象" class="headerlink" title="接口存在 多态传递 现象"></a>接口存在 多态传递 现象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyPass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//接口类型的变量可以指向，实现了该接口的类的对象实例</span><br>        <span class="hljs-type">IG</span> <span class="hljs-variable">ig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        <span class="hljs-type">IH</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        <span class="hljs-comment">//如果IG 继承了 IH 接口，而Teacher 类实现了 IG接口</span><br>        <span class="hljs-comment">//那么，实际上就相当于 Teacher 类也实现了 IH接口.</span><br>        <span class="hljs-comment">//这就是所谓的 接口多态传递现象.</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IH</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IG</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IH</span>&#123; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IG</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceExercise02</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; &#125;  <span class="hljs-comment">//想到 等价 public static final int x = 0;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123; <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; &#125; <span class="hljs-comment">//普通属性</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//System.out.println(x); //错误，原因：x不明确</span><br>        <span class="hljs-comment">//可以明确的指定x</span><br>        <span class="hljs-comment">//访问接口的 x 就使用 A.x</span><br>        <span class="hljs-comment">//访问父类的 x 就使用 super.x</span><br>        System.out.println(A.x + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">super</span>.x);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>().pX();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部类（重难点）"><a href="#内部类（重难点）" class="headerlink" title="内部类（重难点）"></a>内部类（重难点）</h2><p>如果定义类在局部位置（方法中&#x2F;代码块）：（1）局部内部类    （2）匿名内部类</p><p>定义在成员位置：（1）成员内部类    （2）静态内部类</p><ul><li><p>基本介绍</p><p>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类，嵌套其它类的类称为外部类</p><p>内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系</p></li><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;  <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;  <span class="hljs-comment">//内部类</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span>&#123;  <span class="hljs-comment">//外部其它类</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3><ul><li>定义在外部类局部位置上（比如说方法内、代码块）<ul><li>局部内部类（有类名）</li><li><strong>匿名内部类（没有类名）（重点）</strong></li></ul></li><li>定义在外部类的成员位置上<ul><li>成员内部类（无 static 修饰）</li><li>静态内部类（有 static 修饰）</li></ul></li></ul><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类是定义在外部类的局部位置，比如方法体中，并且有类名</p><ul><li><p>可以直接访问外部类的所有成员，包含私有成员</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量，而局部变量是不能使用访问修饰符的</p><p>但是可以使用 final 修饰，因为局部变量也可以使用 final </p></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>局部内部类 — 访问 —&gt; 外部类的成员 [ 访问方式：直接访问 ]</p></li><li><p>外部类 — 访问 —&gt; 局部类内部的成员 [ 访问方式：先创建对象再访问（注：必须在作用域内） ]</p></li><li><p>外部其他类 — 不能访问 —&gt; 局部内部类（因为局部内部类地位是一个局部变量）</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则。</p><p>如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.javaStudy.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalinnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer02</span> <span class="hljs-variable">outer02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer02</span>();<br>        outer02.m1();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer02</span> &#123;  <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Ouner02 m2()&quot;</span>);<br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">// * 局部内部类是定义在外部类的局部位置，通常在方法</span><br>        <span class="hljs-comment">// * 不能添加访问修饰符，但是可以使用 final 修饰</span><br>        <span class="hljs-comment">// * 作用域：仅仅在定义它的方法或代码块中</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner02</span> &#123;  <span class="hljs-comment">//局部内部类</span><br>            <span class="hljs-comment">// * 可以直接访问外部类的所有成员，包括私有成员</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;n1=&quot;</span> + n1);<br>                m2();<br>                <span class="hljs-comment">// * 如果外部类和局部内部类的成员重名时，默认遵循就近原则</span><br>                <span class="hljs-comment">//   如果想访问外部类的成员，使用（外部类名.this.成员）去访问</span><br>                <span class="hljs-comment">//   解读：Outer02.this 本质就是外部类的对象</span><br>                <span class="hljs-comment">//        即哪个对象调用了m1，Outer02.this就指向哪个对象</span><br>                System.out.println(<span class="hljs-string">&quot;就近n1=&quot;</span> + n1 + <span class="hljs-string">&quot; 外部类的n1=&quot;</span> + Outer02.<span class="hljs-built_in">this</span>.n1);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// * 外部类访问局部内部类成员：在方法中，可以创建 Inner02对象，然后访问</span><br>        <span class="hljs-type">Inner02</span> <span class="hljs-variable">inner02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner02</span>();<br>        inner02.f1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="匿名内部类（重难点）"><a href="#匿名内部类（重难点）" class="headerlink" title="匿名内部类（重难点）"></a>匿名内部类（重难点）</h3><p>（1）本质是类  （2）内部类  （3）该类没有名字  （4）同时还是一个对象</p><ul><li><p>匿名内部类的基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类或接口(参数列表)&#123;<br>    类体<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>匿名内部类的语法比较奇特，因为匿名内部类既是一个类的定义，同时它本身也是一个对象，因此从语法上看，它既有 定义类 的特征，也有 创建对象 的特征，因此可以调用匿名内部类方法</p></li><li><p>可以直接访问外部类的所有成员，包含私有成员</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量</p></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>匿名内部类 — 访问 —&gt; 外部类成员 [ 访问方式：直接访问 ]</p></li><li><p>外部其他类 — 不能访问 —&gt; 匿名内部类 （因为匿名内部类地位是一个局部变量）</p></li><li><p>如果外部类和匿名内部类的成员重名时，匿名内部类访问成员默认遵循就近原则</p><p>如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p><p>（在匿名内部类中，外部类名.this 即是 该外部类对象的引用）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//匿名内部类的 本质 与 使用 </span><br><span class="hljs-keyword">package</span> com.javaStudy.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousinnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer04</span> <span class="hljs-variable">outer04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer04</span>();<br>        outer04.method();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer04</span>&#123;  <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//基于接口的匿名内部类</span><br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//1.需求：想使用接口IA并创建对象</span><br>        <span class="hljs-comment">//  传统方式：写一个类，实现接口，并创建对象</span><br>        <span class="hljs-comment">//  但希望 Tiger 只用一次，后面不再使用，传统方式耗费资源</span><br>        <span class="hljs-comment">//  我们可以使用匿名内部类来简化开发</span><br>        <span class="hljs-comment">//  tiger 的编译类型：IA</span><br>        <span class="hljs-comment">//  tiger 的运行类型：匿名内部类 XXX =&gt; Outer04$1</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            我们看底层.底层会分配类名：外部类名称$1</span><br><span class="hljs-comment">            class XXX implements IA&#123;</span><br><span class="hljs-comment">                @Override</span><br><span class="hljs-comment">                public void cry() &#123;</span><br><span class="hljs-comment">                    System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//  JDK底层在创建匿名内部类 Outerus04$1，立马就创建了 Outer04$1实例</span><br>        <span class="hljs-comment">//  并且把地址返回给 tiger</span><br>        <span class="hljs-comment">//  匿名内部类使用一次后就不能再使用，但创建出来的对象可继续反复使用</span><br><span class="hljs-comment">//        IA tiger = new Tiger();</span><br><span class="hljs-comment">//        tiger.cry();</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎叫唤...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;tiger的运行类型：&quot;</span> + tiger.getClass());<br>        tiger.cry();<br><br>        <span class="hljs-comment">//基于类的匿名内部类</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.father 编译类型：Father</span><br>        <span class="hljs-comment">//  father 运行类型：Outer04$2</span><br>        <span class="hljs-comment">//  底层会创建匿名内部类</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            class Outer04$2 extends Father&#123;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//  同时也直接返回了 匿名内部了 Outer04$2 的对象</span><br>        <span class="hljs-comment">//  注意：参数列表(&quot;jack&quot;)会传递给 构造器</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;jack&quot;</span>)&#123;<br>            <span class="hljs-comment">//public Father(String name)&#123; &#125;  //构造器不能重写</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了test方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;father的运行类型：&quot;</span> + father.getClass());<br>        father.test();<br><br>        <span class="hljs-comment">//基于抽象类的匿名内部类，方法必须实现</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;小狗吃骨头...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        animal.eat();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;  <span class="hljs-comment">//接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//class Tiger implements IA&#123;</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void cry() &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;  <span class="hljs-comment">//外部其它类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;  <span class="hljs-comment">//构造器</span><br>        System.out.println(<span class="hljs-string">&quot;接收到name：&quot;</span> + name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">//方法</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匿名内部类 的 细节</span><br><span class="hljs-keyword">package</span> com.javaStudy.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClassDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer05</span> <span class="hljs-variable">outer05</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer05</span>();<br>        outer05.f1();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer05</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建一个基于类的匿名内部类</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">111</span>;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了hi方法&quot;</span>);<br>                <span class="hljs-comment">//可以直接访问外部类的所有成员，包括私有成员</span><br>                System.out.println(<span class="hljs-string">&quot;访问外部类私有成员n1：&quot;</span> + n1);<br>                <span class="hljs-comment">//如果外部类和匿名内部类的成员重名时，匿名内部类访问成员默认遵循就近原则</span><br>                <span class="hljs-comment">//如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</span><br>                System.out.println(<span class="hljs-string">&quot;就近n2：&quot;</span> + n2);<br>                System.out.println(<span class="hljs-string">&quot;外部类n2：&quot;</span> + Outer05.<span class="hljs-built_in">this</span>.n2);<br>                <span class="hljs-comment">// （外部类名.this）即是该外部类对象的引用</span><br>            &#125;<br>        &#125;;<br>        p.hi(); <span class="hljs-comment">// 动态绑定，运行类型时Outer05$1</span><br>        <span class="hljs-comment">// 也可以直接调用，匿名内部类本身也是返回对象</span><br>        <span class="hljs-comment">// class 匿名内部类 extends Person &#123;&#125;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span> &#123;<br>                <span class="hljs-built_in">super</span>.ok(str);<br>            &#125;<br>        &#125;.ok(<span class="hljs-string">&quot;jack&quot;</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;  <span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person hi()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Peson ok()：&quot;</span> + str);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 抽象类/接口...</span><br></code></pre></td></tr></table></figure><h4 id="匿名内部类最佳实践"><a href="#匿名内部类最佳实践" class="headerlink" title="匿名内部类最佳实践"></a>匿名内部类最佳实践</h4><p>当做实参直接传递，简洁高效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实践1</span><br><span class="hljs-keyword">package</span> com.hspedu.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//当做实参直接传递，简洁高效，更加灵活</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IL</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;这是一副名画~~...&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//传统方法，更加统一</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>());<br>    &#125;<br>    <span class="hljs-comment">//静态方法,形参是接口类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IL il)</span> &#123;<br>        il.show();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IL</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//类 -&gt; 实现IL =&gt; 在编程领域称为硬编码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Picture</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IL</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一副名画XX...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//实践2</span><br><span class="hljs-keyword">package</span> com.hspedu.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.有一个铃声接口Bell，里面有个ring方法。(右图)</span><br><span class="hljs-comment">        2.有一个手机类Cellphone，具有闹钟功能alarmClock，参数是Bell类型(右图)</span><br><span class="hljs-comment">        3.测试手机类的闹钟功能，通过匿名内部类(对象)作为参数，打印：懒猪起床了</span><br><span class="hljs-comment">        4.再传入另一个匿名内部类(对象)，打印：小伙伴上课了</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">CellPhone</span> <span class="hljs-variable">cellPhone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>();<br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//1. 传递的是实现了 Bell接口的匿名内部类 InnerClassExercise02$1</span><br>        <span class="hljs-comment">//2. 重写了 ring</span><br>        <span class="hljs-comment">//3. 相当于 Bell bell = new Bell() &#123;</span><br>        <span class="hljs-comment">//            @Override</span><br>        <span class="hljs-comment">//            public void ring() &#123;</span><br>        <span class="hljs-comment">//                System.out.println(&quot;懒猪起床了&quot;);</span><br>        <span class="hljs-comment">//            &#125;</span><br>        <span class="hljs-comment">//         &#125;</span><br>        <span class="hljs-comment">//         cellPhone.alarmClock(bell);</span><br>        cellPhone.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;懒猪起床了&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        cellPhone.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;小伙伴上课了&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123; <span class="hljs-comment">//接口</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<span class="hljs-comment">//方法</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span>&#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmClock</span><span class="hljs-params">(Bell bell)</span>&#123;<span class="hljs-comment">//形参是Bell接口类型</span><br>        System.out.println(bell.getClass());<br>        bell.ring();<span class="hljs-comment">//动态绑定</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p><ul><li><p>可以直接访问外部类的所有成员，包括私有成员</p></li><li><p>可以添加任意访问修饰符(public、protected、默认、private)，因为它的地位就是一个成员</p></li><li><p>作用域和外部类的其它成员一样，为整个类体</p></li><li><p>成员内部类 — 访问 —&gt; 外部类成员 [ 访问方式：直接访问 ]</p></li><li><p>外部类 — 访问 —&gt; 成员内部类 [ 访问方式：先创建对象再访问，私有属性也可访问 ]</p></li><li><p>外部其他类 — 访问 —&gt; 成员内部类 [ 两种方式 下面案例展示 ]</p></li><li><p>如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则</p><p>如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberInnerClass01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer08</span> <span class="hljs-variable">outer08</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer08</span>();<br>        outer08.t1();<br>        <br>        <span class="hljs-comment">//外部其他类，使用成员内部类的两种种方式</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">// 第一种方式</span><br>        <span class="hljs-comment">// outer08.new Inner08(); 相当于把 new Inner08()当做是outer08成员</span><br>        <span class="hljs-comment">// 这就是一个语法，不要特别的纠结.</span><br>        Outer08.<span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08</span> <span class="hljs-operator">=</span> outer08.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>        <span class="hljs-comment">//Outer08.Inner08 inner081 = new Outer08.Inner08();  //错误</span><br>        inner08.say();<br>        <span class="hljs-comment">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08对象</span><br>        Outer08.<span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08Instance</span> <span class="hljs-operator">=</span> outer08.getInner08Instance();<br>        inner08Instance.say();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer08</span> &#123; <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;hi()方法...&quot;</span>); &#125;<br>    <span class="hljs-comment">//1.注意: 成员内部类，是定义在外部内的成员位置上</span><br>    <span class="hljs-comment">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner08</span> &#123;  <span class="hljs-comment">//成员内部类</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.8</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 可以直接访问外部类的所有成员，包含私有的</span><br>            <span class="hljs-comment">// 如果成员内部类的成员和外部类的成员重名，会遵守就近原则.</span><br>            <span class="hljs-comment">// 可以通过  外部类名.this.属性 来访问外部类的成员</span><br>            System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + n1 + <span class="hljs-string">&quot; name = &quot;</span> + name + <span class="hljs-string">&quot; 外部类的n1=&quot;</span> + Outer08.<span class="hljs-built_in">this</span>.n1);<br>            hi();<br>            <span class="hljs-comment">// t1(); // 不能相互使用</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方法，返回一个Inner08实例</span><br>    <span class="hljs-keyword">public</span> Inner08 <span class="hljs-title function_">getInner08Instance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//写方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">t1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//使用成员内部类</span><br>        <span class="hljs-comment">//创建成员内部类的对象，然后使用相关的方法</span><br>        <span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>        inner08.say();<br>        System.out.println(inner08.sal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类是定义在外部类的成员位置，并且有 static 修饰</p><ul><li><p>可以直接访问外部类的所有静态成员，包含私有成员，但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员</p></li><li><p>作用域：同其它成员，为整个类体</p></li><li><p>静态内部类 — 访问 —&gt; 外部类（比如静态属性）[ 访问方式：直接访问所有静态成员 ]</p></li><li><p>外部类 — 访问 —&gt; 静态内部类 [ 访问方式：先创建对象再访问 ]</p></li><li><p>外部其它类 — 访问 —&gt; 静态内部类</p></li><li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的话，默认遵循就近原则</p><p>如果想访问外部类的成员，则可以使用（外部类名.成员）去访问</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javaStudy.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer10</span> <span class="hljs-variable">outer10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer10</span>();<br>        outer10.m1();<br>        <span class="hljs-comment">//外部其它类 使用静态内部类</span><br>        <span class="hljs-comment">//方式1</span><br>        <span class="hljs-comment">//因为静态内部类，是可以通过类名直接访问的（前提是满足访问权限）</span><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer10</span>.Inner10();<br>        <span class="hljs-comment">//Inner10 inner101 = Outer10.new Inner10();  //错误</span><br>        <span class="hljs-comment">//方式2</span><br>        <span class="hljs-comment">//编写一个普通方法，可以返回静态内部类的对象实例</span><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner101</span> <span class="hljs-operator">=</span> outer10.getInner10();<br>        <span class="hljs-comment">//编写一个静态方法，可以返回静态内部类的对象实例</span><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10_</span> <span class="hljs-operator">=</span> Outer10.getInner10_();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer10</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Outer10 cry()...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Inner10就是静态内部类</span><br>    <span class="hljs-comment">//1.放在外部类的成员位置</span><br>    <span class="hljs-comment">//2.使用static修饰</span><br>    <span class="hljs-comment">//3.可以直接访问外部类的所有静态成员</span><br>    <span class="hljs-comment">//4.可以添加访问修饰符</span><br>    <span class="hljs-comment">//5.作用域：同其它成员，为整个作用域</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner10</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//System.out.println(n1);  //错误</span><br>            System.out.println(<span class="hljs-string">&quot;name：&quot;</span> + name);<br>            System.out.println(<span class="hljs-string">&quot;name2：&quot;</span> + name2);<br>            cry();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Inner10 <span class="hljs-title function_">getInner10</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Inner10 <span class="hljs-title function_">getInner10_</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();<br>        inner10.say();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举是一组常量的集合，可以这样理解：枚举属于一种特殊的类，里面只包含一组有限的特定的对象</p><p><strong>枚举的两种实现方式</strong></p><ul><li>自定义类实现枚举</li><li>使用 enum 关键字实现枚举</li></ul><h3 id="自定义类实现枚举"><a href="#自定义类实现枚举" class="headerlink" title="自定义类实现枚举"></a>自定义类实现枚举</h3><ul><li>不需要提供 setXXX 方法，因为枚举对象值通常为只读</li><li>对枚举对象&#x2F;属性使用 final + static 共同修饰，实现底层优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要，也可以有多个属性</li></ul><p><strong>一般步骤：</strong></p><ul><li><ol><li>构造器私有化</li></ol></li><li><ol start="2"><li>本类内部创建一组对象  比如：[四个 春夏秋冬]</li></ol></li><li><ol start="3"><li>对外暴露对象（通过为对象添加 public final static 修饰符）</li></ol></li><li><ol start="4"><li>可以提供 get 方法，但是不要提供 set<br> final 和 static 往往搭配使用，效率更高，不会导致类加载（底层编译器做了优化处理）</li></ol></li></ul><h3 id="enum-关键字实现枚举"><a href="#enum-关键字实现枚举" class="headerlink" title="enum 关键字实现枚举"></a>enum 关键字实现枚举</h3><p><strong>一般步骤：</strong></p><ul><li>(1) 使用关键字 enum 来替代 class</li><li>(2) public static final Season SPRING &#x3D; new Season(“春天”, “温暖”)<br> 直接使用 SPRING(“春天”,”温暖”);    即：常量名(实参列表)</li><li>(3) 如果有多个常量(对象)，使用逗号( , )间隔即可</li><li>(4) 如果使用 enum 实现枚举，要求把定义的常量对象写在行首</li></ul><p> <strong>enum 关键字实现枚举注意事项</strong>：</p><ul><li><p>当我们使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类，而且是一个 final 类</p></li><li><p>传统的 public static final Season2 SPRING &#x3D; new Season2(“春天”,”温暖”); 简化成 SPRING(“春天”,”温暖”)</p><p>这里必须知道，它调用的是哪个构造器</p></li><li><p>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</p></li><li><p>当有多个枚举对象时，使用 逗号 ( , ) 间隔，最后有一个分号结尾</p></li><li><p>枚举对象必须放在枚举类的行首</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.javaStudy.enum_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season2.AUTUMN);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season2</span> &#123;<br><br><span class="hljs-comment">//    public static final Season2 SPRING = new Season2(&quot;春天&quot;,&quot;温暖&quot;);</span><br><span class="hljs-comment">//    public static final Season2 WINTER = new Season2(&quot;冬天&quot;,&quot;含量&quot;);</span><br><span class="hljs-comment">//    public static final Season2 AUTUMN = new Season2(&quot;秋天&quot;,&quot;凉爽&quot;);</span><br><span class="hljs-comment">//    public static final Season2 SUMMER = new Season2(&quot;夏天&quot;,&quot;炎热&quot;);</span><br><br>    <span class="hljs-comment">//如果使用enumerate来实现枚举类:</span><br>    <span class="hljs-comment">//1.使用关键字 enum 来替代 class</span><br>    <span class="hljs-comment">//2.public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;)</span><br>    <span class="hljs-comment">//  直接使用 SPRING(&quot;春天&quot;,&quot;温暖&quot;);  即：常量名(实参列表)</span><br>    <span class="hljs-comment">//3.如果有多个常量(对象)，使用逗号(,)间隔即可</span><br>    <span class="hljs-comment">//4.如果使用 enum 实现枚举，要求把定义的常量对象写在前面</span><br><br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>),WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;含量&quot;</span>),AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>),SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>);<br>    <span class="hljs-comment">//What;  //使用 无参构造器</span><br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season2</span><span class="hljs-params">()</span>&#123;&#125;  <span class="hljs-comment">//无参构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season2</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>课堂练习</strong></p> <img src="image-20220905151511623.png" alt="image-20220905151511623" style="zoom:50%;" /><p> 补充（原注释）：[ 返回值: the name of this enum constant ]</p><h3 id="enum-常用方法"><a href="#enum-常用方法" class="headerlink" title="enum 常用方法"></a>enum 常用方法</h3><p>说明：使用关键字 enum 时，会隐式继承 Enum 类, 这样我们就可以使用 Enum 类相关的方法。</p><p> <img src="/2022/06/30/JavaNote/image-20220905215119841.png" alt="image-20220905215119841"></p><ul><li><ol><li>toString：Enum 类已经重写过了，返回的是当前对象名，子类可以重写该方法，用于返回对象的属性信息</li></ol></li><li><ol start="2"><li>name：返回当前对象名（常量名），子类中不能重写</li></ol></li><li><ol start="3"><li>ordinal：返回当前对象的位置号，默认从 0 开始</li></ol></li><li><ol start="4"><li>values：返回当前枚举类中所有的常量</li></ol></li><li><ol start="5"><li>valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常！</li></ol></li><li><ol start="6"><li>compareTo：比较两个枚举常量，比较的就是编号！</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用Season2 枚举类，来演示各种方法</span><br>        <span class="hljs-type">Season2</span> <span class="hljs-variable">autumn</span> <span class="hljs-operator">=</span> Season2.AUTUMN;<br><br>        <span class="hljs-comment">//输出枚举对象的名字</span><br>        System.out.println(autumn.name());<br>        <span class="hljs-comment">//ordinal() 输出的是该枚举对象的次序/编号，从0开始编号</span><br>        <span class="hljs-comment">//AUTUMN 枚举对象是第三个，因此输出 2</span><br>        System.out.println(autumn.ordinal());<br>        <span class="hljs-comment">//从反编译可以看出 values方法，返回 Season2[]</span><br>        <span class="hljs-comment">//含有定义的所有枚举对象</span><br>        Season2[] values = Season2.values();<br>        System.out.println(<span class="hljs-string">&quot;===遍历取出枚举对象(增强for)====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Season2 season: values) &#123;<span class="hljs-comment">//增强for循环</span><br>            System.out.println(season);<br>        &#125;<br><br>        <span class="hljs-comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</span><br>        <span class="hljs-comment">//执行流程</span><br>        <span class="hljs-comment">//1. 根据你输入的 &quot;AUTUMN&quot; 到 Season2的枚举对象去查找</span><br>        <span class="hljs-comment">//2. 如果找到了，就返回，如果没有找到，就报错</span><br>        <span class="hljs-type">Season2</span> <span class="hljs-variable">autumn1</span> <span class="hljs-operator">=</span> Season2.valueOf(<span class="hljs-string">&quot;AUTUMN&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;autumn1=&quot;</span> + autumn1);<br>        System.out.println(autumn == autumn1);<br><br>        <span class="hljs-comment">//compareTo：比较两个枚举常量，比较的就是编号</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 就是把 Season2.AUTUMN 枚举对象的编号 和 Season2.SUMMER 枚举对象的编号比较</span><br>        <span class="hljs-comment">//2. 看看结果</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        public final int compareTo(E o) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            return self.ordinal - other.ordinal;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        Season2.AUTUMN的编号(3) - Season2.SUMMER的编号(2)</span><br><span class="hljs-comment">         */</span><br>        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));  <span class="hljs-comment">// 1</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="enum-实现接口"><a href="#enum-实现接口" class="headerlink" title="enum 实现接口"></a>enum 实现接口</h3><ul><li><ol><li>使用 enum 关键字后，就不能再继承其它类了，因为 enum 会隐式继承 Enum，而 Java 是单继承机制。</li></ol></li><li><ol start="2"><li>枚举类和普通类一样，可以实现接口，如下形式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> 类名 implements 接口 <span class="hljs-number">1</span>，接口 <span class="hljs-number">2</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Music.CLASSICMUSIC.playing();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><br>&#125;<br><span class="hljs-comment">//1.使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</span><br><span class="hljs-comment">//  enum Season3 extends A &#123;  &#125;  //错误</span><br><span class="hljs-comment">//2.enum实现的枚举类，仍然是一个类，所以还是可以实现接口的.</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPlaying</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playing</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPlaying</span> &#123;<br>    CLASSICMUSIC;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;播放好听的音乐...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>注解(Annotation) 也被称为元数据，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息</p></li><li><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p></li><li><p>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</p><p>在 JavaEE 中，注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 JacaEE 旧版中所遗留的臃肿代码和 XML 配置等</p></li></ul><h3 id="基本的-Annotation-介绍"><a href="#基本的-Annotation-介绍" class="headerlink" title="基本的 Annotation 介绍"></a>基本的 Annotation 介绍</h3><p>使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用, 用于修饰它支持的程序元素</p><p><strong>三个基本的 Annotation：</strong></p><ul><li><ol><li>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法</li></ol></li><li><ol start="2"><li>@Deprecated: 用于表示某个程序元素(类, 方法等)已过时</li></ol></li><li><ol start="3"><li>@SuppressWarnings: 抑制编译器警告</li></ol></li></ul><h3 id="Override-使用说明"><a href="#Override-使用说明" class="headerlink" title="@Override 使用说明"></a>@Override 使用说明</h3><p><strong>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法</strong></p><ul><li>@Override 表示知道重写父类的方法（从编译层面验证），如果父类没有该方法，则会报错</li><li>如果不写 @Override 注解，也可以构成重写</li><li>@Override 只能修饰方法，不能修饰其它类、包、属性等</li><li>查看 @Override 注解源码为 @Target(ElementType.METHOD)，说明只是修饰方法</li><li>@Target 是修饰注解的注解，称为元注解</li><li>关于@interface的补充说明：@补充interface不是interface，而是注解类（JDK5.0之后加入的）</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        System.out.println(<span class="hljs-string">&quot;Father fly...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<span class="hljs-comment">//子类</span><br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//说明</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son fly....&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-comment">//解读：</span><br>    <span class="hljs-comment">//1. @Override 注解放在fly方法上，表示子类的fly方法时重写了父类的fly</span><br>    <span class="hljs-comment">//2. 这里如果没有写 @Override 还是重写了父类fly</span><br>    <span class="hljs-comment">//3. 如果你写了@Override注解，编译器就会去检查该方法是否真的重写了父类的</span><br>    <span class="hljs-comment">//   方法，如果的确重写了，则编译通过，如果没有构成重写，则编译错误</span><br>    <span class="hljs-comment">//4. 看看 @Override的定义</span><br>    <span class="hljs-comment">//   解读： 如果发现 @interface 表示一个 注解类</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        @Target(ElementType.METHOD)</span><br><span class="hljs-comment">        @Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-comment">        public @interface Override &#123;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Deprecated-使用说明"><a href="#Deprecated-使用说明" class="headerlink" title="@Deprecated 使用说明"></a>@Deprecated 使用说明</h3><p><strong>@Deprecated: 用于表示某个程序元素(类, 方法等)已过时（即不再推荐使用，但是仍然可以使用）</strong></p><ul><li><p>用于表示某个程序元素（类，方法等）已过时（即不再推荐使用，但是仍然可以使用）</p></li><li><p>可以修饰方法、类、字段、包、参数 等等</p><p>@Target(value&#x3D;{TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})</p></li><li><p>@Deprecated 的作用可以做到新旧版本的兼容与过渡</p></li></ul><h3 id="SuppressWarnings-使用说明"><a href="#SuppressWarnings-使用说明" class="headerlink" title="@SuppressWarnings 使用说明"></a>@SuppressWarnings 使用说明</h3><p><strong>@SuppressWarnings: 抑制编译器警告</strong></p><p><strong>说明各种值：</strong></p><ul><li><p>unchecked 是忽略没有检查的警告</p></li><li><p>rawtypes 是忽略没有指定泛型的警告（传参时没有指定泛型的警告错误）</p></li><li><p>unused 是忽略没有使用某个变量的警告错误</p></li><li><p>@SuppressWarnings 可以修饰的元素为</p><p>(1) 放置的位置就是 TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE<br>(2) 该注解类有数组 String[] values() 设置一个数组比如 {“rawtypes”, “unchecked”, “unused”}</p></li><li><p>生成@SuppressWarnings时，不用背，直接点击左侧的黄色提示就可以选择</p></li><li><p>关于SuppressWarnings 作用范围是和你放置的位置相关<br>比如 @SuppressWarnings放置在 main方法，那么抑制警告的范围就是 main<br>通常我们可以放置具体的语句, 方法, 类.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hspedu.annotation_;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;, &quot;unused&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuppressWarnings_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-type">int</span> i;<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        @SuppressWarnings(&#123;&quot;rawtypes&quot;&#125;)</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;mary&quot;</span>);<br><span class="hljs-comment">//        @SuppressWarnings(&#123;&quot;unused&quot;&#125;)</span><br>        <span class="hljs-type">int</span> i;<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 解读</span><br><span class="hljs-comment">// 1. 当我们不希望看到这些警告的时候，可以使用 SuppressWarnings注解来抑制警告信息</span><br><span class="hljs-comment">// 2. 在&#123;&quot;&quot;&#125; 中，可以写入你希望抑制(不显示)警告信息</span><br><span class="hljs-comment">// 3. 可以指定的警告类型有</span><br><span class="hljs-comment">//        //all，抑制所有警告</span><br><span class="hljs-comment">//        //boxing，抑制与封装/拆装作业相关的警告</span><br><span class="hljs-comment">//        //cast，抑制与强制转型作业相关的警告</span><br><span class="hljs-comment">//        //dep-ann，抑制与淘汰注释相关的警告</span><br><span class="hljs-comment">//        //deprecation，抑制与淘汰的相关警告</span><br><span class="hljs-comment">//        //fallthrough，抑制与switch陈述式中遗漏break相关的警告</span><br><span class="hljs-comment">//        //finally，抑制与未传回finally区块相关的警告</span><br><span class="hljs-comment">//        //hiding，抑制与隐藏变数的区域变数相关的警告</span><br><span class="hljs-comment">//        //incomplete-switch，抑制与switch陈述式(enum case)中遗漏项目相关的警告</span><br><span class="hljs-comment">//        //javadoc，抑制与javadoc相关的警告</span><br><span class="hljs-comment">//        //nls，抑制与非nls字串文字相关的警告</span><br><span class="hljs-comment">//        //null，抑制与空值分析相关的警告</span><br><span class="hljs-comment">//        //rawtypes，抑制与使用raw类型相关的警告</span><br><span class="hljs-comment">//        //resource，抑制与使用Closeable类型的资源相关的警告</span><br><span class="hljs-comment">//        //restriction，抑制与使用不建议或禁止参照相关的警告</span><br><span class="hljs-comment">//        //serial，抑制与可序列化的类别遗漏serialVersionUID栏位相关的警告</span><br><span class="hljs-comment">//        //static-access，抑制与静态存取不正确相关的警告</span><br><span class="hljs-comment">//        //static-method，抑制与可能宣告为static的方法相关的警告</span><br><span class="hljs-comment">//        //super，抑制与置换方法相关但不含super呼叫的警告</span><br><span class="hljs-comment">//        //synthetic-access，抑制与内部类别的存取未最佳化相关的警告</span><br><span class="hljs-comment">//        //sync-override，抑制因为置换同步方法而遗漏同步化的警告</span><br><span class="hljs-comment">//        //unchecked，抑制与未检查的作业相关的警告</span><br><span class="hljs-comment">//        //unqualified-field-access，抑制与栏位存取不合格相关的警告</span><br><span class="hljs-comment">//        //unused，抑制与未用的程式码及停用的程式码相关的警告</span><br><span class="hljs-comment">// 4. 关于SuppressWarnings 作用范围是和你放置的位置相关</span><br><span class="hljs-comment">//    比如 @SuppressWarnings放置在 main方法，那么抑制警告的范围就是 main</span><br><span class="hljs-comment">//    通常我们可以放置具体的语句, 方法, 类.</span><br><span class="hljs-comment">// 5.  看看 @SuppressWarnings 源码</span><br><span class="hljs-comment">// (1) 放置的位置就是 TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE</span><br><span class="hljs-comment">// (2) 该注解类有数组 String[] values() 设置一个数组比如 &#123;&quot;rawtypes&quot;, &quot;unchecked&quot;, &quot;unused&quot;&#125;</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        @Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="hljs-comment">            @Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-comment">            public @interface SuppressWarnings &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                String[] value();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">     */</span><br></code></pre></td></tr></table></figure><h3 id="JDK-的元-Annotation-元注解，-了解"><a href="#JDK-的元-Annotation-元注解，-了解" class="headerlink" title="JDK 的元 Annotation(元注解， 了解)"></a>JDK 的元 Annotation(元注解， 了解)</h3><p><strong>元注解的基本介绍：</strong></p><p> JDK 的元 Annotation 用于修饰其他 Annotation</p><p>元注解： 本身作用不大，讲这个原因希望同学们，看源码时，可以知道他是干什么的</p><p><strong>元注解的种类 (使用不多，了解, 不用深入研究)</strong></p><ul><li><ol><li>Retention &#x2F;&#x2F;指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME</li></ol></li><li><ol start="2"><li>Target &#x2F;&#x2F; 指定注解可以在哪些地方使用</li></ol></li><li><ol start="3"><li>Documented &#x2F;&#x2F;指定该注解是否会在 javadoc 体现</li></ol></li><li><ol start="4"><li>Inherited &#x2F;&#x2F;子类会继承父类注解</li></ol></li></ul><p><strong>@Retention 注解：</strong><br>说明：<br>只能用于修饰一个 Annotation 定义，用于指定该 Annotation 可以保留多长时间，@Rentention 包含一个RetentionPolicy类型的成员变量，使用 @Rentention 时必须为该 value 成员变量指定值</p><p>@Retention 的三种值</p><ul><li><ol><li>RetentionPolicy.SOURCE: 编译器使用后，直接丢弃这种策略的注解。</li></ol></li><li><ol start="2"><li>RetentionPolicy.CLASS: 编译器将把注解记录在 class 文件中，当运行 Java 程序时，JVM 不会保留注解。</li></ol><p>​    这是默认值</p></li><li><ol start="3"><li>RetentionPolicy.RUNTIME:编译器将把注解记录在 class 文件中，当运行 Java 程序时, JVM 会保留注解。</li></ol><p>​    程序可以通过反射获取该注解</p></li></ul> <img src="image-20220905232940982.png" alt="image-20220905232940982" style="zoom:45%;" /><p><strong>@Target 注解：</strong></p><p>用于修饰 Annotation 定义，用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p><p>@Target 也包含一个名为 value 的成员变量</p><p>例如：</p><p>&#x2F;&#x2F;Deprecated.class 中</p><p>@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})</p><p>代表可在  TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE  等类型中使用</p><p><strong>@Target 的源码说明</strong></p> <img src="image-20220905233716325.png" alt="image-20220905233716325" style="zoom:55%;" /><p><strong>@Documented 注解</strong></p><p>@Documented 用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档，即在生成文档时，可以看到该注解</p><p>说明：定义为 Documented 的注解必须设置 Retention 值为 RUNTIME</p> <img src="image-20220905234255887.png" alt="image-20220905234255887" style="zoom: 80%;" /> <img src="image-20220905234323810.png" alt="image-20220905234323810" style="zoom: 80%;" /><p><strong>@Inherited 注解</strong></p> <img src="image-20220905234400437.png" alt="image-20220905234400437" style="zoom: 45%;" /><h2 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 Exception"></a>异常 Exception</h2><p>Java 语言中，将程序执行中发生的不正常情况称为 “异常” 。  </p><p>注：开发过程中的语法错误和逻辑错误不是异常</p><p>执行过程中所发生的异常事件可分为两大类</p><ul><li><p>Error (错误)：Java 虚拟机无法解决的严重事件。如 JVM 系统内部错误、资源耗尽等严重情况。</p><p>比如：StackOverflowError[栈溢出] 和 OOM(out of memory)，Error 是严重错误，程序会崩溃</p></li><li><p>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。</p><p>例如空指针访问，试图读取不存在的文件，网络连接中断等等</p><p>Exception 分为两大类：运行时异常 和 编译时异常</p></li></ul><h3 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h3><p><img src="/2022/06/30/JavaNote/image-20220906143123342.png" alt="image-20220906143123342"></p><ul><li><p>异常分为两大类，运行时异常 和 编译时异常</p></li><li><p>运行时异常，编译器检查不出来。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常</p><p>java.lang.RuntimeException 类及它的子类都是运行时异常 （如 除0异常）</p></li><li><p>对于运行时异常，可以不做处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</p></li><li><p>编译时异常，是编译器要求必须处置的异常（不然编译不能通过）</p></li></ul><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><ul><li>NullPointerException 空指针异常</li><li>ArithmeticException 数学运算异常</li><li>ArrayIndexOutOfBoundsException 数组下标越界异常</li><li>ClassCastException 类型转换异常</li><li>NumberFormatException 数字格式不正确异常</li></ul><p>NullPointerException 空指针异常</p><p>当应用程序试图在需要对象的地方使用 null 时，抛出该异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br></code></pre></td></tr></table></figure><p>ArithmeticException 数学运算异常</p><p>当出现异常的运算条件时，抛出此异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例如 除0错误</span><br></code></pre></td></tr></table></figure><p>ArrayIndexOutOfBoundsException 数组下标越界异常</p><p>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= arr.length; i++) &#123;<br>    System.out.println(arr[i]);<br>&#125;<br><span class="hljs-comment">//当 i = arr.length 时，数组越界</span><br></code></pre></td></tr></table></figure><p>ClassCastException 类型转换异常</p><p>当试图将对象强制转换为不是实例的子类时，抛出该异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassCastException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (B)b; <span class="hljs-comment">//向下转型，这里是OK</span><br>        <span class="hljs-type">C</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> (C)b; <span class="hljs-comment">//这里抛出ClassCastException</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>NumberFormatException 数字格式不正确异常</p><p>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常 </p><p>（使用异常我们可以确保输入是满足条件数字）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberFormatException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;学习Java&quot;</span>;<br>        <span class="hljs-comment">//将 String 转成 int</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(name); <span class="hljs-comment">//抛出 NumberFormatException</span><br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h3><p>编译异常是指在编译期间，就必须处理的异常，否则代码不能通过编译</p><p><strong>常见的编译异常</strong></p><ul><li>SQLException  &#x2F;&#x2F;操作数据库时，查询表可能发生的异常</li><li>IOException  &#x2F;&#x2F;操作文件时，发生的异常</li><li>FileNotFoundException  &#x2F;&#x2F;当操作一个不存在的文件时，发生的异常</li><li>ClassNotFoundException  &#x2F;&#x2F;加载类，而该类不存在时，发生的异常</li><li>EOFException  &#x2F;&#x2F;操作文件，到文件末尾，发生的异常</li><li>IllegalArguementException  &#x2F;&#x2F;参数异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//这里如果不处理异常，则编译不能通过</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            FileInputStream fis;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d:\\aa.jpg&quot;</span>);<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.println(len);<br>            &#125;<br>            fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>异常处理就是当异常发生时，对异常处理的方式</p><p><strong>异常处理的方式：</strong></p><ul><li>try-catch-finally  程序员在代码中捕获发生的异常，自行处理</li><li>throws 将发生的异常抛出，交给调用者（方法）来处理，最顶级的处理者就是 JVM</li></ul><p><strong>示意图</strong></p> <img src="image-20220906153040367.png" alt="image-20220906153040367" style="zoom:50%;" /> <img src="image-20220906153102442.png" alt="image-20220906153102442" style="zoom:50%;" /><h4 id="try-catch-异常处理"><a href="#try-catch-异常处理" class="headerlink" title="try-catch 异常处理"></a>try-catch 异常处理</h4><p>Java 提供 try 和 catch 块来处理异常。try块 用于包含可能出错的代码，catch块 用来处理 try块 中发生的异常。</p><p>可以根据需要在程序中有多个 try…catch 块</p><ul><li>如果没有出现异常，则执行 try块 中所有语句，不执行 catch块 中语句，如果有 finally，最后还需要执行 finally里面的语句</li><li>如果出现异常，则 try块 中异常发生后，try块剩下的语句不再执行。将执行 catch块 中的语句，如果有finally，最后还要执行 finally 里面的语句</li></ul><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//可能发生异常的代码</span><br>    <span class="hljs-comment">//将异常生成的对应的异常对象，传递给catch块</span><br>&#125; <span class="hljs-keyword">catch</span>(异常) &#123;<br>    <span class="hljs-comment">//对异常的处理</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//不管是否发生异常都要执行的代码</span><br>&#125;<br><span class="hljs-comment">//如果没有finally，语法也是可以通过的</span><br></code></pre></td></tr></table></figure><p><strong>try-catch 注意事项</strong></p><ul><li><p>如果异常发生了，则异常发生后面的 try块 的代码不会执行，直接进入到catch块</p></li><li><p>如果异常没有发生，则顺序执行 try 的代码块，不会进入到 catch</p></li><li><p>如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等），则需使用 finally { }</p></li><li><p>可以有多个 catch 语句，捕获不同的异常（进行不同的业务处理），要求父类异常在后，子类异常在前</p><p>比如（Exception 在后，NullPointerException 在前），<strong>如果发生异常，只会匹配一个 catch</strong></p></li><li><p>可以进行 try-finally 配合使用，这种用法相当于没有捕获异常，因此程序会直接崩掉&#x2F;退出。</p><p>应用场景，就是执行一段代码，不管是否发生异常，都必须执行某个业务逻辑</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意事项4</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1.如果try代码块有可能有多个异常</span><br>        <span class="hljs-comment">//2.可以使用多个catch 分别捕获不同的异常，相应处理</span><br>        <span class="hljs-comment">//3.要求子类异常写在前面，父类异常写在后面</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            <span class="hljs-comment">//person = null;</span><br>            System.out.println(person.getName()); <span class="hljs-comment">//NullPointerException</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2; <span class="hljs-comment">//ArithmeticException</span><br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常=&quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;算术异常=&quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意事项5</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDetail03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        可以进行 try-finally 配合使用, 这种用法相当于没有捕获异常，</span><br><span class="hljs-comment">        因此程序会直接崩掉/退出。应用场景，就是执行一段代码，不管是否发生异常，</span><br><span class="hljs-comment">        都必须执行某个业务逻辑</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            System.out.println(n1 / n2);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行了finally..&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序继续执行..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>课堂练习</strong></p> <img src="image-20220906194448537.png" alt="image-20220906194448537" style="zoom:50%;" /><p><strong>try-catch 最佳实践之一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchExercise04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止</span><br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 创建Scanner对象</span><br>        <span class="hljs-comment">//2. 使用无限循环，去接收一个输入</span><br>        <span class="hljs-comment">//3. 然后将该输入的值，转成一个int</span><br>        <span class="hljs-comment">//4. 如果在转换时，抛出异常，说明输入的内容不是一个可以转成int的内容</span><br>        <span class="hljs-comment">//5. 如果没有抛出异常，则break 该循环</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入一个整数:&quot;</span>); <span class="hljs-comment">//</span><br>            inputStr = scanner.next();<br>            <span class="hljs-keyword">try</span> &#123;<br>                num = Integer.parseInt(inputStr); <span class="hljs-comment">//这里是可能抛出异常</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;你输入的不是一个整数:&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你输入的值是=&quot;</span> + num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="throws-异常处理"><a href="#throws-异常处理" class="headerlink" title="throws 异常处理"></a>throws 异常处理</h4><p>如果一个方法（方法中的语句执行时）可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显式地声明抛出异常，表明该方法将不对这些异常进行处理，而由方法的调用者负责处理</p><p>在方法声明中用 throws 语句可以声明抛出异常的列表，throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</p><p>注意：当 throw 语句执行时，它<strong>后面的语句将不执行</strong>，此时程序转向调用者程序，寻找与之相匹配的 catch 语句，执行相应的异常处理程序。</p><p><strong>throws 注意事项和细节</strong></p><ul><li><p>对于编译异常，程序中必须处理，比如 try-catch 或者 throws</p></li><li><p>对于运行时异常，程序中如果没有处理，默认就是 throws 的方式处理</p></li><li><p>子类重写父类的方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型</p></li><li><p>在 throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必 throws</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowsDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        f2();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> <span class="hljs-comment">/*throws ArithmeticException*/</span> &#123;<br>        <span class="hljs-comment">//1.对于编译异常，程序中必须处理，比如 try-catch 或者 throws</span><br>        <span class="hljs-comment">//2.对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">//这里大家思考问题 调用f3() 报错</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 因为 f3() 方法抛出的是一个编译异常</span><br>        <span class="hljs-comment">//2. 即这时，就要 f1() 必须处理这个编译异常</span><br>        <span class="hljs-comment">//3. 在 f1() 中，要么 try-catch-finally ，或者继续 throws 这个编译异常</span><br>        f3(); <span class="hljs-comment">// 抛出异常</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://aa.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//解读:</span><br>        <span class="hljs-comment">//1. 在 f4() 中调用方法 f5() 是 OK 的</span><br>        <span class="hljs-comment">//2. 原因是 f5() 抛出的是运行异常</span><br>        <span class="hljs-comment">//3. 而java中，并不要求程序员显示处理，因为有默认处理机制</span><br>        f5();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException &#123; <br>    <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<span class="hljs-comment">//子类</span><br>    <span class="hljs-comment">//3. 子类重写父类的方法时，对抛出异常的规定:子类重写的方法，</span><br>    <span class="hljs-comment">//   所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型</span><br>    <span class="hljs-comment">//4. 在throws 过程中，如果有方法 try-catch , 就相当于处理异常，就可以不必throws</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>当程序中出现了某些 ” 错误 “ ，但该错误信息并没有在 Throwable 子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息</p><p><strong>自定义异常的步骤</strong></p><ul><li>（1）定义类：自定义异常类名，继承 Exception 或 RuntimeException </li><li>（2）如果继承 Exception，属于编译异常</li><li>（3）如果继承 RuntimeException，属于运行异常（一般来说，继承 RuntimeException）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-comment">/*throws AgeException*/</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>        <span class="hljs-comment">//要求范围在 18 – 120 之间，否则抛出一个自定义异常</span><br>        <span class="hljs-keyword">if</span>(!(age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;= <span class="hljs-number">120</span>)) &#123;<br>            <span class="hljs-comment">//这里我们可以通过构造器，设置信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄需要在 18~120之间&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的年龄范围正确.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义一个异常</span><br><span class="hljs-comment">//解读：</span><br><span class="hljs-comment">//1. 一般情况下，我们自定义异常是继承 RuntimeException</span><br><span class="hljs-comment">//2. 即把自定义异常做成 运行时异常，好处是 我们可以使用默认的处理机制，比较方便</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>throw 和 throws 的区别</strong></p> <img src="image-20220906220808765.png" alt="image-20220906220808765" style="zoom:50%;" /><p><strong>测试题</strong></p> <img src="image-20220906221636588.png" alt="image-20220906221636588" style="zoom:50%;" /><h3 id="异常习题"><a href="#异常习题" class="headerlink" title="异常习题"></a>异常习题</h3> <img src="image-20220906222649017.png" alt="image-20220906222649017" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        编写应用程序EcmDef.java，接收命令行的两个参数(整数)，计算两数相除。</span><br><span class="hljs-comment">        计算两个数相除，要求使用方法 cal(int n1, int n2)</span><br><span class="hljs-comment">        对数据格式不正确(NumberFormatException)、</span><br><span class="hljs-comment">        缺少命令行参数(ArrayIndexOutOfBoundsException)、</span><br><span class="hljs-comment">        除0 进行异常处理(ArithmeticException)。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//先验证输入的参数的个数是否正确 两个参数</span><br>            <span class="hljs-keyword">if</span>(args.length != <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(<span class="hljs-string">&quot;参数个数不对&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//先把接收到的参数，转成整数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">1</span>]);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> cal(n1, n2);<span class="hljs-comment">//该方法可能抛出ArithmeticException</span><br>            System.out.println(<span class="hljs-string">&quot;计算结果是=&quot;</span> + res);<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;参数格式不正确，需要输出整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;出现了除0的异常&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//编写cal方法，就是两个数的商</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> &#123; <span class="hljs-keyword">return</span> n1 / n2; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>针对八种基本定义相应的引用类型 —— 包装类</p><p>有了类的特点，就可以调用类中的方法</p> <img src="image-20220907141229236.png" alt="image-20220907141229236" style="zoom:50%;" /><h4 id="包装类和基本数据的转换"><a href="#包装类和基本数据的转换" class="headerlink" title="包装类和基本数据的转换"></a>包装类和基本数据的转换</h4><ul><li><p>jdk5 前的手动装箱和拆箱方式，装箱：基本类型 -&gt; 包装类型，反正，拆箱</p></li><li><p>jdk5 及以后的自动装箱和拆箱方式</p></li><li><p>自动装箱底层调用的是 valueOf 方法，比如 Integer.valueOf()</p><p>自动拆箱底层调用的是 xxxValue 方法，比如 intValue() 方法</p></li><li><p>其它包装类的用法类似</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//演示 int &lt;--&gt; Integer 的装箱和拆箱</span><br>        <span class="hljs-comment">//手动装箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1);<br>        <span class="hljs-comment">//手动拆箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> integer.intValue();<br>        <span class="hljs-comment">//自动装箱</span><br>        <span class="hljs-type">int</span> n3=<span class="hljs-number">300</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> n3;<br>        <span class="hljs-comment">//自动拆箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> integer2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>习题</p> <img src="image-20220907143322876.png" alt="image-20220907143322876" style="zoom:50%;" /><h4 id="包装类型和-String-类型的相互转换"><a href="#包装类型和-String-类型的相互转换" class="headerlink" title="包装类型和 String 类型的相互转换"></a>包装类型和 String 类型的相互转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperVSString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//包装类(Integer)-&gt;String</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//自动装箱</span><br>        <span class="hljs-comment">//方式1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//方式2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> i.toString();<br>        <span class="hljs-comment">//方式3</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><br>        <span class="hljs-comment">//String -&gt; 包装类(Integer)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.parseInt(str4);<span class="hljs-comment">//使用到自动装箱</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<span class="hljs-comment">//构造器</span><br><br>        System.out.println(<span class="hljs-string">&quot;ok~~&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Integer类和Character类的常用方法"><a href="#Integer类和Character类的常用方法" class="headerlink" title="Integer类和Character类的常用方法"></a>Integer类和Character类的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Integer.MIN_VALUE); <span class="hljs-comment">//返回最小值</span><br>        System.out.println(Integer.MAX_VALUE);<span class="hljs-comment">//返回最大值</span><br><br>        System.out.println(Character.isDigit(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是数字</span><br>        System.out.println(Character.isLetter(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是字母</span><br>        System.out.println(Character.isUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是大写</span><br>        System.out.println(Character.isLowerCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是小写</span><br><br>        System.out.println(Character.isWhitespace(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是空格</span><br>        System.out.println(Character.toUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//转成大写</span><br>        System.out.println(Character.toLowerCase(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//转成小写</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Integer-类面试题-1"><a href="#Integer-类面试题-1" class="headerlink" title="Integer 类面试题 1"></a>Integer 类面试题 1</h4><ol><li>如果 i 在 IntegerCache.low(-128)~IntegerCache.high(127)，就直接从数组返回</li><li>如果不在 -128~127，就直接 new Integer(i)</li><li>只要有基本数据类型 判断的是值是否相同</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        System.out.println(i == j); <span class="hljs-comment">//False</span><br>        <span class="hljs-comment">//所以，这里主要是看范围 -128 ~ 127 就是直接返回</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        //解读</span><br><span class="hljs-comment">        //1. 如果i 在 IntegerCache.low(-128)~IntegerCache.high(127)，就直接从数组返回</span><br><span class="hljs-comment">        //2. 如果不在 -128~127,就直接 new Integer(i)</span><br><span class="hljs-comment">             public static Integer valueOf(int i) &#123;</span><br><span class="hljs-comment">                if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="hljs-comment">                    return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="hljs-comment">                return new Integer(i);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//底层 Integer.valueOf(1); -&gt; 阅读源码</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//底层 Integer.valueOf(1);</span><br>        System.out.println(m == n); <span class="hljs-comment">//True</span><br>        <span class="hljs-comment">//所以，这里主要是看范围 -128 ~ 127 就是直接返回</span><br>        <span class="hljs-comment">//否则，就new Integer(xx);</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">//底层Integer.valueOf(1);</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">//底层Integer.valueOf(1);</span><br>        System.out.println(x == y); <span class="hljs-comment">//False</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperExercise03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//示例一</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>);<br>        System.out.println(i1 == i2); <span class="hljs-comment">//F</span><br>        <span class="hljs-comment">//示例二</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">128</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">128</span>);<br>        System.out.println(i3 == i4); <span class="hljs-comment">//F</span><br>        <span class="hljs-comment">//示例三</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<span class="hljs-comment">//底层Integer.valueOf(127)</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<span class="hljs-comment">//-128~127</span><br>        System.out.println(i5 == i6); <span class="hljs-comment">//T</span><br>        <span class="hljs-comment">//示例四</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i7</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i8</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        System.out.println(i7 == i8); <span class="hljs-comment">//F</span><br>        <span class="hljs-comment">//示例五</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i9</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>; <span class="hljs-comment">//Integer.valueOf(127)</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>);<br>        System.out.println(i9 == i10); <span class="hljs-comment">//F</span><br>        <span class="hljs-comment">//示例六</span><br>        <span class="hljs-comment">//只要有基本数据类型 判断的是值是否相同</span><br>        Integer i11=<span class="hljs-number">127</span>;<br>        <span class="hljs-type">int</span> i12=<span class="hljs-number">127</span>;<br>        System.out.println(i11==i12); <span class="hljs-comment">//T</span><br>        <span class="hljs-comment">//示例七</span><br>        Integer i13=<span class="hljs-number">128</span>;<br>        <span class="hljs-type">int</span> i14=<span class="hljs-number">128</span>;<br>        System.out.println(i13==i14); <span class="hljs-comment">//T</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><ul><li><p>String 对象用于保存字符串，也就是一组字符序列</p></li><li><p>字符串常量对象是用双引号括起来的字符序列。例如：”你好”、”12.97”、”bey” 等</p></li><li><p>字符串的字符使用Unicode字符编码，一个字符（不管是字母还是汉字）占两个字节</p></li><li><p>String 类较常用构造方法（其它看手册）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(String original);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> count);<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">byte</span>[] b);<br></code></pre></td></tr></table></figure></li><li><p>说明：</p> <img src="image-20220907151045071.png" alt="image-20220907151045071" style="zoom:50%;" /></li><li><p>String 类实现了 接口 Serializable [String 可以串行化:可以在网络传输]</p></li><li><p>String 类实现了 接口 Comparable [String 对象可以比较大小]</p></li><li><p>String 有属性 private final char value[];   用于存放字符串内容</p></li><li><p>一定要注意：value 是一个 final 类型，不可以修改(需要功力)：</p><p>即 value 不能指向新的地址，但是单个字符内容是可以变化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.String 对象用于保存字符串，也就是一组字符序列</span><br>        <span class="hljs-comment">//2. &quot;jack&quot; 字符串常量, 双引号括起的字符序列</span><br>        <span class="hljs-comment">//3. 字符串的字符使用Unicode字符编码，一个字符(不区分字母还是汉字)占两个字节</span><br>        <span class="hljs-comment">//4. String 类有很多构造器，构造器的重载</span><br>        <span class="hljs-comment">//   常用的有 String  s1 = new String(); //</span><br>        <span class="hljs-comment">//String  s2 = new String(String original);</span><br>        <span class="hljs-comment">//String  s3 = new String(char[] a);</span><br>        <span class="hljs-comment">//String  s4 =  new String(char[] a,int startIndex,int count)</span><br>        <span class="hljs-comment">//String s5 = new String(byte[] b)</span><br>        <span class="hljs-comment">//5. String 类实现了 接口 Serializable [String 可以串行化:可以在网络传输]</span><br>        <span class="hljs-comment">//                 接口 Comparable [String 对象可以比较大小]</span><br>        <span class="hljs-comment">//6. String 是 final 类，不能被其他的类继承</span><br>        <span class="hljs-comment">//7. String 有属性 private final char value[]; 用于存放字符串内容</span><br>        <span class="hljs-comment">//8. 一定要注意：value 是一个final类型，不可以修改(需要功力)：即value不能指向</span><br>        <span class="hljs-comment">//   新的地址，但是单个字符内容是可以变化</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>        name = <span class="hljs-string">&quot;tom&quot;</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] value = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] v2 = &#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>&#125;;<br>        value[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;H&#x27;</span>;<br>        <span class="hljs-comment">//value = v2; //不可以修改 value地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="String-创建剖析"><a href="#String-创建剖析" class="headerlink" title="String 创建剖析"></a>String 创建剖析</h4><ul><li><p>方式一：直接赋值  String s1 &#x3D; “hsp”;</p><p>先从常量池查看是否有 “hsp” 数据空间，如果有则直接指向；如果没有则先创建如何指向</p><p>s1 最终指向的是常量池的空间地址</p></li><li><p>方式二：调用构造器  String s2 &#x3D; new String(“hsp”)</p><p>先在堆中创建空间，里面维护了 value 属性，指向常量池的 hsp 空间</p><p>如果常量池中有 “hsp” 则直接通过value指向，如果没有则先创建再指向</p><p>s2 最终指向的是堆中的空间地址</p></li><li><p>因此 s1 !&#x3D; s2</p></li><li><p>两种方式的内存分布图：</p> <img src="image-20220907194812227.png" alt="image-20220907194812227" style="zoom: 80%;" /></li></ul><h4 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h4> <img src="image-20220907212648493.png" alt="image-20220907212648493" style="zoom:50%;" /><h4 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h4><ul><li>String 是一个 final 类，代表不可变的字符序列</li><li>字符串是不可变的。一个字符串对象一旦被分配，其内容是不可变的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4> <img src="image-20220907225007862.png" alt="image-20220907225007862" style="zoom:50%;" /> <img src="image-20220907225026693.png" alt="image-20220907225026693" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 题2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringExercise08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">//创建 a对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//创建 b对象</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 先创建一个 StringBuilder sb = StringBuilder()</span><br>        <span class="hljs-comment">//2. 执行 sb.append(&quot;hello&quot;);</span><br>        <span class="hljs-comment">//3. sb.append(&quot;abc&quot;);</span><br>        <span class="hljs-comment">//4. String c = sb.toString()  // toString() 的底层是 new</span><br>        <span class="hljs-comment">//最后其实是 c 指向堆中的对象(String) value[] -&gt; 池中 &quot;helloabc&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloabc&quot;</span>;<br>        System.out.println(c == d);<span class="hljs-comment">//真还是假? 是false</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//直接看池， e指向常量池</span><br>        System.out.println(d == e);<span class="hljs-comment">//真还是假? 是true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20220907230439422.png" alt="image-20220907230439422" style="zoom: 56%;" /><p><strong>！！！</strong></p> <img src="image-20220907231315310.png" alt="image-20220907231315310" style="zoom: 80%;" /><h4 id="String-类的常见方法"><a href="#String-类的常见方法" class="headerlink" title="String 类的常见方法"></a>String 类的常见方法</h4><p>String 类是保存字符串常量的。每次更新都需要重新开辟空间，效率较低，因此 java 设计者还提供了 StringBuilder 和 StringBuffer 来增强 String 的功能，并提高效率。</p><ul><li><p>equals  &#x2F;&#x2F;区分大小写，判断内容是否相等</p></li><li><p>equalslgnoreCase  &#x2F;&#x2F;忽略大小写的判断内容是否相等</p></li><li><p>length  &#x2F;&#x2F;获取字符的个数，字符串的长度</p></li><li><p>indexOf  &#x2F;&#x2F;获取字符或子字符串在字符串中第1次出现的索引，索引从0开始，如果找不到则返回-1</p></li><li><p>lastIndexOf  &#x2F;&#x2F;获取字符在字符串中最后1此出现的索引，索引从0开始，如果找不到则返回-1</p></li><li><p>substring  &#x2F;&#x2F;截取指定范围的字串</p></li><li><p>trim  &#x2F;&#x2F;去前后空格</p></li><li><p>charAt  &#x2F;&#x2F;获取某索引处的字符，注意不能使用 Str[index] 这种方法</p></li><li><p>toUpperCase  &#x2F;&#x2F;转成大写</p></li><li><p>toLowerCase  &#x2F;&#x2F;转成小写</p></li><li><p>concat  &#x2F;&#x2F;拼接字符串</p></li><li><p>replace  &#x2F;&#x2F;替换字符串中的字符</p></li><li><p>split  &#x2F;&#x2F;分割字符串，对于某些分割字符，我们需要转义 比如 | \\  等</p></li><li><p>compareTo  &#x2F;&#x2F;比较两个字符串的大小</p></li><li><p>toCharArray  &#x2F;&#x2F;转换成字符数组</p></li><li><p>format  &#x2F;&#x2F;格式化字符串，%s 字符串、%c 字符、%d 整型、%.2f 浮点型</p><p>案例：将一个人的信息格式化输出</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. equals 前面已经讲过了. 比较内容是否相同，区分大小写</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        System.out.println(str1.equals(str2)); <span class="hljs-comment">//false</span><br>        <span class="hljs-comment">// 2.equalsIgnoreCase 忽略大小写的判断内容是否相等</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;johN&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;john&quot;</span>.equalsIgnoreCase(username)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Success!&quot;</span>);  <span class="hljs-comment">//Success!</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Failure!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3.length 获取字符的个数，字符串的长度</span><br>        System.out.println(<span class="hljs-string">&quot;韩顺平&quot;</span>.length());  <span class="hljs-comment">//3</span><br>        <span class="hljs-comment">// 4.indexOf 获取字符/字符串在字符串对象中第一次出现的索引，索引从0开始，如果找不到，返回-1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wer@terwe@g&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> s1.indexOf(<span class="hljs-string">&#x27;@&#x27;</span>);<br>        System.out.println(index);  <span class="hljs-comment">//3</span><br>        System.out.println(<span class="hljs-string">&quot;weIndex=&quot;</span> + s1.indexOf(<span class="hljs-string">&quot;we&quot;</span>));  <span class="hljs-comment">//0</span><br>        <span class="hljs-comment">// 5.lastIndexOf 获取字符/字符串在字符串中最后一次出现的索引，索引从0开始，如果找不到，返回-1</span><br>        s1 = <span class="hljs-string">&quot;wer@terwe@g@&quot;</span>;<br>        index = s1.lastIndexOf(<span class="hljs-string">&#x27;@&#x27;</span>);<br>        System.out.println(index);  <span class="hljs-comment">//11</span><br>        System.out.println(<span class="hljs-string">&quot;ter的位置=&quot;</span> + s1.lastIndexOf(<span class="hljs-string">&quot;ter&quot;</span>));  <span class="hljs-comment">//4</span><br>        <span class="hljs-comment">// 6.substring 截取指定范围的子串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello,张三&quot;</span>;<br>        <span class="hljs-comment">//下面name.substring(6) 从索引6开始截取后面所有的内容</span><br>        System.out.println(name.substring(<span class="hljs-number">6</span>));  <span class="hljs-comment">//张三</span><br>        <span class="hljs-comment">//name.substring(0,5)表示从索引0开始截取，截取到索引 5-1=4位置</span><br>        System.out.println(name.substring(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>));  <span class="hljs-comment">//llo</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.toUpperCase转换成大写</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;heLLo&quot;</span>;<br>        System.out.println(s.toUpperCase()); <span class="hljs-comment">//HELLO</span><br>        <span class="hljs-comment">// 2.toLowerCase</span><br>        System.out.println(s.toLowerCase()); <span class="hljs-comment">//hello</span><br>        <span class="hljs-comment">// 3.concat拼接字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;宝玉&quot;</span>;<br>        s1 = s1.concat(<span class="hljs-string">&quot;林黛玉&quot;</span>).concat(<span class="hljs-string">&quot;薛宝钗&quot;</span>).concat(<span class="hljs-string">&quot;together&quot;</span>);<br>        System.out.println(s1); <span class="hljs-comment">//宝玉林黛玉薛宝钗together</span><br>        <span class="hljs-comment">// 4.replace 替换字符串中的字符</span><br>        s1 = <span class="hljs-string">&quot;宝玉 and 林黛玉 林黛玉 林黛玉&quot;</span>;<br>        <span class="hljs-comment">//在s1中，将 所有的 林黛玉 替换成薛宝钗</span><br>        <span class="hljs-comment">// 老韩解读: s1.replace() 方法执行后，返回的结果才是替换过的.</span><br>        <span class="hljs-comment">// 注意 对s1没有任何影响</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s11</span> <span class="hljs-operator">=</span> s1.replace(<span class="hljs-string">&quot;宝玉&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        System.out.println(s1);<span class="hljs-comment">//宝玉 and 林黛玉 林黛玉 林黛玉</span><br>        System.out.println(s11);<span class="hljs-comment">//jack and 林黛玉 林黛玉 林黛玉</span><br>        <span class="hljs-comment">// 5.split 分割字符串, 对于某些分割字符，我们需要 转义比如 | \\等</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">poem</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦&quot;</span>;<br>        <span class="hljs-comment">//老韩解读：</span><br>        <span class="hljs-comment">// 1. 以 , 为标准对 poem 进行分割 , 返回一个数组</span><br>        <span class="hljs-comment">// 2. 在对字符串进行分割时，如果有特殊字符，需要加入 转义符 \</span><br>        String[] split = poem.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        poem = <span class="hljs-string">&quot;E:\\aaa\\bbb&quot;</span>;<br>        split = poem.split(<span class="hljs-string">&quot;\\\\&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;==分割后内容===&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>            System.out.println(split[i]);<br>        &#125;<br>        <span class="hljs-comment">// 6.toCharArray 转换成字符数组</span><br>        s = <span class="hljs-string">&quot;happy&quot;</span>;<br>        <span class="hljs-type">char</span>[] chs = s.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chs.length; i++) &#123;<br>            System.out.println(chs[i]);<br>        &#125;<br>        <span class="hljs-comment">// 7.compareTo 比较两个字符串的大小，如果前者大，</span><br>        <span class="hljs-comment">// 则返回正数，后者大，则返回负数，如果相等，返回0</span><br>        <span class="hljs-comment">// 老韩解读</span><br>        <span class="hljs-comment">// (1) 如果长度相同，并且每个字符也相同，就返回 0</span><br>        <span class="hljs-comment">// (2) 如果在进行比较时，可以区分大小</span><br>        <span class="hljs-comment">//     就返回 if (c1 != c2) &#123;</span><br>        <span class="hljs-comment">//                return c1 - c2;</span><br>        <span class="hljs-comment">//            &#125;</span><br>        <span class="hljs-comment">// (3) 如果前面的部分都相同，就返回 str1.len - str2.len</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jcck&quot;</span>;<span class="hljs-comment">// len = 4</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<span class="hljs-comment">// len = 4</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jac&quot;</span>;<span class="hljs-comment">// len = 3</span><br>        System.out.println(a.compareTo(b)); <span class="hljs-comment">// 返回值是 &#x27;c&#x27; - &#x27;a&#x27; = 2的值</span><br>        System.out.println(a.compareTo(c)); <span class="hljs-comment">//a.length() - c.length() = 1</span><br>        <span class="hljs-comment">// 8.format 格式字符串</span><br>        <span class="hljs-comment">/* 占位符有:</span><br><span class="hljs-comment">         * %s 字符串 %c 字符 %d 整型 %.2f 浮点型</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;john&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">56.857</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-comment">//将所有的信息都拼接在一个字符串.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span><br>                <span class="hljs-string">&quot;我的姓名是&quot;</span> + name + <span class="hljs-string">&quot;年龄是&quot;</span> + age + <span class="hljs-string">&quot;,成绩是&quot;</span> + score + <span class="hljs-string">&quot;性别是&quot;</span> + gender + <span class="hljs-string">&quot;。希望大家喜欢我！&quot;</span>;<br>        System.out.println(info);<br>        <span class="hljs-comment">//format解读</span><br>        <span class="hljs-comment">//1. %s , %d , %.2f %c 称为占位符</span><br>        <span class="hljs-comment">//2. 这些占位符由后面变量来替换</span><br>        <span class="hljs-comment">//3. %s 表示后面由 字符串来替换</span><br>        <span class="hljs-comment">//4. %d 是整数来替换</span><br>        <span class="hljs-comment">//5. %.2f 表示使用小数来替换，替换后，只会保留小数点两位, 并且进行四舍五入的处理</span><br>        <span class="hljs-comment">//6. %c 使用char 类型来替换</span><br>        <span class="hljs-comment">//String info0 = String.format(&quot;我的姓名是%s 年龄是%d，成绩是%.2f 性别是%c.希望大家喜欢我！&quot;, name, age, score, gender);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">formatStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我的姓名是%s 年龄是%d，成绩是%.2f 性别是%c.希望大家喜欢我！&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info2</span> <span class="hljs-operator">=</span> String.format(formatStr, name, age, score, gender);<br>        System.out.println(<span class="hljs-string">&quot;info2=&quot;</span> + info2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3><p>java.lang.StringBuffer 代表可变的字符序列，可以对字符串内容进行增删</p><p>StringBuffer 很多方法与 String 相同，但 StringBuffer 是可变长度的</p><p>StringBuffer 是一个容器</p> <img src="image-20220908152913126.png" alt="image-20220908152913126" style="zoom: 80%;" /><ul><li>1）StringBuffer 实现了 Serializable, 即StringBuffer的对象可以串行化</li><li>2）StringBuffer 的直接父类 是 AbstractStringBuilder</li><li>3）在父类 AbstractStringBuilder 中有属性 char[] value,不是final<br>  该 value 数组存放 字符串内容，因此是存放在堆中的</li><li>4）StringBuffer 是一个 final类，不能被继承</li><li>5）因为StringBuffer 字符内容是存在 char[] value, 所有在变化(增加&#x2F;删除)<br>   不用每次都更换地址(即不是每次创建新对象)， 所以效率高于 String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuffer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. StringBuffer 实现了 Serializable, 即StringBuffer的对象可以串行化</span><br>        <span class="hljs-comment">//2. StringBuffer 的直接父类 是 AbstractStringBuilder</span><br>        <span class="hljs-comment">//3. 在父类 AbstractStringBuilder 中有属性 char[] value,不是final</span><br>        <span class="hljs-comment">//   该 value 数组存放 字符串内容，因此是存放在堆中的</span><br>        <span class="hljs-comment">//4. StringBuffer 是一个 final类，不能被继承</span><br>        <span class="hljs-comment">//5. 因为StringBuffer 字符内容是存在 char[] value, 所有在变化(增加/删除)</span><br>        <span class="hljs-comment">//   不用每次都更换地址(即不是每次创建新对象)， 所以效率高于 String</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Srting-VS-StringBuffer"><a href="#Srting-VS-StringBuffer" class="headerlink" title="Srting VS StringBuffer"></a>Srting VS StringBuffer</h4><ul><li>String 保存的是字符串常量，里面的值不能更改，每次 String 类的更新实际上就是更改地址，效率较低</li><li>StringBuffer 保存的是字符串变量，里面的值可以更改，每次 StringBuffer 的更新实际上可以更新内容，不用每次更新地址，效率较高（因为StringBuffer 字符内容是存在在堆中的 char[] value 中的）</li></ul><h4 id="StringBuffer-构造器"><a href="#StringBuffer-构造器" class="headerlink" title="StringBuffer 构造器"></a>StringBuffer 构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuffer02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//构造器的使用</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 创建一个 大小为 16的 char[] ,用于存放字符内容</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//2 通过构造器指定 char[] 大小</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//3. 通过 给一个 String 创建 StringBuffer, char[] 大小就是 str.length() + 16</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="String-和-StringBuffer-相互转换"><a href="#String-和-StringBuffer-相互转换" class="headerlink" title="String 和 StringBuffer 相互转换"></a>String 和 StringBuffer 相互转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringAndStringBuffer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//看 String --&gt; StringBuffer</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello tom&quot;</span>;<br>        <span class="hljs-comment">//方式1 使用构造器</span><br>        <span class="hljs-comment">//注意： 返回的才是StringBuffer对象，对str 本身没有影响</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str);<br>        <span class="hljs-comment">//方式2 使用的是append方法</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        stringBuffer1 = stringBuffer1.append(str);<br><br>        <span class="hljs-comment">//看 StringBuffer --&gt; String</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<br>        <span class="hljs-comment">//方式1: 使用构造器来搞定</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(stringBuffer3);<br>        <span class="hljs-comment">//方式2 使用StringBuffer提供的 toString方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> stringBuffer3.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StringBuffer-类常见方法"><a href="#StringBuffer-类常见方法" class="headerlink" title="StringBuffer 类常见方法"></a>StringBuffer 类常见方法</h4><ul><li>增  append(string)</li><li>删  delete(start, end)</li><li>改  replace(start, end, string)</li><li>查  indexOf(string)</li><li>插  insert(string)</li><li>获取长度  length()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-comment">//增</span><br>        s.append(<span class="hljs-string">&#x27;,&#x27;</span>); <span class="hljs-comment">// &quot;hello,&quot;</span><br>        s.append(<span class="hljs-string">&quot;张三丰&quot;</span>); <span class="hljs-comment">//&quot;hello,张三丰&quot;</span><br>        s.append(<span class="hljs-string">&quot;赵敏&quot;</span>).append(<span class="hljs-number">100</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-number">10.5</span>); <span class="hljs-comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span><br>        System.out.println(s); <span class="hljs-comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span><br>        <span class="hljs-comment">//删</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 删除索引为&gt;=start &amp;&amp; &lt;end 处的字符</span><br><span class="hljs-comment">         * 解读: 删除 11~14 的字符 [11, 14)</span><br><span class="hljs-comment">         */</span><br>        s.delete(<span class="hljs-number">11</span>, <span class="hljs-number">14</span>);<br>        System.out.println(s); <span class="hljs-comment">//&quot;hello,张三丰赵敏true10.5&quot;</span><br>        <span class="hljs-comment">//改</span><br>        <span class="hljs-comment">//例：使用 周芷若 替换 索引9-11的字符 [9,11)</span><br>        s.replace(<span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-string">&quot;周芷若&quot;</span>);<br>        System.out.println(s); <span class="hljs-comment">//&quot;hello,张三丰周芷若true10.5&quot;</span><br>        <span class="hljs-comment">//查</span><br>        <span class="hljs-comment">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indexOf</span> <span class="hljs-operator">=</span> s.indexOf(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        System.out.println(indexOf); <span class="hljs-comment">//6</span><br>        <span class="hljs-comment">//插</span><br>        <span class="hljs-comment">//例：在索引为9的位置插入 &quot;赵敏&quot;,原来索引为9的内容自动后移</span><br>        s.insert(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>        System.out.println(s); <span class="hljs-comment">//&quot;hello,张三丰赵敏周芷若true10.5&quot;</span><br>        <span class="hljs-comment">//长度</span><br>        System.out.println(s.length()); <span class="hljs-comment">//22</span><br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试题-1"><a href="#测试题-1" class="headerlink" title="测试题"></a>测试题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//知识类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// ok</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(); <span class="hljs-comment">//ok</span><br>        sb.append(str);<span class="hljs-comment">//需要看源码 , 底层调用的是 AbstractStringBuilder 的 appendNull</span><br>        System.out.println(sb.length());<span class="hljs-comment">//4</span><br>        System.out.println(sb);<span class="hljs-comment">//null</span><br>        <span class="hljs-comment">//下面的构造器，会抛出NullpointerException</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str); <span class="hljs-comment">//看底层源码 super(str.length() + 16);</span><br>        System.out.println(sb1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//应用类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输入商品名称和商品价格，要求打印效果示例, 使用前面学习的方法完成：</span><br><span class="hljs-comment">        商品名商品价格</span><br><span class="hljs-comment">        手机123,564.59  //比如 价格 3,456,789.88</span><br><span class="hljs-comment">        要求：价格的小数点前面每三位用逗号隔开, 再输出。</span><br><span class="hljs-comment">        思路分析</span><br><span class="hljs-comment">        1. 定义一个Scanner 对象，接收用户输入的 价格(String)</span><br><span class="hljs-comment">        2. 希望使用到 StringBuffer的 insert ，需要将 String 转成 StringBuffer</span><br><span class="hljs-comment">        3. 然后使用相关方法进行字符串的处理</span><br><span class="hljs-comment">        代码实现</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//new Scanner(System.in)</span><br><span class="hljs-comment">//先完成一个最简单的实现123,564.59</span><br>        <span class="hljs-comment">//找到小数点的索引，然后在该位置的前3位，插入,即可</span><br>        <span class="hljs-comment">//int i = sb.lastIndexOf(&quot;.&quot;);</span><br>        <span class="hljs-comment">//sb = sb.insert(i - 3, &quot;,&quot;);</span><br>        <span class="hljs-comment">//上面的两步需要做一个循环处理,才是正确的</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;8123564.59&quot;</span>;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(price);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sb.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) - <span class="hljs-number">3</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">3</span>) &#123;<br>            sb = sb.insert(i, <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println(sb);<span class="hljs-comment">//8,123,564.59</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuilder-类"><a href="#StringBuilder-类" class="headerlink" title="StringBuilder 类"></a>StringBuilder 类</h3><p>一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步（即StringBuilder 不是线程安全的）。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快</p><p>StringBuilder 和 StringBuffer 均代表可变的字符序列，方法是一样的，所以使用和 StringBuffer 一样</p><p>在 StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据</p><ul><li>1）StringBuilder 继承 AbstractStringBuilder 类</li><li>2）实现了 Serializable ,说明StringBuilder对象是可以串行化(对象可以网络传输，也可以保存到文件中)</li><li>3）StringBuilder 是 final 类, 不能被继承</li><li>4）StringBuilder 对象字符序列仍然是存放在其父类 AbstractStringBuilder 的 char[] value;<br>   因此，字符序列是存放在堆中</li><li>5）StringBuilder 的方法，没有做互斥的处理，即 没有 synchronized 关键字，因此在单线程的情况下使用</li></ul><h3 id="String、StringBuffer-和-StringBuilder-的比较"><a href="#String、StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String、StringBuffer 和 StringBuilder 的比较"></a>String、StringBuffer 和 StringBuilder 的比较</h3><ul><li><p>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且方法也一样</p></li><li><p>String：不可变的字符序列，效率低，但是复用率高</p></li><li><p>StringBuffer：可变字符序列、效率较高（增删）、线程安全</p></li><li><p>StringBuilder：可变字符序列、效率最高（增删）、线程不安全</p></li><li><p>String 使用注意事项说明：</p><p>string s &#x3D; “a”;  &#x2F;&#x2F;创建了一个字符串</p><p>s +&#x3D; “b”;  &#x2F;&#x2F;实际上原来的”a”字符串对象已经丢弃了，现在又产生了一个字符串 s + “b”（也就是”ab”）。</p><p>​&#x2F;&#x2F;如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率</p><p>​&#x2F;&#x2F;如果这样的操作放到循环中，会极大影响程序的性能</p><p>&#x2F;&#x2F;因此：如果我们要对字符串做大量修改，不要使用 String</p></li></ul><h4 id="String、StringBuffer-和-StringBuilder-的选择"><a href="#String、StringBuffer-和-StringBuilder-的选择" class="headerlink" title="String、StringBuffer 和 StringBuilder 的选择"></a>String、StringBuffer 和 StringBuilder 的选择</h4><ul><li>如果字符串存在大量的修改操作，并在单线程的情况，使用 StringBuilder</li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用 StringBuffer</li><li>如果字符串很少修改，被多个对象引用，使用 String （比如配置信息等）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String、StringBuffer 和 StringBuilder 的 效率测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringVsStringBufferVsStringBuilder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-comment">//StringBuffer</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<span class="hljs-comment">//StringBuffer 拼接 20000次</span><br>            buffer.append(String.valueOf(i));<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));<br>        <span class="hljs-comment">//StringBuilder</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<span class="hljs-comment">//StringBuilder 拼接 20000次</span><br>            builder.append(String.valueOf(i));<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));<br>        <span class="hljs-comment">//String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<span class="hljs-comment">//String 拼接 20000次</span><br>            text = text + i;<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h3><p>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数 等等（均为静态方法）</p><ul><li>abs  &#x2F;&#x2F;绝对值</li><li>pow  &#x2F;&#x2F;求幂</li><li>ceil  &#x2F;&#x2F;向上取整</li><li>floor  &#x2F;&#x2F;向下取整</li><li>round  &#x2F;&#x2F;四舍五入</li><li>sqrt  &#x2F;&#x2F;求开方</li><li>random  &#x2F;&#x2F;求随机数</li><li>max  &#x2F;&#x2F;求两个数的最大值</li><li>min  &#x2F;&#x2F;求两个数的最小值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//看看Math常用的方法(静态方法)</span><br>        <span class="hljs-comment">//1.abs 绝对值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">abs</span> <span class="hljs-operator">=</span> Math.abs(-<span class="hljs-number">9</span>);<br>        System.out.println(abs);  <span class="hljs-comment">//9</span><br>        <span class="hljs-comment">//2.pow 求幂</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">pow</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);  <span class="hljs-comment">//2的4次方</span><br>        System.out.println(pow);  <span class="hljs-comment">//16</span><br>        <span class="hljs-comment">//3.ceil 向上取整,返回&gt;=该参数的double类型的最小整数;</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">ceil</span> <span class="hljs-operator">=</span> Math.ceil(<span class="hljs-number">3.9</span>);<br>        System.out.println(ceil);  <span class="hljs-comment">//4.0</span><br>        <span class="hljs-comment">//4.floor 向下取整，返回&lt;=该参数的double类型的最大整数;</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">floor</span> <span class="hljs-operator">=</span> Math.floor(<span class="hljs-number">4.001</span>);<br>        System.out.println(floor);  <span class="hljs-comment">//4.0</span><br>        <span class="hljs-comment">//5.round 四舍五入  Math.floor(该参数+0.5)  返回long类型</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">round</span> <span class="hljs-operator">=</span> Math.round(<span class="hljs-number">5.51</span>);<br>        System.out.println(round);  <span class="hljs-comment">//6</span><br>        <span class="hljs-comment">//6.sqrt 求开方</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sqrt</span> <span class="hljs-operator">=</span> Math.sqrt(<span class="hljs-number">9.0</span>);<br>        System.out.println(sqrt);  <span class="hljs-comment">//3.0</span><br>        <span class="hljs-comment">//7.random 求随机数</span><br>        <span class="hljs-comment">//  random 返回的是 0 &lt;= x &lt; 1 之间的一个随机小数</span><br>        <span class="hljs-comment">// 思考：请写出获取 a-b之间的一个随机整数,a,b均为整数 ，比如 a = 2, b=7</span><br>        <span class="hljs-comment">//  即返回一个数 x  2 &lt;= x &lt;= 7</span><br>        <span class="hljs-comment">// 解读： Math.random() * (b-a) 返回的就是 0 &lt;= 数 &lt; b-a</span><br>        <span class="hljs-comment">// (1) (int)(a) &lt;= x &lt;= (int)(a + Math.random() * (b-a+1) )</span><br>        <span class="hljs-comment">// (2) 使用具体的数给小伙伴介绍 a = 2  b = 7</span><br>        <span class="hljs-comment">//  (int)(a + Math.random() * (b-a +1) ) = (int)( 2 + Math.random()*6)</span><br>        <span class="hljs-comment">//  Math.random()*6 返回的是 0 &lt;= x &lt; 6 小数</span><br>        <span class="hljs-comment">//  2 + Math.random()*6 返回的就是 2&lt;= x &lt; 8 小数</span><br>        <span class="hljs-comment">//  (int)(2 + Math.random()*6) == 2 &lt;= x &lt;= 7</span><br>        <span class="hljs-comment">// (3) 公式就是  (int)(a + Math.random() * (b-a + 1) )</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println((<span class="hljs-type">int</span>)(<span class="hljs-number">2</span> +  Math.random() * (<span class="hljs-number">7</span> - <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)));<br>        &#125;<br>        <span class="hljs-comment">//8.max , min 返回最大值和最小值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">45</span>, <span class="hljs-number">90</span>);<br>        System.out.println(<span class="hljs-string">&quot;min=&quot;</span> + min);<br>        System.out.println(<span class="hljs-string">&quot;max=&quot;</span> + max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><p>Arrays 谜面包含了一系列静态方法，用于管理或操作数组（比如排序和搜索）</p><ul><li><p>toString 返回数组的字符串形式</p><p>Arrays.toString(arr)</p></li><li><p>sort 排序（自然排序和定制排序） Integer arr[] &#x3D; {1, -1, 7, 0, 89};</p></li><li><p>binarySearch 通过二分搜索法进行查找，要求必须排好序</p><p>int index &#x3D; Arrays.binarySearch(arr, 3);</p></li><li><p>copyOf 数组元素的复制</p><p>Integer[] newArr &#x3D; Arrays.copyOf(arr,arr,length);</p></li><li><p>fill 数组元素的填充</p><p>Integer[] num &#x3D; new Integer[]{9, 3, 2};</p><p>Arrays.fill(num, 99);</p></li><li><p>equals 比较两个数组元素内容是否完全一致</p><p>boolean equals &#x3D; Arrays.equals(arr, arr2);</p></li><li><p>asList 将一组值，转换成list</p><p>List&lt;Integer&gt; asListt &#x3D; Arrays.asList(2, 3, 4, 5, 6, 1);</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysMethod01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Integer[] integers = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;;<br>        <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-comment">//for(int i = 0; i &lt; integers.length; i++) &#123;</span><br>        <span class="hljs-comment">//    System.out.println(integers[i]);</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//直接使用Arrays.toString方法，显示数组</span><br>        <span class="hljs-comment">//System.out.println(Arrays.toString(integers));//</span><br><br>        <span class="hljs-comment">//演示 sort方法的使用</span><br>        Integer arr[] = &#123;<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">89</span>&#125;;<br>        <span class="hljs-comment">//进行排序</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 可以直接使用冒泡排序 , 也可以直接使用Arrays提供的sort方法排序</span><br>        <span class="hljs-comment">//2. 因为数组是引用类型，所以通过sort排序后，会直接影响到 实参 arr</span><br>        <span class="hljs-comment">//3. sort重载的，也可以通过传入一个接口 Comparator 实现定制排序</span><br>        <span class="hljs-comment">//4. 调用 定制排序 时，传入两个参数 (1) 排序的数组 arr</span><br>        <span class="hljs-comment">//   (2) 实现了Comparator接口的匿名内部类 , 要求实现  compare方法</span><br>        <span class="hljs-comment">//5. 先演示效果，再解释</span><br>        <span class="hljs-comment">//6. 这里体现了接口编程的方式 , 看看源码，就明白</span><br>        <span class="hljs-comment">//   源码分析</span><br>        <span class="hljs-comment">//(1) Arrays.sort(arr, new Comparator()</span><br>        <span class="hljs-comment">//(2) 最终到 TimSort类的 private static &lt;T&gt; void binarySort(T[] a, int lo, int hi, int start,</span><br>        <span class="hljs-comment">//                                       Comparator&lt;? super T&gt; c)()</span><br>        <span class="hljs-comment">//(3) 执行到 binarySort方法的代码, 会根据动态绑定机制 c.compare()执行我们传入的</span><br>        <span class="hljs-comment">//    匿名内部类的 compare ()</span><br>        <span class="hljs-comment">//     while (left &lt; right) &#123;</span><br>        <span class="hljs-comment">//                int mid = (left + right) &gt;&gt;&gt; 1;</span><br>        <span class="hljs-comment">//                if (c.compare(pivot, a[mid]) &lt; 0)</span><br>        <span class="hljs-comment">//                    right = mid;</span><br>        <span class="hljs-comment">//                else</span><br>        <span class="hljs-comment">//                    left = mid + 1;</span><br>        <span class="hljs-comment">//            &#125;</span><br>        <span class="hljs-comment">//(4) new Comparator() &#123;</span><br>        <span class="hljs-comment">//            @Override</span><br>        <span class="hljs-comment">//            public int compare(Object o1, Object o2) &#123;</span><br>        <span class="hljs-comment">//                Integer i1 = (Integer) o1;</span><br>        <span class="hljs-comment">//                Integer i2 = (Integer) o2;</span><br>        <span class="hljs-comment">//                return i2 - i1;</span><br>        <span class="hljs-comment">//            &#125;</span><br>        <span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//(5) public int compare(Object o1, Object o2) 返回的值&gt;0 还是 &lt;0</span><br>        <span class="hljs-comment">//    会影响整个排序结果, 这就充分体现了 接口编程+动态绑定+匿名内部类的综合使用</span><br>        <span class="hljs-comment">//    将来的底层框架和源码的使用方式，会非常常见</span><br>        <span class="hljs-comment">//Arrays.sort(arr); // 默认排序方法</span><br>        <span class="hljs-comment">//定制排序</span><br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (Integer) o1;<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> (Integer) o2;<br>                <span class="hljs-keyword">return</span> i2 - i1;<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;===排序后===&quot;</span>);<br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Integer[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>, <span class="hljs-number">567</span>&#125;;<br>        <span class="hljs-comment">// binarySearch 通过二分搜索法进行查找，要求必须排好</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 使用 binarySearch 二叉查找</span><br>        <span class="hljs-comment">//2. 要求该数组是有序的. 如果该数组是无序的，不能使用binarySearch</span><br>        <span class="hljs-comment">//3. 如果数组中不存在该元素，就返回 return -(low + 1);  //low代表应该在的位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr, <span class="hljs-number">567</span>);<br>        System.out.println(<span class="hljs-string">&quot;index=&quot;</span> + index);<br><br>        <span class="hljs-comment">//copyOf 数组元素的复制</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 从 arr 数组中，拷贝 arr.length个元素到 newArr数组中</span><br>        <span class="hljs-comment">//2. 如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加 null</span><br>        <span class="hljs-comment">//3. 如果拷贝长度 &lt; 0 就抛出异常NegativeArraySizeException</span><br>        <span class="hljs-comment">//4. 该方法的底层使用的是 System.arraycopy()</span><br>        Integer[] newArr = Arrays.copyOf(arr, arr.length);<br>        System.out.println(<span class="hljs-string">&quot;==拷贝执行完毕后==&quot;</span>);<br>        System.out.println(Arrays.toString(newArr));<br><br>        <span class="hljs-comment">//fill 数组元素的填充</span><br>        Integer[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 使用 99 去填充 num数组，可以理解成是替换原来的元素</span><br>        Arrays.fill(num, <span class="hljs-number">99</span>);<br>        System.out.println(<span class="hljs-string">&quot;==num数组填充后==&quot;</span>);<br>        System.out.println(Arrays.toString(num));<br><br>        <span class="hljs-comment">//equals 比较两个数组元素内容是否完全一致</span><br>        Integer[] arr2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>&#125;;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 如果arr 和 arr2 数组的元素一样，则方法true;</span><br>        <span class="hljs-comment">//2. 如果不是完全一样，就返回 false</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">equals</span> <span class="hljs-operator">=</span> Arrays.equals(arr, arr2);<br>        System.out.println(<span class="hljs-string">&quot;equals=&quot;</span> + equals);<br><br>        <span class="hljs-comment">//asList 将一组值，转换成list</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. asList方法，会将(2,3,4,5,6,1)数据转成一个List集合</span><br>        <span class="hljs-comment">//2. 返回的 asList 的编译类型是 List(接口)</span><br>        <span class="hljs-comment">//3. asList 的运行类型是 java.util.Arrays#ArrayList, 是Arrays类的</span><br>        <span class="hljs-comment">//   静态内部类 private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br>        <span class="hljs-comment">//              implements RandomAccess, java.io.Serializable</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">asList</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;asList=&quot;</span> + asList);<br>        System.out.println(<span class="hljs-string">&quot;asList的运行类型&quot;</span> + asList.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sort排序类</span><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        案例：自定义Book类，里面包含name和price，按price排序(从大到小)。</span><br><span class="hljs-comment">        要求使用两种方式排序 , 有一个 Book[] books = 4本书对象.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        使用前面学习过的传递 实现Comparator接口匿名内部类，也称为定制排序。</span><br><span class="hljs-comment">        [同学们完成这个即可 10min  ],</span><br><span class="hljs-comment">        可以按照 price (1)从大到小 (2)从小到大 (3) 按照书名长度从大到小</span><br><span class="hljs-comment">         */</span><br>        Book[] books = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>[<span class="hljs-number">4</span>];<br>        books[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-number">100</span>);<br>        books[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;金瓶梅新&quot;</span>, <span class="hljs-number">90</span>);<br>        books[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;青年文摘20年&quot;</span>, <span class="hljs-number">5</span>);<br>        books[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;java从入门到放弃~&quot;</span>, <span class="hljs-number">300</span>);<br><br>        <span class="hljs-comment">//(1)price从大到小</span><br><span class="hljs-comment">//        Arrays.sort(books, new Comparator() &#123;</span><br><span class="hljs-comment">//            //这里是对Book数组排序，因此  o1 和 o2 就是Book对象</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public int compare(Object o1, Object o2) &#123;</span><br><span class="hljs-comment">//                Book book1 = (Book) o1;</span><br><span class="hljs-comment">//                Book book2 = (Book) o2;</span><br><span class="hljs-comment">//                double priceVal = book2.getPrice() - book1.getPrice();</span><br><span class="hljs-comment">//                //这里老师进行了一个转换</span><br><span class="hljs-comment">//                //如果发现返回结果和我们输出的不一致，就修改一下返回的 1 和 -1</span><br><span class="hljs-comment">//                if(priceVal &gt; 0) &#123;</span><br><span class="hljs-comment">//                    return  1;</span><br><span class="hljs-comment">//                &#125; else  if(priceVal &lt; 0) &#123;</span><br><span class="hljs-comment">//                    return -1;</span><br><span class="hljs-comment">//                &#125; else &#123;</span><br><span class="hljs-comment">//                    return 0;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        <span class="hljs-comment">//(2)price从小到大</span><br><span class="hljs-comment">//        Arrays.sort(books, new Comparator() &#123;</span><br><span class="hljs-comment">//            //这里是对Book数组排序，因此  o1 和 o2 就是Book对象</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public int compare(Object o1, Object o2) &#123;</span><br><span class="hljs-comment">//                Book book1 = (Book) o1;</span><br><span class="hljs-comment">//                Book book2 = (Book) o2;</span><br><span class="hljs-comment">//                double priceVal = book2.getPrice() - book1.getPrice();</span><br><span class="hljs-comment">//                //这里老师进行了一个转换</span><br><span class="hljs-comment">//                //如果发现返回结果和我们输出的不一致，就修改一下返回的 1 和 -1</span><br><span class="hljs-comment">//                if(priceVal &gt; 0) &#123;</span><br><span class="hljs-comment">//                    return  -1;</span><br><span class="hljs-comment">//                &#125; else  if(priceVal &lt; 0) &#123;</span><br><span class="hljs-comment">//                    return 1;</span><br><span class="hljs-comment">//                &#125; else &#123;</span><br><span class="hljs-comment">//                    return 0;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        <span class="hljs-comment">//(3)按照书名长度从大到小</span><br>        Arrays.sort(books, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-comment">//这里是对Book数组排序，因此  o1 和 o2 就是Book对象</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) o1;<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) o2;<br>                <span class="hljs-comment">//要求按照书名的长度来进行排序</span><br>                <span class="hljs-keyword">return</span> book2.getName().length() - book1.getName().length();<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(books));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> price;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<span class="hljs-built_in">this</span>.price = price;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h3><ul><li><p>exit 退出当前程序</p></li><li><p>arraycopy  复制数组元素，比较适合底层调用，但我们一般使用 Arrays.copy() 完成复制数组</p><p>int[] src &#x3D; {1, 2, 3}</p><p>int[] dest &#x3D; new int[3];</p><p>System.arraycopy(src, 0, dest, 0, 3);</p></li><li><p>currentTimeMillens  返回当前时间距离 1970-1-1 的毫秒数</p></li><li><p>gc()  运行垃圾回收机制 System.gc();</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">System_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//exit 退出当前程序</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. exit(0) 表示程序退出</span><br>        <span class="hljs-comment">//2. 0 表示一个状态 , 正常的状态</span><br>        <span class="hljs-comment">//System.out.println(&quot;ok1&quot;);</span><br>        <span class="hljs-comment">//System.exit(0);</span><br>        <span class="hljs-comment">//System.out.println(&quot;ok2&quot;);</span><br><br>        <span class="hljs-comment">//arraycopy ：复制数组元素，比较适合底层调用，</span><br>        <span class="hljs-comment">// 一般使用Arrays.copyOf完成复制数组</span><br>        <span class="hljs-type">int</span>[] src=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// dest 当前是 &#123;0,0,0&#125;</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 主要是搞清楚这五个参数的含义</span><br>        <span class="hljs-comment">//     src：源数组</span><br>        <span class="hljs-comment">//     * @param      src      the source array.</span><br>        <span class="hljs-comment">//     srcPos： 从源数组的哪个索引位置开始拷贝</span><br>        <span class="hljs-comment">//     * @param      srcPos   starting position in the source array.</span><br>        <span class="hljs-comment">//     dest : 目标数组，即把源数组的数据拷贝到哪个数组</span><br>        <span class="hljs-comment">//     * @param      dest     the destination array.</span><br>        <span class="hljs-comment">//     destPos: 把源数组的数据拷贝到 目标数组的哪个索引</span><br>        <span class="hljs-comment">//     * @param      destPos  starting position in the destination data.</span><br>        <span class="hljs-comment">//     length: 从源数组拷贝多少个数据到目标数组（注意不能越界）</span><br>        <span class="hljs-comment">//     * @param      length   the number of array elements to be copied.</span><br>        System.arraycopy(src, <span class="hljs-number">0</span>, dest, <span class="hljs-number">0</span>, src.length);<br>        <span class="hljs-comment">// int[] src=&#123;1,2,3&#125;;</span><br>        System.out.println(<span class="hljs-string">&quot;dest=&quot;</span> + Arrays.toString(dest));<span class="hljs-comment">//[1, 2, 3]</span><br><br>        <span class="hljs-comment">//currentTimeMillens:返回当前时间距离1970-1-1 的毫秒数</span><br>        <span class="hljs-comment">// 解读:</span><br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BigInteger-和-BigDecimal-类"><a href="#BigInteger-和-BigDecimal-类" class="headerlink" title="BigInteger 和 BigDecimal 类"></a>BigInteger 和 BigDecimal 类</h3><ul><li>BigInteger 适合保存比较大的整形</li><li>BigDecimal 适合保存精度更高的浮点型</li></ul><p><strong>BigInteger 和 BigDecimal 常见方法</strong></p><ul><li>add  加</li><li>subtract  减</li><li>multiply  乘</li><li>divide  除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigInteger_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//当我们编程中，需要处理很大的整数，long 不够用</span><br>        <span class="hljs-comment">//可以使用BigInteger的类来搞定</span><br><span class="hljs-comment">//        long l = 23788888899999999999999999999l;</span><br><span class="hljs-comment">//        System.out.println(&quot;l=&quot; + l);</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;23788888899999999999999999999&quot;</span>);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;10099999999999999999999999999999999999999999999999999999999999999999999999999999999&quot;</span>);<br>        System.out.println(bigInteger);<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 在对 BigInteger 进行加减乘除的时候，需要使用对应的方法，不能直接进行 + - * /</span><br>        <span class="hljs-comment">//2. 可以创建一个 要操作的 BigInteger 然后进行相应操作</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2);<br>        System.out.println(add);<span class="hljs-comment">//加</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> bigInteger.subtract(bigInteger2);<br>        System.out.println(subtract);<span class="hljs-comment">//减</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> bigInteger.multiply(bigInteger2);<br>        System.out.println(multiply);<span class="hljs-comment">//乘</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> bigInteger.divide(bigInteger2);<br>        System.out.println(divide);<span class="hljs-comment">//除</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigDecimal_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//当我们需要保存一个精度很高的数时，double 不够用</span><br>        <span class="hljs-comment">//可以是 BigDecimal</span><br><span class="hljs-comment">//        double d = 1999.11111111111999999999999977788d;</span><br><span class="hljs-comment">//        System.out.println(d);</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1999.11&quot;</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        System.out.println(bigDecimal);<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 如果对 BigDecimal进行运算，比如加减乘除，需要使用对应的方法</span><br>        <span class="hljs-comment">//2. 创建一个需要操作的 BigDecimal 然后调用相应的方法即可</span><br>        System.out.println(bigDecimal.add(bigDecimal2));<br>        System.out.println(bigDecimal.subtract(bigDecimal2));<br>        System.out.println(bigDecimal.multiply(bigDecimal2));<br>        <span class="hljs-comment">//System.out.println(bigDecimal.divide(bigDecimal2));//可能抛出异常ArithmeticException</span><br>        <span class="hljs-comment">//在调用divide 方法时，指定精度即可. BigDecimal.ROUND_CEILING</span><br>        <span class="hljs-comment">//如果有无限循环小数，就会保留 分子 的精度</span><br>        System.out.println(bigDecimal.divide(bigDecimal2, BigDecimal.ROUND_CEILING));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><h4 id="第一代日期类"><a href="#第一代日期类" class="headerlink" title="第一代日期类"></a>第一代日期类</h4><p><strong>Date</strong>：精确到毫秒，代表特定的瞬间</p><p><strong>SimpleDateFormat</strong>：格式化（日期-&gt;文本）和解析（文本-&gt;日期）日期的类</p><ul><li><p>提供两常用的方法（功能）</p><ul><li>1）.format()   &#x2F;&#x2F;可以把时间戳Date格式化成指定的范式（格式）字符串</li><li>2）.parse()   &#x2F;&#x2F;可以把符合范式的字符串解析成一个Date对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 获取当前系统时间</span><br>        <span class="hljs-comment">//2. 这里的Date 类是在java.util包</span><br>        <span class="hljs-comment">//3. 默认输出的日期格式是国外的方式, 因此通常需要对格式进行转换</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//获取当前系统时间</span><br>        System.out.println(<span class="hljs-string">&quot;当前日期=&quot;</span> + d1);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">9234567</span>); <span class="hljs-comment">//通过指定毫秒数得到时间</span><br>        System.out.println(<span class="hljs-string">&quot;d2=&quot;</span> + d2); <span class="hljs-comment">//获取某个时间对应的毫秒数</span><br><br>        <span class="hljs-comment">//SimpleDateFormat</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 创建 SimpleDateFormat对象，可以指定相应的格式</span><br>        <span class="hljs-comment">//2. 这里的格式使用的字母是规定好，不能乱写</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(d1); <span class="hljs-comment">// format:将日期转换成指定格式的字符串</span><br>        System.out.println(<span class="hljs-string">&quot;当前日期=&quot;</span> + format);<br><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 可以把一个格式化的String 转成对应的 Date</span><br>        <span class="hljs-comment">//2. 得到Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换</span><br>        <span class="hljs-comment">//3. 在把 String -&gt; Date ， 使用的 sdf 格式需要和你给的String的格式一样，否则会抛出转换异常</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(s);<br>        System.out.println(<span class="hljs-string">&quot;parse=&quot;</span> + sdf.format(parse));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二代日期类"><a href="#第二代日期类" class="headerlink" title="第二代日期类"></a>第二代日期类</h4><p>第二代日期类，主要就是 Calendar 类（日历）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>,Cloneable,Comparable&lt;Calendar&gt;<br></code></pre></td></tr></table></figure><p>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF|MONTH\HOUR 等 日历字段 之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. Calendar是一个抽象类， 并且构造器是private</span><br>        <span class="hljs-comment">//2. 可以通过 getInstance() 来获取实例</span><br>        <span class="hljs-comment">//3. 提供大量的方法和字段提供给程序员</span><br>        <span class="hljs-comment">//4. Calendar没有提供对应的格式化的类，因此需要程序员自己组合来输出(灵活)</span><br>        <span class="hljs-comment">//5. 如果我们需要按照 24小时进制来获取时间， Calendar.HOUR ==改成=&gt; Calendar.HOUR_OF_DAY</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance(); <span class="hljs-comment">//创建日历类对象//比较简单，自由</span><br>        System.out.println(<span class="hljs-string">&quot;c=&quot;</span> + c);<br>        <span class="hljs-comment">//2.获取日历对象的某个日历字段</span><br>        System.out.println(<span class="hljs-string">&quot;年：&quot;</span> + c.get(Calendar.YEAR));<br>        <span class="hljs-comment">// 这里为什么要 + 1, 因为Calendar 返回月时候，是按照 0 开始编号</span><br>        System.out.println(<span class="hljs-string">&quot;月：&quot;</span> + (c.get(Calendar.MONTH) + <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;日：&quot;</span> + c.get(Calendar.DAY_OF_MONTH));<br>        System.out.println(<span class="hljs-string">&quot;小时：&quot;</span> + c.get(Calendar.HOUR));<br>        System.out.println(<span class="hljs-string">&quot;分钟：&quot;</span> + c.get(Calendar.MINUTE));<br>        System.out.println(<span class="hljs-string">&quot;秒：&quot;</span> + c.get(Calendar.SECOND));<br>        <span class="hljs-comment">//Calender 没有专门的格式化方法，所以需要程序员自己来组合显示</span><br>        System.out.println(c.get(Calendar.YEAR) + <span class="hljs-string">&quot;-&quot;</span> + (c.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;-&quot;</span> + c.get(Calendar.DAY_OF_MONTH) +<br>                <span class="hljs-string">&quot; &quot;</span> + c.get(Calendar.HOUR_OF_DAY) + <span class="hljs-string">&quot;:&quot;</span> + c.get(Calendar.MINUTE) + <span class="hljs-string">&quot;:&quot;</span> + c.get(Calendar.SECOND) );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前两代日期类的不足"><a href="#前两代日期类的不足" class="headerlink" title="前两代日期类的不足"></a>前两代日期类的不足</h4><p>JDK 1.0中包含了一个 java.util.Date 类，但是它的大多数方法已经在 JDK 1.1 引入 Calendar 类之后就被弃用了。</p><p>而 Calendar 也存在问题：</p><ul><li>可变性：像日期和时间这样的类应该是不可变的</li><li>偏移性：Date 中的年份是从 1900 开始的，而月份都从 0 开始</li><li>格式化：格式化只对 Date 有用，Calendar 则不行</li><li>此外，它们也不是线程安全的，不能处理闰秒等（每隔两天，多出 1 s）</li></ul><h4 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h4><p>LocalDate（日期&#x2F;年月日）、LocalTime（时间&#x2F;时分秒）、LocalDateTime（日期时间&#x2F;年月日时分秒）JDK8 加入</p><ul><li>LocalDate 只包含日期，可以获取日期字段</li><li>LocalTime 只包含时间，可以获取时间字段</li><li>LocalDateTime 包含日期+时间，可以获取日期和时间字段</li></ul><p><strong>第三代日期类更多方法</strong></p><ul><li>MonthDay类：检查重复事件</li><li>是否是闰年</li><li>增加日期的某个部分</li><li>使用plus方法测试增加时间的某个部分</li><li>使用minus方法测试查看一年前和一年后的日期</li><li>其他的方法，使用的时候，再查看API使用即可</li></ul><p><strong>DateTimeFormatter 格式日期类</strong></p><p>类似于 SimpleDateFormat</p><p>DateTimeFormat dtf &#x3D; DateTimeFormatter.ofPattern(格式);</p><p>String str &#x3D; dtf.format(日期对象);</p><p>DateTimeFormatter dateTimeFormatter &#x3D; DateTimeFormatter.ofPattern(“yyyy-MM-dd HH:mm:ss”);</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDate_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//第三代日期</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 使用now() 返回表示当前日期时间的 对象</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now(); <span class="hljs-comment">//LocalDate.now();//LocalTime.now()</span><br>        System.out.println(ldt);<br><br>        <span class="hljs-comment">//2. 使用DateTimeFormatter 对象来进行格式化</span><br>        <span class="hljs-comment">// 创建 DateTimeFormatter对象</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> dateTimeFormatter.format(ldt);<br>        System.out.println(<span class="hljs-string">&quot;格式化的日期=&quot;</span> + format);<br><br>        System.out.println(<span class="hljs-string">&quot;年=&quot;</span> + ldt.getYear());<br>        System.out.println(<span class="hljs-string">&quot;月=&quot;</span> + ldt.getMonth());<br>        System.out.println(<span class="hljs-string">&quot;月=&quot;</span> + ldt.getMonthValue());<br>        System.out.println(<span class="hljs-string">&quot;日=&quot;</span> + ldt.getDayOfMonth());<br>        System.out.println(<span class="hljs-string">&quot;时=&quot;</span> + ldt.getHour());<br>        System.out.println(<span class="hljs-string">&quot;分=&quot;</span> + ldt.getMinute());<br>        System.out.println(<span class="hljs-string">&quot;秒=&quot;</span> + ldt.getSecond());<br><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now(); <span class="hljs-comment">//可以获取年月日</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> LocalTime.now();<span class="hljs-comment">//获取到时分秒</span><br><br>        <span class="hljs-comment">//提供 plus 和 minus方法可以对当前时间进行加或者减</span><br>        <span class="hljs-comment">//看看890天后，是什么时候 把 年月日-时分秒</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> ldt.plusDays(<span class="hljs-number">890</span>);<br>        System.out.println(<span class="hljs-string">&quot;890天后=&quot;</span> + dateTimeFormatter.format(localDateTime));<br><br>        <span class="hljs-comment">//看看在 3456分钟前是什么时候，把 年月日-时分秒输出</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime2</span> <span class="hljs-operator">=</span> ldt.minusMinutes(<span class="hljs-number">3456</span>);<br>        System.out.println(<span class="hljs-string">&quot;3456分钟前 日期=&quot;</span> + dateTimeFormatter.format(localDateTime2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Instant-时间戳"><a href="#Instant-时间戳" class="headerlink" title="Instant 时间戳"></a>Instant 时间戳</h4><p>类似于 Date</p><p>提供了一系列和 Date 类转换的方式</p><p>Instant –&gt; Date</p><p>Date date &#x3D; Date.form(instant);</p><p>Date –&gt; Instant</p><p>Instant instant &#x3D; date.toInstant();</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Instant_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.通过 静态方法 now() 获取表示当前时间戳的对象</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>        System.out.println(now);<br>        <span class="hljs-comment">//2. 通过 from 可以把 Instant转成 Date</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(now);<br>        <span class="hljs-comment">//3. 通过 date的toInstant() 可以把 date 转成Instant对象</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> date.toInstant();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutDateAndTime</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 记录事件发生的时间：Date  时间戳</span><br><span class="hljs-comment"> * 从1970-1-1 0：0：0 开始到现在已经经的毫秒数</span><br><span class="hljs-comment"> * long 类型的长整数</span><br><span class="hljs-comment"> * yyyy-mm-dd hh:mm:ss</span><br><span class="hljs-comment"> * SimpleDateFormat 类</span><br><span class="hljs-comment"> * 提供两常用的方法（功能）</span><br><span class="hljs-comment"> * 1）.format() 可以把时间戳Date格式化成指定的范式（格式）字符串</span><br><span class="hljs-comment">   2）.parse() 可以把符合范式的字符串解析成一个Date对象 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * Calendar 日历对象</span><br><span class="hljs-comment"> * 你可以定义一个指向任意时间戳的日历对象</span><br><span class="hljs-comment"> * 它提供了非常方便的时间和日期计算方法</span><br><span class="hljs-comment"> * add()</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br>  <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  System.out.println(date.getTime());  <span class="hljs-comment">//1663403451711</span><br>  <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>          System.out.println(sdf.format(date));  <span class="hljs-comment">//2022-09-17</span><br>         <span class="hljs-comment">// Scanner sc = new Scanner(System.in);</span><br>         <span class="hljs-comment">// System.out.println(&quot;请输入yyyy-mm-dd 时间范式的字符串&quot;);</span><br>         <span class="hljs-comment">// String s =sc.nextLine();</span><br>         <span class="hljs-comment">// Date myDate = sdf.parse(s);</span><br>          <span class="hljs-type">Calendar</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span>  Calendar.getInstance(); <span class="hljs-comment">//静态工厂方法构成对象</span><br>          System.out.println(sdf.format(cl.getTime()));  <span class="hljs-comment">//2022-09-17</span><br>          cl.add(cl.DAY_OF_YEAR, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 闰年问题</span><br>          System.out.println(sdf.format(cl.getTime()));  <span class="hljs-comment">//2022-09-18</span><br>          cl.set(cl.DAY_OF_WEEK, cl.SATURDAY);<br>          System.out.println(sdf.format(cl.getTime()));  <span class="hljs-comment">//2022-09-24</span><br>          cl.add(cl.DAY_OF_YEAR, -<span class="hljs-number">7</span>);<br>          System.out.println(sdf.format(cl.getTime()));  <span class="hljs-comment">//2022-09-17</span><br>          System.out.println(cl.get(cl.MONTH));  <span class="hljs-comment">//8</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>前面我们保存多个数据使用的是数组，而数组有不足的地方：</p><ul><li>长度开始时必须指定，而且一旦指定，不能更改</li><li>保存的必须为同一类型的元素</li><li>使用数组进行增加&#x2F;删除元素时比较麻烦</li></ul><p><strong>集合：</strong></p><ul><li>可以动态保存任意多个对象（可不同类型），使用比较方便</li><li>提供了一系列方便操作对象的方法：add、remove、set、get 等</li></ul><p><strong>集合的框架体系：</strong></p><p>Java 的集合类很多，主要分为两大类，如图 ：[背下来]</p><p> <img src="image-20220912090212994.png" alt="image-20220912090212994" style="zoom:33%;" /><img src="image-20220912090402260.png" alt="image-20220912090402260" style="zoom:44%;" /></p><p>​单列集合双列集合</p><h3 id="Collection-接口和常用方法"><a href="#Collection-接口和常用方法" class="headerlink" title="Collection 接口和常用方法"></a>Collection 接口和常用方法</h3><h4 id="Collection-接口实现类的特点"><a href="#Collection-接口实现类的特点" class="headerlink" title="Collection 接口实现类的特点"></a>Collection 接口实现类的特点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Collection</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterable</span>&lt;E&gt;<br></code></pre></td></tr></table></figure><ul><li><p>Collection 实现子类可以存放多个元素，每个元素可以是 Object</p></li><li><p>有些 Collection 的实现类，可以存放重复的元素，有些不可以</p></li><li><p>有些 Collection 的实现类，有些是有序的（List），有些不是有序的（Set）</p></li><li><p>Collection 接口没有直接的实现子类，是通过它的子接口 Set 和 List 来实现的</p></li><li><p>方法：</p><ul><li>add：添加单个元素</li><li>remove：删除指定元素</li><li>contains：查找元素是否存在</li><li>size：获取元素个数</li><li>isEmpty：判断是否为空</li><li>clear：清空</li><li>addAll：添加多个元素</li><li>containsALL：查找多个元素是否都存在</li><li>removeAll：删除多个元素</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以List来演示</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionMethod</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-comment">//        add:添加单个元素</span><br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-number">10</span>);<span class="hljs-comment">//会自动装箱为list.add(new Integer(10))</span><br>        list.add(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        remove:删除指定元素</span><br>        list.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>        list.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//指定删除某个元素</span><br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        contains:查找元素是否存在</span><br>        System.out.println(list.contains(<span class="hljs-string">&quot;jack&quot;</span>));<span class="hljs-comment">//T</span><br><span class="hljs-comment">//        size:获取元素个数</span><br>        System.out.println(list.size());<span class="hljs-comment">//2</span><br><span class="hljs-comment">//        isEmpty:判断是否为空</span><br>        System.out.println(list.isEmpty());<span class="hljs-comment">//F</span><br><span class="hljs-comment">//        clear:清空</span><br>        list.clear();<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        addAll:添加多个元素</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;红楼梦&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;三国演义&quot;</span>);<br>        list.addAll(list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        containsAll:查找多个元素是否都存在</span><br>        System.out.println(list.containsAll(list2));<span class="hljs-comment">//T</span><br><span class="hljs-comment">//        removeAll：删除多个元素</span><br>        list.add(<span class="hljs-string">&quot;聊斋&quot;</span>);<br>        list.removeAll(list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<span class="hljs-comment">//[聊斋]</span><br><span class="hljs-comment">//        说明：以ArrayList实现类来演示.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Collection-接口遍历元素方式"><a href="#Collection-接口遍历元素方式" class="headerlink" title="Collection 接口遍历元素方式"></a>Collection 接口遍历元素方式</h4><p><strong>方式1：使用 Iterator（迭代器）</strong></p><ul><li><p>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素</p></li><li><p>所有实现了 Collection 接口的集合类都有一个 iterator() 方法，用以返回一个实现了 Iterator 接口的对象，即可以返回一个迭代器</p></li><li><p>Iterator 的结构</p> <img src="image-20220912090212994.png" alt="image-20220912090212994" style="zoom:33%;" /></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>迭代器的执行原理：</p> <img src="image-20220912104049727.png" alt="image-20220912104049727" style="zoom:50%;" /></li><li><p>Iterator 接口的方法：</p> <img src="image-20220912104348570.png" alt="image-20220912104348570" style="zoom:50%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionIterator</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">10.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;小李飞刀&quot;</span>, <span class="hljs-string">&quot;古龙&quot;</span>, <span class="hljs-number">5.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">34.6</span>));<br>        <span class="hljs-comment">//System.out.println(&quot;col=&quot; + col);</span><br>        <span class="hljs-comment">//现在老师希望能够遍历 col集合</span><br>        <span class="hljs-comment">//1. 先得到 col 对应的 迭代器</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> col.iterator();<br>        <span class="hljs-comment">//2. 使用while循环遍历</span><br><span class="hljs-comment">//        while (iterator.hasNext()) &#123;//判断是否还有数据</span><br><span class="hljs-comment">//            //返回下一个元素，类型是Object</span><br><span class="hljs-comment">//            Object obj = iterator.next();</span><br><span class="hljs-comment">//            System.out.println(&quot;obj=&quot; + obj);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//快捷键快速生成 while =&gt; itit</span><br>        <span class="hljs-comment">//显示所有的快捷键的的快捷键 ctrl + j</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;obj=&quot;</span> + obj);<br>        &#125;<br>        <br>        <span class="hljs-comment">//3. 当退出while循环后 , 这时iterator迭代器，指向最后的元素</span><br>        <span class="hljs-comment">//   iterator.next();//NoSuchElementException</span><br>        <span class="hljs-comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span><br>        iterator = col.iterator();<br>        System.out.println(<span class="hljs-string">&quot;===第二次遍历===&quot;</span>);<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;obj=&quot;</span> + obj);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> author;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(String author)</span> &#123;<span class="hljs-built_in">this</span>.author = author;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> price;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<span class="hljs-built_in">this</span>.price = price;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式2：增强 for</strong></p><p>增强 for 循环，可以代替 iterator 迭代器，特点：增强 for 就是简化版的 iterator。</p><p>本质一样。只能用于遍历集合或数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(元素类型 元素名 : 集合名或数组名) &#123;<br><span class="hljs-comment">//访问元素</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionFor</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">10.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;小李飞刀&quot;</span>, <span class="hljs-string">&quot;古龙&quot;</span>, <span class="hljs-number">5.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">34.6</span>));<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 使用增强for, 在Collection集合</span><br>        <span class="hljs-comment">//2. 增强for， 底层仍然是迭代器</span><br>        <span class="hljs-comment">//3. 增强for可以理解成就是简化版本的 迭代器遍历</span><br>        <span class="hljs-comment">//4. 快捷键方式 I</span><br>        <span class="hljs-keyword">for</span> (Object obj : col) &#123;<br>            System.out.println(<span class="hljs-string">&quot;book=&quot;</span> + obj);<br>        &#125;<br>        <span class="hljs-comment">//增强for，也可以直接在数组使用</span><br><span class="hljs-comment">//        int[] nums = &#123;1, 8, 10, 90&#125;;</span><br><span class="hljs-comment">//        for (int i : nums) &#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;i=&quot; + i);</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List-接口和常用方法"><a href="#List-接口和常用方法" class="headerlink" title="List 接口和常用方法"></a>List 接口和常用方法</h3><ul><li>List 集合类中元素有序（即添加顺序和取出顺序一致）、且可重复</li><li>List 集合中的每个元素都有其对应的顺序索引，即支持索引</li><li>List 容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</li><li>JDK API 中 List 接口的实现类 有：ArrayList、LinkedList、Vector 等（这三个最为常用）</li><li>常用方法：<ul><li>void add(int index, Object ele)：在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles)：从index位置开始将eles中的所有元素添加进来</li><li>Object get(int index)：获取指定index位置的元素</li><li>int indexOf(Object obj)：返回obj在集合中首次出现的位置</li><li>int lastIndexOf(Object obj)：返回obj在当前集合中末次出现的位置</li><li>Object remove(int index)：移除指定index位置的元素，并返回此元素</li><li>Object set(int index, Object ele)：设置指定index位置的元素为ele , 相当于是替换.</li><li>List subList(int fromIndex, int toIndex)：返回从 fromIndex（包含）到 toIndex（不含）位置的子集合</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List_</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. List集合类中元素有序(即添加顺序和取出顺序一致)、且可重复 [案例]</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;hsp&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br>        <span class="hljs-comment">//2. List集合中的每个元素都有其对应的顺序索引，即支持索引</span><br>        <span class="hljs-comment">//   索引是从0开始的</span><br>        System.out.println(list.get(<span class="hljs-number">3</span>));<span class="hljs-comment">//hsp</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListMethod</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;贾宝玉&quot;</span>);<br><span class="hljs-comment">//        void add(int index, Object ele):在index位置插入ele元素</span><br><span class="hljs-comment">//        若不填索引，则默认插入在末尾</span><br>        <span class="hljs-comment">//在index = 1的位置插入一个对象</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.addAll(<span class="hljs-number">1</span>, list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        Object get(int index):获取指定index位置的元素</span><br>        <span class="hljs-comment">//讲过了，跳过</span><br><span class="hljs-comment">//        int indexOf(Object obj):返回obj在集合中首次出现的位置</span><br>        System.out.println(list.indexOf(<span class="hljs-string">&quot;tom&quot;</span>));<span class="hljs-comment">//2</span><br><span class="hljs-comment">//        int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span><br>        list.add(<span class="hljs-string">&quot;韩顺平&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br>        System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;韩顺平&quot;</span>));<br><span class="hljs-comment">//        Object remove(int index):移除指定index位置的元素，并返回此元素</span><br>        list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        Object set(int index, Object ele):设置指定index位置的元素为ele , 相当于是替换.</span><br>        list.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;玛丽&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span><br>        <span class="hljs-comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">returnlist</span> <span class="hljs-operator">=</span> list.subList(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;returnlist=&quot;</span> + returnlist);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="List-的三种遍历方式"><a href="#List-的三种遍历方式" class="headerlink" title="List 的三种遍历方式"></a>List 的三种遍历方式</h4><ul><li><p>方式一：使用 iterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">iter</span> <span class="hljs-operator">=</span> col.inertaor();<br><span class="hljs-keyword">while</span>(iter.hasNext)&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> iter.next();<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：使用增强 for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(Object o:col)&#123;<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式三：使用普通 for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(i);<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListExercise02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//List list = new ArrayList();</span><br>        <span class="hljs-comment">//List list = new Vector();</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">100</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-string">&quot;吴承恩&quot;</span>, <span class="hljs-number">10</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;水浒传&quot;</span>, <span class="hljs-string">&quot;施耐庵&quot;</span>, <span class="hljs-number">19</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">80</span>));<br>        <span class="hljs-comment">//list.add(new Book(&quot;西游记&quot;, &quot;吴承恩&quot;, 10));</span><br><br>        <span class="hljs-comment">//如何对集合进行排序</span><br>        System.out.println(<span class="hljs-string">&quot;==排序前==&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;System.out.println(o);&#125;<br>        <span class="hljs-comment">//冒泡排序</span><br>        sort(list);<br>        System.out.println(<span class="hljs-string">&quot;==排序后==&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;System.out.println(o);&#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-comment">//价格要求是从小到大</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">listSize</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; listSize - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; listSize - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-comment">//取出对象Book 并向下转型</span><br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) list.get(j);<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) list.get(j + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (book1.getPrice() &gt; book2.getPrice()) &#123;<span class="hljs-comment">//交换</span><br>                    list.set(j, book2);  <span class="hljs-comment">//book1 仍然有引用，不会被回收</span><br>                    list.set(j + <span class="hljs-number">1</span>, book1); <span class="hljs-comment">//因此可以直接使用</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ArrayList-底层结构和源码分析"><a href="#ArrayList-底层结构和源码分析" class="headerlink" title="ArrayList 底层结构和源码分析"></a>ArrayList 底层结构和源码分析</h3><h4 id="ArrayList-注意事项"><a href="#ArrayList-注意事项" class="headerlink" title="ArrayList 注意事项"></a>ArrayList 注意事项</h4><ul><li><p>“ permits all elements, including null ”, ArrayList 可以加入 null, 并且可以加入多个</p></li><li><p>ArrayList 底层是由数组来实现数据存储的</p></li><li><p>ArrayList 基本等同于 Vector, 除了 ArrayList 是线程不安全（但执行效率高）（看源码）</p><p>在多线程情况下，不建议使用 ArrayList  （没有实现 synchronized 接口）</p></li></ul><h4 id="ArrayList-的底层分析"><a href="#ArrayList-的底层分析" class="headerlink" title="ArrayList 的底层分析"></a>ArrayList 的底层分析</h4><ul><li><p>ArrayList 中维护了一个 Object 类型的数组 elementData</p><p>transient Object[] elementData;  &#x2F;&#x2F;transient 表示瞬间、短暂的，表示该属性不会被序列化</p></li><li><p>当创建 ArrayList 对象时，如果使用的时无参构造器，则初始 elementData 容量为0，</p><p>第1次添加，则扩容 elementData 为 10，如需再次扩容，则扩容 elementData 为1.5倍</p></li><li><p>如果使用的是指定大小的构造器，则初始 elementData 容量为指定大小，</p><p>如需扩容，则直接扩容 elementData 为1.5倍</p></li><li><p>源码分析：</p></li></ul><img src="image-20220912170319607.png" alt="image-20220912170319607" style="zoom: 80%;" /><img src="image-20220912170402225.png" alt="image-20220912170402225" style="zoom:87%;" /><h3 id="Vectoer-底层结构和源码分析"><a href="#Vectoer-底层结构和源码分析" class="headerlink" title="Vectoer 底层结构和源码分析"></a>Vectoer 底层结构和源码分析</h3><ul><li><p>vector 底层也是一个对象数组    protected Object[] elementData;</p></li><li><p>Vector 是线程同步的，即线程安全，Vector 类的操作方法带有 synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> sysnchronized E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">if</span>(index &gt;= elementCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(index);<br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在开发中，需要线程同步安全时，考虑使用 Vector</p></li><li><p>扩容规则：</p><ul><li>如果是无参构造，则会默认指定为10，如需再次扩容。则按 2 倍扩容</li><li>如果是指定大小，则每次直接按 2 倍扩容</li></ul></li><li><p>Vector 和 ArrayList 的比较</p> <img src="image-20220913142121290.png" alt="image-20220913142121290" style="zoom:50%;" /></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//无参构造器</span><br>        <span class="hljs-comment">//有参数的构造</span><br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br><span class="hljs-comment">//        Vector vector = new Vector(8);</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            vector.add(i);<br>        &#125;<br>        vector.add(<span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;vector=&quot;</span> + vector);<br>        <span class="hljs-comment">//解读源码</span><br>        <span class="hljs-comment">//1. new Vector() 底层</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            public Vector() &#123;</span><br><span class="hljs-comment">                this(10);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         补充：如果是  Vector vector = new Vector(8);</span><br><span class="hljs-comment">            走的方法:</span><br><span class="hljs-comment">            public Vector(int initialCapacity) &#123;</span><br><span class="hljs-comment">                this(initialCapacity, 0);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         2. vector.add(i)</span><br><span class="hljs-comment">         2.1  //下面这个方法就添加数据到vector集合</span><br><span class="hljs-comment">            public synchronized boolean add(E e) &#123;</span><br><span class="hljs-comment">                modCount++;</span><br><span class="hljs-comment">                ensureCapacityHelper(elementCount + 1);</span><br><span class="hljs-comment">                elementData[elementCount++] = e;</span><br><span class="hljs-comment">                return true;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          2.2  //确定是否需要扩容 条件 ： minCapacity - elementData.length &gt; 0</span><br><span class="hljs-comment">            private void ensureCapacityHelper(int minCapacity) &#123;</span><br><span class="hljs-comment">                // overflow-conscious code</span><br><span class="hljs-comment">                if (minCapacity - elementData.length &gt; 0)</span><br><span class="hljs-comment">                    grow(minCapacity);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span><br><span class="hljs-comment">              //newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span><br><span class="hljs-comment">              //                             capacityIncrement : oldCapacity);</span><br><span class="hljs-comment">              //就是扩容两倍.</span><br><span class="hljs-comment">            private void grow(int minCapacity) &#123;</span><br><span class="hljs-comment">                // overflow-conscious code</span><br><span class="hljs-comment">                int oldCapacity = elementData.length;</span><br><span class="hljs-comment">                int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span><br><span class="hljs-comment">                                                 capacityIncrement : oldCapacity);</span><br><span class="hljs-comment">                if (newCapacity - minCapacity &lt; 0)</span><br><span class="hljs-comment">                    newCapacity = minCapacity;</span><br><span class="hljs-comment">                if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="hljs-comment">                    newCapacity = hugeCapacity(minCapacity);</span><br><span class="hljs-comment">                elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedList-底层结构"><a href="#LinkedList-底层结构" class="headerlink" title="LinkedList 底层结构"></a>LinkedList 底层结构</h3><ul><li>LinkedList 底层实现了双向链表和双端队列特点</li><li>可以添加任意元素（元素可以重复，也可以是 null ）</li><li>线程不安全，没有实现同步</li></ul><h4 id="LinkedList-的底层操作机制"><a href="#LinkedList-的底层操作机制" class="headerlink" title="LinkedList 的底层操作机制"></a>LinkedList 的底层操作机制</h4><ul><li>LinkedList 底层维护了一个双向链表</li><li>LinkedList 中维护了两个属性 finst 和 last 分别指向 首节点 和 尾节点</li><li>每个节点（Node 对象），里面又维护了 prev、next、item 三个属性，其中通过 prev 指向前一个，通过 next 指向后一个节点，最终实现双向链表</li><li>所以 LinkedList 的元素的 添加和删除，不是通过数组完成的，相对来说效率较高</li><li>模拟一个简单的双向链表</li></ul><h4 id="LinkedList-使用案例"><a href="#LinkedList-使用案例" class="headerlink" title="LinkedList 使用案例"></a>LinkedList 使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListCRUD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        linkedList.add(<span class="hljs-number">1</span>);<br>        linkedList.add(<span class="hljs-number">2</span>);<br>        linkedList.add(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;linkedList=&quot;</span> + linkedList);<br><br>        <span class="hljs-comment">//演示一个删除结点的</span><br>        linkedList.remove(); <span class="hljs-comment">// 这里默认删除的是第一个结点</span><br>        <span class="hljs-comment">//linkedList.remove(2); // 删除指定位置节点（位置从0开始）</span><br>        System.out.println(<span class="hljs-string">&quot;linkedList=&quot;</span> + linkedList);<br><br>        <span class="hljs-comment">//修改某个结点对象（位置从0开始）</span><br>        linkedList.set(<span class="hljs-number">1</span>, <span class="hljs-number">999</span>);<br>        System.out.println(<span class="hljs-string">&quot;linkedList=&quot;</span> + linkedList);<br><br>        <span class="hljs-comment">//得到某个结点对象（位置从0开始）</span><br>        <span class="hljs-comment">//get(1) 是得到双向链表的第二个对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> linkedList.get(<span class="hljs-number">1</span>);<br>        System.out.println(o);<span class="hljs-comment">//999</span><br><br>        <span class="hljs-comment">//LinkedList 遍历</span><br>        <span class="hljs-comment">//因为LinkedList 是 实现了List接口, 遍历方式</span><br>        System.out.println(<span class="hljs-string">&quot;===LinkeList遍历迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> linkedList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;next=&quot;</span> + next);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===LinkeList遍历增强for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o1 : linkedList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;o1=&quot;</span> + o1);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===LinkeList遍历普通for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; linkedList.size(); i++) &#123;<br>            System.out.println(linkedList.get(i));<br>        &#125;<br><br><br>        <span class="hljs-comment">//源码阅读.</span><br>        <span class="hljs-comment">/* 1. LinkedList linkedList = new LinkedList();</span><br><span class="hljs-comment">              public LinkedList() &#123;&#125;</span><br><span class="hljs-comment">           2. 这时 linkeList 的属性 first = null  last = null</span><br><span class="hljs-comment">           3. 执行 添加</span><br><span class="hljs-comment">               public boolean add(E e) &#123;</span><br><span class="hljs-comment">                    linkLast(e);</span><br><span class="hljs-comment">                    return true;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            4.将新的结点，加入到双向链表的最后</span><br><span class="hljs-comment">             void linkLast(E e) &#123;</span><br><span class="hljs-comment">                final Node&lt;E&gt; l = last;</span><br><span class="hljs-comment">                final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="hljs-comment">                last = newNode;</span><br><span class="hljs-comment">                if (l == null)</span><br><span class="hljs-comment">                    first = newNode;</span><br><span class="hljs-comment">                else</span><br><span class="hljs-comment">                    l.next = newNode;</span><br><span class="hljs-comment">                size++;</span><br><span class="hljs-comment">                modCount++;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">          源码阅读 linkedList.remove(); // 这里默认删除的是第一个结点</span><br><span class="hljs-comment">          1. 执行 removeFirst</span><br><span class="hljs-comment">            public E remove() &#123;</span><br><span class="hljs-comment">                return removeFirst();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          2. 执行</span><br><span class="hljs-comment">            public E removeFirst() &#123;</span><br><span class="hljs-comment">                final Node&lt;E&gt; f = first;</span><br><span class="hljs-comment">                if (f == null)</span><br><span class="hljs-comment">                    throw new NoSuchElementException();</span><br><span class="hljs-comment">                return unlinkFirst(f);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          3. 执行 unlinkFirst, 将 f 指向的双向链表的第一个结点拿掉</span><br><span class="hljs-comment">            private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class="hljs-comment">                // assert f == first &amp;&amp; f != null;</span><br><span class="hljs-comment">                final E element = f.item;</span><br><span class="hljs-comment">                final Node&lt;E&gt; next = f.next;</span><br><span class="hljs-comment">                f.item = null;</span><br><span class="hljs-comment">                f.next = null; // help GC</span><br><span class="hljs-comment">                first = next;</span><br><span class="hljs-comment">                if (next == null)</span><br><span class="hljs-comment">                    last = null;</span><br><span class="hljs-comment">                else</span><br><span class="hljs-comment">                    next.prev = null;</span><br><span class="hljs-comment">                size--;</span><br><span class="hljs-comment">                modCount++;</span><br><span class="hljs-comment">                return element;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList-和-LinkedList-的比较"><a href="#ArrayList-和-LinkedList-的比较" class="headerlink" title="ArrayList 和 LinkedList 的比较"></a>ArrayList 和 LinkedList 的比较</h4> <img src="image-20220913153254219.png" alt="image-20220913153254219" style="zoom:50%;" /><h3 id="Set-接口和常用方法"><a href="#Set-接口和常用方法" class="headerlink" title="Set 接口和常用方法"></a>Set 接口和常用方法</h3><h4 id="Set-接口基本介绍"><a href="#Set-接口基本介绍" class="headerlink" title="Set 接口基本介绍"></a>Set 接口基本介绍</h4><ul><li><p>无序（添加和取出的顺序不一致），没有索引</p></li><li><p>不允许重复元素（重复添加同一元素会被忽略），所以最多包含一个 null</p></li><li><p>JDK API 中 Set 接口的实现类有：</p><p>HashSet、TreeSet、EnumSet … …</p></li></ul><h4 id="Set-接口的常用方法"><a href="#Set-接口的常用方法" class="headerlink" title="Set 接口的常用方法"></a>Set 接口的常用方法</h4><p>同 Collection 的遍历方式一样，因为 Set 接口时 Collection 接口的子接口</p><h4 id="Set-接口的遍历方式"><a href="#Set-接口的遍历方式" class="headerlink" title="Set 接口的遍历方式"></a>Set 接口的遍历方式</h4><ul><li>可以使用迭代器</li><li>增强 for</li><li>不能使用索引的方式来获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//set 简单解读案例</span><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法</span><br>        <span class="hljs-comment">//2. set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</span><br>        <span class="hljs-comment">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span><br>        <span class="hljs-comment">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定.</span><br>        <span class="hljs-comment">//补充：</span><br>        <span class="hljs-comment">//1. 在执行add方法后，会返回一个boolean值</span><br>        <span class="hljs-comment">//2. 如果添加成功，返回 true, 否则返回false</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        set.add(<span class="hljs-string">&quot;john&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;john&quot;</span>);<span class="hljs-comment">//重复</span><br>        set.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;hsp&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>        set.add(<span class="hljs-literal">null</span>);<span class="hljs-comment">//</span><br>        set.add(<span class="hljs-literal">null</span>);<span class="hljs-comment">//再次添加null</span><br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-comment">//方式1： 使用迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;=====使用迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span>  iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;obj=&quot;</span> + obj);<br>        &#125;<br><br>        set.remove(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//方式2: 增强for</span><br>        System.out.println(<span class="hljs-string">&quot;=====增强for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o : set) &#123;<br>            System.out.println(<span class="hljs-string">&quot;o=&quot;</span> + o);<br>        &#125;<br><br>        <span class="hljs-comment">//set 接口对象，不能通过索引来获取</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashSet-说明"><a href="#HashSet-说明" class="headerlink" title="HashSet 说明"></a>HashSet 说明</h3><ul><li><p>HashSet 实现了 Set 接口</p></li><li><p>HashSet 实际上是 HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span>&#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以存放 null 值，但是只能有一个 null</p></li><li><p>HashSet 不保证元素是有序的，取决于 hash 后，再确定索引的结果</p><p>即 不保证存放元素的顺序和取出顺序一致</p></li><li><p>不能有重复元素&#x2F;对象（与 Set 一致）</p></li></ul><h4 id="HashSet-案例说明"><a href="#HashSet-案例说明" class="headerlink" title="HashSet 案例说明"></a>HashSet 案例说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSet01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. 在执行add方法后，会返回一个boolean值</span><br>        <span class="hljs-comment">//2. 如果添加成功，返回 true, 否则返回false</span><br>        <span class="hljs-comment">//3. 可以通过 remove 指定删除哪个对象</span><br>        System.out.println(set.add(<span class="hljs-string">&quot;john&quot;</span>));<span class="hljs-comment">//T</span><br>        System.out.println(set.add(<span class="hljs-string">&quot;lucy&quot;</span>));<span class="hljs-comment">//T</span><br>        System.out.println(set.add(<span class="hljs-string">&quot;john&quot;</span>));<span class="hljs-comment">//F</span><br>        System.out.println(set.add(<span class="hljs-string">&quot;jack&quot;</span>));<span class="hljs-comment">//T</span><br>        System.out.println(set.add(<span class="hljs-string">&quot;Rose&quot;</span>));<span class="hljs-comment">//T</span><br>        <br>        set.remove(<span class="hljs-string">&quot;john&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<span class="hljs-comment">//3个</span><br><br>        <span class="hljs-comment">//</span><br>        set  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<span class="hljs-comment">//0</span><br>        <span class="hljs-comment">//4 Hashset 不能添加相同的元素/数据?</span><br>        set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<span class="hljs-comment">//添加成功</span><br>        set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<span class="hljs-comment">//加入不了</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>));<span class="hljs-comment">//OK</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>));<span class="hljs-comment">//Ok</span><br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<br><br>        <span class="hljs-comment">//在加深一下. 非常经典的面试题.</span><br>        <span class="hljs-comment">//看源码，做分析， 先给小伙伴留一个坑，以后讲完源码，你就了然</span><br>        <span class="hljs-comment">//去看他的源码，即 add 到底发生了什么?=&gt; 底层机制.</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>));<span class="hljs-comment">//ok</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>));<span class="hljs-comment">//加入不了.</span><br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123; <span class="hljs-comment">//定义了Dog类</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashSet-底层机制说明"><a href="#HashSet-底层机制说明" class="headerlink" title="HashSet 底层机制说明"></a>HashSet 底层机制说明</h4><p><strong>图解：</strong></p><p> <img src="/2022/06/30/JavaNote/image-20220913212131074.png" alt="image-20220913212131074"></p><p><strong>分析 HashSet 底层是 HashMap，而 HashMap 底层是（数组 + 链表 + 红黑树）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//模拟 数组+链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetStructure</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//模拟一个HashSet的底层 (HashMap 的底层结构)</span><br>        <span class="hljs-comment">//1. 创建一个数组，数组的类型是 Node[]</span><br>        <span class="hljs-comment">//2. 有些人，直接把 Node[] 数组称为 表</span><br>        Node[] table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-comment">//3. 创建结点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">john</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        table[<span class="hljs-number">2</span>] = john;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-literal">null</span>);<br>        john.next = jack;<span class="hljs-comment">// 将jack 结点挂载到john</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">rose</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;Rose&quot;</span>, <span class="hljs-literal">null</span>);<br>        jack.next = rose;<span class="hljs-comment">// 将rose 结点挂载到jack</span><br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">lucy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-literal">null</span>);<br>        table[<span class="hljs-number">3</span>] = lucy; <span class="hljs-comment">// 把lucy 放到 table表的索引为3的位置.</span><br>        System.out.println(<span class="hljs-string">&quot;table=&quot;</span> + table);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123; <span class="hljs-comment">//结点, 存储数据, 可以指向下一个结点，从而形成链表</span><br>    Object item; <span class="hljs-comment">//存放数据</span><br>    Node next; <span class="hljs-comment">// 指向下一个结点</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item, Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析 HashSet 的添加元素底层是如何实现（hash() + equals()）</strong></p><p><strong>概括：</strong></p><p>1）先获取元素的哈希值（hashCode方法）</p><p>2）对哈希值进行运算，得出一个索引值即为要存放在哈希表中的位置号</p><p>3）如果该位置上有其它元素，则需要进行 equals 判断（equals 可以由程序员重写来定义判断标准）</p><p>​  如果相等，则不再添加。如果不相等，则以链表的方式添加。</p><p><strong>细节：</strong></p><p>1）HashSet 底层是 HashMap </p><p>2）添加一个元素时，先得到 hash 值 - 会转成 –&gt; 索引值</p><p>3）找到存储数据表 table，看这个索引位置是否已经存放的有元素</p><p>4）如果没有，直接加入</p><p>5）如果有，调用 equals 比较，如果相同，就放弃添加，如果不相同，则添加到最后</p><p>6）在 Java8 中，如果一条链表的元素个数到达 TREEIFY_THRESHOLD（默认是 8），并且 table(数组) 的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认64），就会进行树化（红黑树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetSource</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        hashSet.add(<span class="hljs-string">&quot;java&quot;</span>);<span class="hljs-comment">//到此位置，第1次add分析完毕.</span><br>        hashSet.add(<span class="hljs-string">&quot;php&quot;</span>);<span class="hljs-comment">//到此位置，第2次add分析完毕</span><br>        hashSet.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + hashSet);<br><br><span class="hljs-comment">// ==========================================================================</span><br><span class="hljs-comment">// 对HashSet 的源码解读</span><br><span class="hljs-number">1.</span> 执行 HashSet()<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br><span class="hljs-number">2.</span> 执行 add()<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-comment">//e = &quot;java&quot;</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;  <span class="hljs-comment">//(static) PRESENT = new Object();</span><br>&#125;<br><span class="hljs-number">3.</span>执行 put() , 该方法会先执行 hash(key) 得到key对应的hash值<br>    再通过算法得到 (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//key = &quot;java&quot;  value = PRESENT (静态=&gt;共享)</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-number">4.</span>执行 putVal<br>    <span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,<span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i; <span class="hljs-comment">// 定义了辅助变量</span><br><br>    <span class="hljs-comment">// table 就是 HashMap 的一个数组，类型是 Node[]</span><br>    <span class="hljs-comment">// if 语句表示如果当前table 是null, 或者 大小=0</span><br>    <span class="hljs-comment">// 就是第一次扩容，到16个空间.</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br><br>    <span class="hljs-comment">// (1)根据key，得到hash 去计算该key应该存放到table表的哪个索引位置</span><br>    <span class="hljs-comment">//    并把这个位置的对象，赋给 p</span><br>    <span class="hljs-comment">// (2)判断 p 是否为null</span><br>    <span class="hljs-comment">// (2.1) 如果 p 为 null, 表示还没有存放元素, 就创建一个 Node (key=&quot;java&quot;,value=PRESENT)</span><br>    <span class="hljs-comment">// (2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//一个开发技巧提示： 在需要局部变量(辅助变量)时候，再创建</span><br>        Node&lt;K,V&gt; e; K k; <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样</span><br>        <span class="hljs-comment">//并且满足 下面两个条件之一:</span><br>        <span class="hljs-comment">//(1) 准备加入的key 和 p 指向的Node 结点的 key 是同一个对象</span><br>        <span class="hljs-comment">//(2) p 指向的Node 结点的 key 的 equals() 和准备加入的key比较后相同</span><br>        <span class="hljs-comment">//就不能加入</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">//再判断 p 是不是一颗红黑树,</span><br>        <span class="hljs-comment">//如果是一颗红黑树，就调用 putTreeVal , 来进行添加</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果table对应索引位置，已经是一个链表, 就使用for循环依次比较</span><br>            <span class="hljs-comment">//(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后</span><br>            <span class="hljs-comment">//    注意在把元素添加到链表后，立即判断 该链表是否已经达到8个结点</span><br>            <span class="hljs-comment">//    , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)</span><br>            <span class="hljs-comment">//    注意，在转成红黑树时，要进行判断, 判断条件</span><br>            <span class="hljs-comment">//    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))</span><br>            <span class="hljs-comment">//            resize();</span><br>            <span class="hljs-comment">//    如果上面条件成立，先table扩容，而不会转成红黑树</span><br>            <span class="hljs-comment">//    只有上面条件不成立时，才进行转成红黑树</span><br>            <span class="hljs-comment">//(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接break</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD(<span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-comment">//size 就是我们每加入一个结点Node(k,v,h,next), size++</span><br>    <span class="hljs-comment">//不管是加到table表上还是加到链表上</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<span class="hljs-comment">//扩容</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// ==========================================================================</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析 HashSet 的扩容和转成红黑树机制</strong></p><p>1）HashSet 底层是 HashMap，第一次添加时，table 数组扩容到 16，临界值（threshold）是 16*加载因子（loadFactor）是 0.75 &#x3D; 12       &#x2F;&#x2F; 临界值（threshold）作为 缓冲，提前扩容</p><p>2）如果 table 数组使用了临界值 12，就会扩容到 16 * 2 &#x3D; 32，新的临界值就是 32 * 0.75 &#x3D; 24，依次类推</p><p>3）在 Java8-17 中，如果一条链表的元素个数到达 TREEIFY_THRESHOLD（默认是 8），并且 table 的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认），就会进行树化（红黑树），否则仍然采用数组扩容机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetIncrement</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        HashSet底层是HashMap, 第一次添加时，table 数组扩容到 16，</span><br><span class="hljs-comment">        临界值(threshold)是 16*加载因子(loadFactor)是0.75 = 12</span><br><span class="hljs-comment">        如果table 数组使用到了临界值 12,就会扩容到 16 * 2 = 32,</span><br><span class="hljs-comment">        新的临界值就是 32*0.75 = 24, 依次类推</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><span class="hljs-comment">//        for(int i = 1; i &lt;= 100; i++) &#123;</span><br><span class="hljs-comment">//            hashSet.add(i);//1,2,3,4,5...100</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在Java8中, 如果一条链表的元素个数到达 TREEIFY_THRESHOLD(默认是 8 )，</span><br><span class="hljs-comment">        并且table的大小 &gt;= MIN_TREEIFY_CAPACITY(默认64),就会进行树化(红黑树),</span><br><span class="hljs-comment">        否则仍然采用数组扩容机制</span><br><span class="hljs-comment">         */</span><br><br><span class="hljs-comment">//        for(int i = 1; i &lt;= 12; i++) &#123;</span><br><span class="hljs-comment">//            hashSet.add(new A(i));//</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            当我们向hashset增加一个元素，-&gt; 加入Node 或 -&gt; 加入table , 就算是一个size++</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<span class="hljs-comment">//在table的某一条链表上添加了 7个A对象</span><br>            hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(i));<span class="hljs-comment">//</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<span class="hljs-comment">//在table的另外一条链表上添加了 7个B对象</span><br>            hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(i));<span class="hljs-comment">//</span><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-built_in">this</span>.n = n;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-built_in">this</span>.n = n;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashSet-课堂练习"><a href="#HashSet-课堂练习" class="headerlink" title="HashSet 课堂练习"></a>HashSet 课堂练习</h4><p> &#x2F;&#x2F;alt + ins 快捷键 快速重写 equals 和 hashCode </p> <img src="image-20220914225605186.png" alt="image-20220914225605186" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         定义一个Employee类，该类包含：private成员属性name,age 要求:</span><br><span class="hljs-comment">         创建3个Employee 对象放入 HashSet中</span><br><span class="hljs-comment">         当 name和age的值相同时，认为是相同员工, 不能添加到HashSet集合中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">18</span>));<span class="hljs-comment">//ok</span><br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">28</span>));<span class="hljs-comment">//ok</span><br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">18</span>));<span class="hljs-comment">//加入不成功.</span><br><br>        <span class="hljs-comment">//回答,加入了几个? 3个</span><br>        System.out.println(<span class="hljs-string">&quot;hashSet=&quot;</span> + hashSet);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建Employee</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//alt + ins 快捷键 快速重写 equals 和 hashCode </span><br>    <span class="hljs-comment">//重写 equals 判断</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> (Employee) o;<br>        <span class="hljs-keyword">return</span> age == employee.age &amp;&amp;<br>                Objects.equals(name, employee.name);<br>    &#125;<br>    <span class="hljs-comment">//如果 name 和 age 值相同，则返回相同的hash值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedHashSet-全面说明"><a href="#LinkedHashSet-全面说明" class="headerlink" title="LinkedHashSet 全面说明"></a>LinkedHashSet 全面说明</h3><ul><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个 数组 + 双向链表</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序（图），这使得元素看起来是以插入顺序保存的（即：取出元素的顺序与添加元素的顺序一致）</li><li>LinkedHashSet 不允许添重复元素</li><li>LinkedHashSet 底层机制示意图</li></ul> <img src="image-20220915192249886.png" alt="image-20220915192249886" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSetSource</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//分析一下LinkedHashSet的底层机制</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;AA&quot;</span>));<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;刘&quot;</span>, <span class="hljs-number">1001</span>));<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-string">&quot;HSP&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;set=&quot;</span> + set);<br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. LinkedHashSet 加入顺序和取出元素/数据的顺序一致</span><br>        <span class="hljs-comment">//2. LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)</span><br>        <span class="hljs-comment">//3. LinkedHashSet 底层结构 (数组table+双向链表)</span><br>        <span class="hljs-comment">//4. 添加第一次时，直接将 数组 table 扩容到 16，存放的结点类型是 LinkedHashMap$Entry</span><br>        <span class="hljs-comment">//5. 数组是 HashMap$Node[] 存放的元素/数据是 LinkedHashMap$Entry类型</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        //继承关系是在内部类完成.</span><br><span class="hljs-comment">        static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="hljs-comment">            Entry&lt;K,V&gt; before, after;</span><br><span class="hljs-comment">            Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="hljs-comment">                super(hash, key, value, next);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LinkedHashSet-课后练习题"><a href="#LinkedHashSet-课后练习题" class="headerlink" title="LinkedHashSet 课后练习题"></a>LinkedHashSet 课后练习题</h4> <img src="image-20220915192932489.png" alt="image-20220915192932489" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSetExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">LinkedHashSet</span> <span class="hljs-variable">linkedHashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;奥拓&quot;</span>, <span class="hljs-number">1000</span>));<span class="hljs-comment">//OK</span><br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;奥迪&quot;</span>, <span class="hljs-number">300000</span>));<span class="hljs-comment">//OK</span><br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;法拉利&quot;</span>, <span class="hljs-number">10000000</span>));<span class="hljs-comment">//OK</span><br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;奥迪&quot;</span>, <span class="hljs-number">300000</span>));<span class="hljs-comment">//默认情况OK，修改后no</span><br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;保时捷&quot;</span>, <span class="hljs-number">70000000</span>));<span class="hljs-comment">//OK</span><br>        linkedHashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;奥迪&quot;</span>, <span class="hljs-number">300000</span>));<span class="hljs-comment">//默认情况OK，修改后no</span><br><br>        System.out.println(<span class="hljs-string">&quot;linkedHashSet=&quot;</span> + linkedHashSet);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Car 类(属性:name,price)，  如果 name 和 price 一样，</span><br><span class="hljs-comment"> * 则认为是相同元素，就不能添加。 5min</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> price;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<span class="hljs-built_in">this</span>.price = price;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\nCar&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重写equals 方法 和 hashCode</span><br>    <span class="hljs-comment">//当 name 和 price 相同时， 就返回相同的 hashCode值，equals 返回 ture</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) o;<br>        <span class="hljs-keyword">return</span> Double.compare(car.price, price) == <span class="hljs-number">0</span> &amp;&amp;<br>                Objects.equals(name, car.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, price);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map-接口和常用方法"><a href="#Map-接口和常用方法" class="headerlink" title="Map 接口和常用方法"></a>Map 接口和常用方法</h3><h4 id="Map-接口实现类的特点-很实用"><a href="#Map-接口实现类的特点-很实用" class="headerlink" title="Map 接口实现类的特点 [很实用]"></a>Map 接口实现类的特点 [很实用]</h4><p>注意：此处以 JDK8 为例</p><ul><li><p>Map 与 Collection 并列存在，用于保存具有映射关系的数据：Key - Value（Set只用到了Key，value是常量）</p></li><li><p>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HsahMap$Node 对象中</p><p>基本数据类型也会进行自动装箱，任何把自动装箱生成的对象封装到 HsahMap$Node 对象中</p></li><li><p>Map 中的 key 不允许重复，原因和 HashSet 一样</p></li><li><p>Map 中的 value 可以重复</p></li><li><p>Map 中的 key 可以为 null，value 也可以为 null，注意 key 为 null 只能有一个，value 为 null 可以多个</p></li><li><p>常用 String类作为 Map 的 key，但使用其它（int、Object等）也可以</p></li><li><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</p></li><li><p>Map 存放数据的 key-value 示意图，一堆 k-v 是放在一个 HashMap$Node 中的，而 Set 和 Collection 只是建立了一个指向 HashMap$Node 对象的引用，从而方便遍历（Node 实现了 Entry 接口）</p><p>（因为 Node 实现了 Entry 接口，有些书上也说 一对 k-v 就是一个 Entry）</p> <img src="image-20220915221924451.png" alt="image-20220915221924451" style="zoom:80%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Map_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//老韩解读Map 接口实现类的特点, 使用实现类HashMap</span><br>        <span class="hljs-comment">//1. Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value(双列元素)</span><br>        <span class="hljs-comment">//2. Map 中的 key 和  value 可以是任何引用类型的数据，会封装到HashMap$Node 对象中</span><br>        <span class="hljs-comment">//3. Map 中的 key 不允许重复，原因和HashSet 一样，前面分析过源码.</span><br>        <span class="hljs-comment">//4. Map 中的 value 可以重复</span><br>        <span class="hljs-comment">//5. Map 的key 可以为 null, value 也可以为null ，注意 key 为null,</span><br>        <span class="hljs-comment">//   只能有一个，value 为null ,可以多个</span><br>        <span class="hljs-comment">//6. 常用String类作为Map的 key</span><br>        <span class="hljs-comment">//7. key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;no2&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//当有相同的k, 就等价于替换.</span><br>        map.put(<span class="hljs-string">&quot;no3&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">//等价替换</span><br>        map.put(<span class="hljs-string">&quot;no4&quot;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;no5&quot;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-string">&quot;金毛狮王&quot;</span>);<span class="hljs-comment">//k-v</span><br>        <span class="hljs-comment">// 通过get 方法，传入 key ,会返回对应的value</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;no2&quot;</span>));<span class="hljs-comment">//张无忌</span><br>        System.out.println(<span class="hljs-string">&quot;map=&quot;</span> + map);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码解读</span><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapSource_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;no2&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>());<span class="hljs-comment">//k-v</span><br><span class="hljs-comment">//解读</span><br><span class="hljs-comment">//1. k-v 最后是存放在 HashMap$Node node = newNode(hash, key, value, null) 中的</span><br><span class="hljs-comment">//2. k-v 为了方便程序员的遍历，还会 创建 EntrySet 集合，该集合存放的元素的类型 Entry，而一个Entry</span><br><span class="hljs-comment">//   对象就有 k,v EntrySet&lt;Entry&lt;K,V&gt;&gt; 即：源码 transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="hljs-comment">//3. 在 entrySet 中， 定义的类型是 Map.Entry，但是实际上存放的还是 HashMap$Node</span><br><span class="hljs-comment">//   这是因为 static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;，即实现了Map.Entry&lt;K,V&gt;接口</span><br><span class="hljs-comment">//4. 当把 HashMap$Node 对象 存放到 entrySet 就方便我们的遍历, 因为 Map.Entry 提供了重要方法</span><br><span class="hljs-comment">//   K getKey(); V getValue();</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>        System.out.println(set.getClass()); <span class="hljs-comment">// HashMap$EntrySet</span><br>        <span class="hljs-keyword">for</span> (Object obj : set) &#123;<br>            <span class="hljs-comment">//System.out.println(obj.getClass()); //HashMap$Node</span><br>            <span class="hljs-comment">//为了从 HashMap$Node 取出k-v</span><br>            <span class="hljs-comment">//1. 先做一个向下转型</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) obj;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;-&quot;</span> + entry.getValue() );<br>        &#125;<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set1</span> <span class="hljs-operator">=</span> map.keySet();<br>        System.out.println(set1.getClass());<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        System.out.println(values.getClass());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Map-接口常用方法"><a href="#Map-接口常用方法" class="headerlink" title="Map 接口常用方法"></a>Map 接口常用方法</h4><ul><li>put：添加</li><li>remove：根据键删除映射关系</li><li>get：根据键获取值</li><li>size：获取元素个数</li><li>isEmpty：判断个数是否为0</li><li>clear：清除</li><li>containsKey：查找键是否存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//演示map接口常用方法</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">100</span>));<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<span class="hljs-comment">//替换-&gt; 一会分析源码</span><br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-string">&quot;宋喆&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-string">&quot;刘令博&quot;</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>, <span class="hljs-string">&quot;关晓彤&quot;</span>);<span class="hljs-comment">//OK</span><br>        map.put(<span class="hljs-string">&quot;hsp&quot;</span>, <span class="hljs-string">&quot;hsp的老婆&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;map=&quot;</span> + map);<br><span class="hljs-comment">//        remove:根据键删除映射关系</span><br>        map.remove(<span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;map=&quot;</span> + map);<br><span class="hljs-comment">//        get：根据键获取值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;鹿晗&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;val=&quot;</span> + val);<br><span class="hljs-comment">//        size:获取元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;k-v=&quot;</span> + map.size());<br><span class="hljs-comment">//        isEmpty:判断个数是否为0</span><br>        System.out.println(map.isEmpty());<span class="hljs-comment">//F</span><br><span class="hljs-comment">//        clear:清除k-v</span><br>        <span class="hljs-comment">//map.clear();</span><br>        System.out.println(<span class="hljs-string">&quot;map=&quot;</span> + map);<br><span class="hljs-comment">//        containsKey:查找键是否存在</span><br>        System.out.println(<span class="hljs-string">&quot;结果=&quot;</span> + map.containsKey(<span class="hljs-string">&quot;hsp&quot;</span>));<span class="hljs-comment">//T</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Map-接口遍历方法"><a href="#Map-接口遍历方法" class="headerlink" title="Map 接口遍历方法"></a>Map 接口遍历方法</h4> <img src="image-20220915222026118.png" alt="image-20220915222026118" style="zoom:50%;" /><ul><li>containKey：查找键是否存在</li><li>keySet：获取所有的键</li><li>entrySet：获取所有关系 k-v</li><li>value：获取所有的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapFor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;宋喆&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘令博&quot;</span>, <span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>, <span class="hljs-string">&quot;关晓彤&quot;</span>);<br><br>        <span class="hljs-comment">//第一组: 先取出 所有的Key , 通过Key 取出对应的Value</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keyset</span> <span class="hljs-operator">=</span> map.keySet();<br>        <span class="hljs-comment">//(1) 增强for</span><br>        System.out.println(<span class="hljs-string">&quot;-----第一种方式-------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object key : keyset) &#123;<br>            System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>        &#125;<br>        <span class="hljs-comment">//(2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;----第二种方式--------&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> keyset.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>  iterator.next();<br>            System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>        &#125;<br><br>        <span class="hljs-comment">//第二组: 把所有的values取出</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        <span class="hljs-comment">//这里可以使用所有的Collections使用的遍历方法</span><br>        <span class="hljs-comment">//(1) 增强for</span><br>        System.out.println(<span class="hljs-string">&quot;---取出所有的value 增强for----&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object value : values) &#123;<br>            System.out.println(value);<br>        &#125;<br>        <span class="hljs-comment">//(2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;---取出所有的value 迭代器----&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator2</span> <span class="hljs-operator">=</span> values.iterator();<br>        <span class="hljs-keyword">while</span> (iterator2.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span>  iterator2.next();<br>            System.out.println(value);<br><br>        &#125;<br><br>        <span class="hljs-comment">//第三组: 通过 EntrySet 来获取 k-v</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<span class="hljs-comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span><br>        <span class="hljs-comment">//(1) 增强for</span><br>        System.out.println(<span class="hljs-string">&quot;----使用 EntrySet 的 for增强(第3种)----&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object entry : entrySet) &#123;<br>            <span class="hljs-comment">//将 entry 转成 Map.Entry</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;-&quot;</span> + m.getValue());<br>        &#125;<br>        <span class="hljs-comment">//(2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;----使用 EntrySet 的 迭代器(第4种)----&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator3</span> <span class="hljs-operator">=</span> entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator3.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span>  iterator3.next();<br>            <span class="hljs-comment">//System.out.println(next.getClass());</span><br>            <span class="hljs-comment">//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)</span><br>            <span class="hljs-comment">//向下转型 Map.Entry</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;-&quot;</span> + m.getValue());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Map-练习题"><a href="#Map-练习题" class="headerlink" title="Map 练习题"></a>Map 练习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//完成代码</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//添加对象</span><br>        hashMap.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">300000</span>, <span class="hljs-number">1</span>));<br>        hashMap.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">21000</span>, <span class="hljs-number">2</span>));<br>        hashMap.put(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">12000</span>, <span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//遍历2种方式</span><br>        <span class="hljs-comment">//并遍历显示工资&gt;18000的员工(遍历方式最少两种)</span><br>        <span class="hljs-comment">//1. 使用keySet  -&gt; 增强for</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> hashMap.keySet();<br>        System.out.println(<span class="hljs-string">&quot;====第一种遍历方式====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object key : keySet) &#123;<br>            <span class="hljs-comment">//先获取value</span><br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Emp) hashMap.get(key);<br>            <span class="hljs-keyword">if</span>(emp.getSal() &gt;<span class="hljs-number">18000</span>) &#123;<br>                System.out.println(emp);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 使用EntrySet -&gt; 迭代器</span><br>        <span class="hljs-comment">//   体现比较难的知识点</span><br>        <span class="hljs-comment">//   慢慢品，越品越有味道.</span><br>        System.out.println(<span class="hljs-string">&quot;======迭代器======&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> hashMap.entrySet();<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> entrySet.iterator();<br>        <span class="hljs-comment">//二合一：Iterator iterator = (hashMap.entrySet()).iterator();</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span>  (Map.Entry)iterator.next();<br>            <span class="hljs-comment">//通过entry 取得key 和 value</span><br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Emp) entry.getValue();<br>            <span class="hljs-keyword">if</span>(emp.getSal() &gt; <span class="hljs-number">18000</span>) &#123;<br>                System.out.println(emp);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用HashMap添加3个员工对象，要求</span><br><span class="hljs-comment"> * 键：员工id</span><br><span class="hljs-comment"> * 值：员工对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 并遍历显示工资&gt;18000的员工(遍历方式最少两种)</span><br><span class="hljs-comment"> * 员工类：姓名、工资、员工id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> sal;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSal</span><span class="hljs-params">(<span class="hljs-type">double</span> sal)</span> &#123;<span class="hljs-built_in">this</span>.sal = sal;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> id;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<span class="hljs-built_in">this</span>.id = id;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sal=&quot;</span> + sal +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashMap-阶段小结"><a href="#HashMap-阶段小结" class="headerlink" title="HashMap 阶段小结"></a>HashMap 阶段小结</h4><ul><li><p>Map 接口的常用实现类：HashMap、Hashtable 和 Properties</p></li><li><p>HashMap 是 Map 接口使用频率最高的实现类</p></li><li><p>HashMap 以 key-val对 的方式来存储数据（HashMap$Node类型）</p></li><li><p>key 不能重复，但是值可以重复，允许 null 键 和 null 值</p></li><li><p>如果添加相同的key，则会覆盖原来的 key-val，等同于修改替换（key 不变，val 变）</p></li><li><p>与 HashSet 一样，不保证映射的顺序，因为底层是以 hash 表的方式来存储的</p><p>(JDK8 的 HashMap 底层：数组 + 链表 + 红黑树)</p></li><li><p>HashMap 没有实现同步，因此是线程不安全的，方法没有做同步互斥的操作，没有 synchronized</p></li></ul><h4 id="HashMap-底层机制及源码剖析"><a href="#HashMap-底层机制及源码剖析" class="headerlink" title="HashMap 底层机制及源码剖析"></a>HashMap 底层机制及源码剖析</h4> <img src="image-20220916141112139.png" alt="image-20220916141112139" style="zoom:50%;" /><p><strong>扩容机制： [和 HashSet 相同]</strong></p><ul><li>HashMap 底层维护了 Node 类型的数组 table，默认为 null</li><li>当创建对象时，将加载因子（loadfactor）初始化为 0.75</li><li>当添加 key-val 时，通过 key 的哈希值得到在 table 的索引，然后判断该索引处是否有元素，如果没有元素则直接添加；如果该索引处有元素，继续判断该元素的 key 和准备加入的 key 是否相等（equals），如果相等，则直接替换 val；如果不相等则需要判断是树结构还是链表结构，做出相应处理；如果添加时发现容量不够，则需要扩容</li><li>第 1 次添加，则需要扩容 table 容量为 16，临界值（threshold）为 12（16*0.75）</li><li>以后再扩容，则需要扩容 table 容量为原来的 2倍（32），临界值为原来的 2 倍（24），以此类推</li><li>在 java8 中，如果一条链的元素个数超过 TREEIFY_THRESHOLD（默认为8），并且 table &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认 64），就会进行树化（红黑树）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//HashMap的put() 源码解读</span><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapSource1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//ok</span><br>        map.put(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//ok</span><br>        map.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-number">20</span>);<span class="hljs-comment">//替换value</span><br>        System.out.println(<span class="hljs-string">&quot;map=&quot;</span> + map);<span class="hljs-comment">//</span><br>        <span class="hljs-comment">/* 解读 HashMap的源码+图解</span><br><span class="hljs-comment">        1. 执行构造器 new HashMap()</span><br><span class="hljs-comment">           初始化加载因子 loadfactor = 0.75</span><br><span class="hljs-comment">           此时 HashMap$Node[] table = null</span><br><span class="hljs-comment">        2. 执行put（如果参数中有基本数据类型则会先进行自动装箱）</span><br><span class="hljs-comment">        执行put 调用 hash方法，计算 key的 hash值 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span><br><span class="hljs-comment">            public V put(K key, V value) &#123;//K = &quot;java&quot; value = 10</span><br><span class="hljs-comment">                return putVal(hash(key), key, value, false, true);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         3. 执行 putVal</span><br><span class="hljs-comment">         final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="hljs-comment">                   boolean evict) &#123;</span><br><span class="hljs-comment">                Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;//辅助变量</span><br><span class="hljs-comment">                //01 如果底层的table 数组为null, 或者 length =0 , 就扩容到16</span><br><span class="hljs-comment">                if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="hljs-comment">                    n = (tab = resize()).length;</span><br><span class="hljs-comment">                //02 取出hash值对应的table的索引位置的Node，如果为null，就直接把加入的k-v</span><br><span class="hljs-comment">                //   创建成一个 Node，加入该位置即可</span><br><span class="hljs-comment">                if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="hljs-comment">                    tab[i] = newNode(hash, key, value, null);</span><br><span class="hljs-comment">                else &#123;</span><br><span class="hljs-comment">                    Node&lt;K,V&gt; e; K k;//辅助变量</span><br><span class="hljs-comment">                    // 如果table的索引位置的key的hash相同和新的key的hash值相同，</span><br><span class="hljs-comment">                    // 并 满足(table现有的结点的key和准备添加的key是同一个对象  || equals返回真)</span><br><span class="hljs-comment">                    // 就认为不能加入新的 k-v（但会在后面代码进行val的替换）</span><br><span class="hljs-comment">                    if (p.hash == hash &amp;&amp;</span><br><span class="hljs-comment">                        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="hljs-comment">                        e = p;</span><br><span class="hljs-comment">                    //如果当前的table的已有的Node 是红黑树，就按照红黑树的方式处理</span><br><span class="hljs-comment">                    else if (p instanceof TreeNode)</span><br><span class="hljs-comment">                        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="hljs-comment">                    //如果找到的结点，后面是链表，就循环比较</span><br><span class="hljs-comment">                    else &#123;</span><br><span class="hljs-comment">                        for (int binCount = 0; ; ++binCount) &#123;//死循环</span><br><span class="hljs-comment">                            //如果整个链表，没有和他相同,就加到该链表的最后</span><br><span class="hljs-comment">                            if ((e = p.next) == null) &#123;</span><br><span class="hljs-comment">                                p.next = newNode(hash, key, value, null);</span><br><span class="hljs-comment">                                //加入后，判断当前链表的个数，是否已经到8个，到8个，后</span><br><span class="hljs-comment">                                //就调用 treeifyBin 方法进行红黑树的转换</span><br><span class="hljs-comment">                                if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="hljs-comment">                                    treeifyBin(tab, hash);</span><br><span class="hljs-comment">                                break;</span><br><span class="hljs-comment">                            &#125;</span><br><span class="hljs-comment">                            //如果在循环比较过程中，发现有相同的key，就break，就只是替换 value</span><br><span class="hljs-comment">                            if (e.hash == hash &amp;&amp;</span><br><span class="hljs-comment">                                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="hljs-comment">                                break;</span><br><span class="hljs-comment">                            p = e;</span><br><span class="hljs-comment">                        &#125;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                    if (e != null) &#123; // existing mapping for key</span><br><span class="hljs-comment">                        V oldValue = e.value;</span><br><span class="hljs-comment">                        if (!onlyIfAbsent || oldValue == null)</span><br><span class="hljs-comment">                            e.value = value; //替换，key对应value</span><br><span class="hljs-comment">                        afterNodeAccess(e);</span><br><span class="hljs-comment">                        return oldValue;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">                ++modCount; //每增加一个Node ,就size++</span><br><span class="hljs-comment">                if (++size &gt; threshold[12-24-48]) //如果 size &gt; 临界值，就扩容</span><br><span class="hljs-comment">                    resize();</span><br><span class="hljs-comment">                afterNodeInsertion(evict);</span><br><span class="hljs-comment">                return null;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          5. 关于树化(转成红黑树)</span><br><span class="hljs-comment">          // 如果table 为null，或者大小还没有到 64，暂时不树化，而是进行扩容.</span><br><span class="hljs-comment">          // 否则才会真正的树化 / 剪枝（把树重新转为链表）</span><br><span class="hljs-comment">          final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="hljs-comment">            int n, index; Node&lt;K,V&gt; e;</span><br><span class="hljs-comment">            if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="hljs-comment">                resize();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//HashMap扩容触发树化案例</span><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapSource2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>            hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(i), <span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>        hashMap.put(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hashMap=&quot;</span> + hashMap); <span class="hljs-comment">//12个 k-v</span><br>        <span class="hljs-comment">//布置一个任务，自己设计代码去验证，table 的扩容</span><br>        <span class="hljs-comment">//0 -&gt; 16(12) -&gt; 32(24) -&gt; 64(64*0.75=48)-&gt; 128 (96) -&gt;</span><br>        <span class="hljs-comment">//自己设计程序，验证 -&gt; 增强自己阅读源码能力. 看别人代码.</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>  &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>    <span class="hljs-comment">//让所有的A对象的hashCode都是100</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\nA&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;num=&quot;</span> + num +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map-接口实现类-Hashtable"><a href="#Map-接口实现类-Hashtable" class="headerlink" title="Map 接口实现类-Hashtable"></a>Map 接口实现类-Hashtable</h3><h4 id="HashTable-的基本介绍"><a href="#HashTable-的基本介绍" class="headerlink" title="HashTable 的基本介绍"></a>HashTable 的基本介绍</h4><ul><li>存放的元素是键值对：即 K-V</li><li>hashtable 的键和值都不能为 null，否则会抛出 NullPointerException</li><li>hashTable 使用方法基本上和 HashMap 一样</li><li>hashTable 是线程安全的（synchronized），hashMap 是线程不安全的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTableExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<span class="hljs-comment">//ok</span><br>        table.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//ok</span><br>        <span class="hljs-comment">//table.put(null, 100); //异常 NullPointerException</span><br>        <span class="hljs-comment">//table.put(&quot;john&quot;, null);//异常 NullPointerException</span><br>        table.put(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//ok</span><br>        table.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//ok</span><br>        table.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">88</span>);<span class="hljs-comment">//替换</span><br>        table.put(<span class="hljs-string">&quot;hello1&quot;</span>, <span class="hljs-number">1</span>);<br>        table.put(<span class="hljs-string">&quot;hello2&quot;</span>, <span class="hljs-number">1</span>);<br>        table.put(<span class="hljs-string">&quot;hello3&quot;</span>, <span class="hljs-number">1</span>);<br>        table.put(<span class="hljs-string">&quot;hello4&quot;</span>, <span class="hljs-number">1</span>);<br>        table.put(<span class="hljs-string">&quot;hello5&quot;</span>, <span class="hljs-number">1</span>);<br>        table.put(<span class="hljs-string">&quot;hello6&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(table);<br>        <span class="hljs-comment">//简单说明一下Hashtable的底层</span><br>        <span class="hljs-comment">//1. 底层有数组 Hashtable$Entry[] 初始化大小为 11</span><br>        <span class="hljs-comment">//2. 临界值 threshold 8 = 11 * 0.75</span><br>        <span class="hljs-comment">//3. 扩容: 按照自己的扩容机制来进行即可.</span><br>        <span class="hljs-comment">//4. 执行 方法 addEntry(hash, key, value, index); 添加K-V 封装到Entry</span><br>        <span class="hljs-comment">//5. 当 if (count &gt;= threshold) 满足时，就进行扩容</span><br>        <span class="hljs-comment">//5. 按照 int newCapacity = (oldCapacity &lt;&lt; 1) + 1; 的大小扩容.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hashtable-和-HashMap-对比"><a href="#Hashtable-和-HashMap-对比" class="headerlink" title="Hashtable 和 HashMap 对比"></a>Hashtable 和 HashMap 对比</h4> <img src="image-20220916161139702.png" alt="image-20220916161139702" style="zoom: 50%;" /><h3 id="Map-接口实现类-Properties"><a href="#Map-接口实现类-Properties" class="headerlink" title="Map 接口实现类-Properties"></a>Map 接口实现类-Properties</h3><h4 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>Properties 类继承自 Hashtable 类并且实现了 Map 接口，也是使用一种键值对的形式来保存数据</p></li><li><p>Properties 的使用特点和 Hashtable 类似（key 和 value 不能为 null）</p></li><li><p>Properties 还可以用于 从 xxx.properties 文件中，加载数据到 Properties 类对象，并进行读取和修改</p></li><li><p>说明：工作后 xxx.properties 文件通常作为配置文件，这个知识点在IO流举例说明</p><p>Java 读写 Properties 配置文件：<a href="https://www.cnblogs.com/xudong-bupt/p/3758136.html">https://www.cnblogs.com/xudong-bupt/p/3758136.html</a></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. Properties 继承  Hashtable</span><br>        <span class="hljs-comment">//2. 可以通过 k-v 存放数据，当然key 和 value 不能为 null</span><br>        <span class="hljs-comment">//增加</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常</span><br>        <span class="hljs-comment">//properties.put(&quot;abc&quot;, null); //抛出 空指针异常</span><br>        properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//k-v</span><br>        properties.put(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-number">100</span>);<br>        properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">100</span>);<br>        properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">88</span>);<span class="hljs-comment">//如果有相同的key ， value被替换</span><br>        System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br><br>        <span class="hljs-comment">//通过k 获取对应值</span><br>        System.out.println(properties.get(<span class="hljs-string">&quot;lic&quot;</span>));<span class="hljs-comment">//88</span><br><br>        <span class="hljs-comment">//删除</span><br>        properties.remove(<span class="hljs-string">&quot;lic&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br><br>        <span class="hljs-comment">//修改</span><br>        properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-string">&quot;约翰&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TreeSet-源码解读"><a href="#TreeSet-源码解读" class="headerlink" title="TreeSet 源码解读"></a>TreeSet 源码解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSet_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. 当我们使用无参构造器，创建TreeSet时，默认使用key的Comparator比较器排序</span><br>        <span class="hljs-comment">//2. 老师希望添加的元素，按照字符串大小来排序</span><br>        <span class="hljs-comment">//3. 使用 TreeSet 提供的一个构造器，可以传入一个比较器(匿名内部类)</span><br>        <span class="hljs-comment">//   并指定排序规则</span><br>        <span class="hljs-comment">//4. 简单看看源码</span><br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1. 构造器把传入的比较器对象，赋给了 TreeSet的底层的 TreeMap的属性this.comparator</span><br><span class="hljs-comment">         public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span><br><span class="hljs-comment">                this.comparator = comparator;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         2. 在 调用 treeSet.add(&quot;tom&quot;), 在底层会执行到</span><br><span class="hljs-comment">         if (cpr != null) &#123;//cpr 就是我们的匿名内部类(对象)</span><br><span class="hljs-comment">            do &#123;</span><br><span class="hljs-comment">                parent = t;</span><br><span class="hljs-comment">                //动态绑定到我们的匿名内部类(对象)compare</span><br><span class="hljs-comment">                cmp = cpr.compare(key, t.key);</span><br><span class="hljs-comment">                if (cmp &lt; 0)</span><br><span class="hljs-comment">                    t = t.left;</span><br><span class="hljs-comment">                else if (cmp &gt; 0)</span><br><span class="hljs-comment">                    t = t.right;</span><br><span class="hljs-comment">                else //如果相等，即返回0,这个Key就没有加入(好好理解)</span><br><span class="hljs-comment">                    return t.setValue(value);</span><br><span class="hljs-comment">            &#125; while (t != null);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br><span class="hljs-comment">//        TreeSet treeSet = new TreeSet();</span><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">//下面 调用String的 compareTo方法进行字符串大小比较</span><br>                <span class="hljs-comment">//return ((String) o2).compareTo((String) o1);</span><br>                <span class="hljs-comment">//如果老韩要求加入的元素，按照长度大小排序</span><br>                <span class="hljs-keyword">return</span> ((String) o1).length() - ((String) o2).length();<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//添加数据.</span><br>        treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;tom&quot;</span>);<span class="hljs-comment">//3</span><br>        treeSet.add(<span class="hljs-string">&quot;sp&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//3（因为前面已经有长度为3的元素，所以不能加入）</span><br>        <span class="hljs-comment">//TreeSet中判断能否加入的方法是compare，而不是equals</span><br>        System.out.println(<span class="hljs-string">&quot;treeSet=&quot;</span> + treeSet);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TreeMap-源码解读"><a href="#TreeMap-源码解读" class="headerlink" title="TreeMap 源码解读"></a>TreeMap 源码解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMap_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用默认的构造器，创建TreeMap, 默认使用key的Comparator比较器排序</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            要求：按照传入的 k(String) 的大小进行排序</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        TreeMap treeMap = new TreeMap();</span><br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">//按照传入的 k(String) 的大小进行排序</span><br>                <span class="hljs-comment">//按照K(String) 的长度大小排序</span><br>                <span class="hljs-comment">//return ((String) o2).compareTo((String) o1);</span><br>                <span class="hljs-keyword">return</span> ((String) o2).length() - ((String) o1).length();<br>            &#125;<br>        &#125;);<br>        treeMap.put(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;杰克&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;kristina&quot;</span>, <span class="hljs-string">&quot;克瑞斯提诺&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-string">&quot;斯密斯&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;hsp&quot;</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>); <span class="hljs-comment">//加入不了</span><br>        <span class="hljs-comment">//TreeMap中判断能否加入的方法是compare，而不是equals</span><br>        System.out.println(<span class="hljs-string">&quot;treemap=&quot;</span> + treeMap);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            解读源码：</span><br><span class="hljs-comment">            1. 构造器. 把传入的实现了 Comparator接口的匿名内部类(对象)，传给给TreeMap的comparator</span><br><span class="hljs-comment">             public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span><br><span class="hljs-comment">                this.comparator = comparator;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            2. 调用put方法</span><br><span class="hljs-comment">            2.1 第一次添加, 把k-v 封装到 Entry对象，放入root</span><br><span class="hljs-comment">            Entry&lt;K,V&gt; t = root;</span><br><span class="hljs-comment">            if (t == null) &#123;</span><br><span class="hljs-comment">                // 此处调用compare方法是为了判断key是否为空</span><br><span class="hljs-comment">                // 如果为空，compare 里面则会抛出异常</span><br><span class="hljs-comment">                compare(key, key); // type (and possibly null) check</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                root = new Entry&lt;&gt;(key, value, null);</span><br><span class="hljs-comment">                size = 1;</span><br><span class="hljs-comment">                modCount++;</span><br><span class="hljs-comment">                return null;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            2.2 以后添加</span><br><span class="hljs-comment">            Comparator&lt;? super K&gt; cpr = comparator;</span><br><span class="hljs-comment">            if (cpr != null) &#123;</span><br><span class="hljs-comment">                do &#123; //遍历所有的key , 给当前key找到适当位置</span><br><span class="hljs-comment">                    parent = t;</span><br><span class="hljs-comment">                    //动态绑定到我们的匿名内部类的compare</span><br><span class="hljs-comment">                    cmp = cpr.compare(key, t.key);</span><br><span class="hljs-comment">                    if (cmp &lt; 0)</span><br><span class="hljs-comment">                        t = t.left;</span><br><span class="hljs-comment">                    else if (cmp &gt; 0)</span><br><span class="hljs-comment">                        t = t.right;</span><br><span class="hljs-comment">                    //如果遍历过程中，发现准备添加的Key 和当前已有的Key 相等，就不添加</span><br><span class="hljs-comment">                    else</span><br><span class="hljs-comment">                        return t.setValue(value);</span><br><span class="hljs-comment">                &#125; while (t != null);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-开发中如何选择集合实现类-记住"><a href="#总结-开发中如何选择集合实现类-记住" class="headerlink" title="总结-开发中如何选择集合实现类(记住)"></a>总结-开发中如何选择集合实现类(记住)</h3><img src="image-20220916163139229.png" alt="image-20220916163139229" style="zoom: 80%;" /><h3 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h3><h4 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>Collections 是一个操作 Set、List 和 Map 等集合的工具类</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li></ul><h4 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h4><p>以下均为 static 方法</p><ul><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 Liat 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List, Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List, int, int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Collections_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建ArrayList 集合，用于测试.</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;smith&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;king&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;milan&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//      # reverse(List)：反转 List 中元素的顺序</span><br>        Collections.reverse(list);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//      # shuffle(List)：对 List 集合元素进行随机排序</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="hljs-comment">//            Collections.shuffle(list);</span><br><span class="hljs-comment">//            System.out.println(&quot;list=&quot; + list);</span><br><span class="hljs-comment">//        &#125;</span><br><br><span class="hljs-comment">//      # sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span><br>        Collections.sort(list);<br>        System.out.println(<span class="hljs-string">&quot;自然排序后&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//      # sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br>        <span class="hljs-comment">//我们希望按照 字符串的长度大小排序</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">//可以加入校验代码.</span><br>                <span class="hljs-keyword">return</span> ((String) o2).length() - ((String) o1).length();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;字符串长度大小排序=&quot;</span> + list);<br><br><span class="hljs-comment">//      # swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span><br>        <span class="hljs-comment">//比如</span><br>        Collections.swap(list, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;交换后的情况&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><br><span class="hljs-comment">//      # Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span><br>        System.out.println(<span class="hljs-string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));<br><span class="hljs-comment">//      # Object max(Collection，Comparator)：以Comparator指定的顺序，返回给定集合中的最大元素</span><br>        <span class="hljs-comment">//比如，我们要返回长度最大的元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">maxObject</span> <span class="hljs-operator">=</span> Collections.max(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;长度最大的元素=&quot;</span> + maxObject);<br><br><span class="hljs-comment">//      # Object min(Collection)</span><br><span class="hljs-comment">//      # Object min(Collection，Comparator)</span><br>        <span class="hljs-comment">//上面的两个方法，参考max即可</span><br><br><span class="hljs-comment">//      # int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span><br>        System.out.println(<span class="hljs-string">&quot;tom出现的次数=&quot;</span> + Collections.frequency(list, <span class="hljs-string">&quot;tom&quot;</span>));<br><br><span class="hljs-comment">//      # void copy(List dest,List src)：将src中的内容复制到dest中</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//为了完成一个完整拷贝，我们需要先给dest 赋值，大小和list.size()一样</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            dest.add(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//拷贝</span><br>        Collections.copy(dest, list);<br>        System.out.println(<span class="hljs-string">&quot;dest=&quot;</span> + dest);<br><br><span class="hljs-comment">//      # boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span><br>        <span class="hljs-comment">//如果list中，有tom 就替换成 汤姆</span><br>        Collections.replaceAll(list, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list替换后=&quot;</span> + list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p><strong>试分析HashSet和TreeSets分别如何实现去重的</strong> </p><p> (1)HashSet的去重机制：hashCode() + equals()，底层先通过存入对象，进行运算得到一个 hash 值，通过 hash 值得到对应的索引，如果发现 table 索引所在的位置，没有数据，就直接存放；如果有数据，就进行 equals 比较[遍历比较]，如果比较后，不相同，就加入，否则就不加入.  </p><p>(2)TreeSet的去重机制：如果你传入了一个 Comparator 匿名对象，就使用实现的 compare 去重，如果方法返回0，就认为是相同的元素&#x2F;数据，就不添加，如果没有传入一个 Comparator 匿名对象，则以添加的对象实现的Compareable 接口的 compareTo 去重.</p><p><strong>一个陷阱：</strong>存放之后更改属性不会改变该元素位置，因此，当再次存放与修改后一样的元素时，若计算出的 hashCode 与更改属性前的 hashCode 不一致，就会计算出新的位置，从而能加入进去</p> <img src="image-20220916194412765.png" alt="image-20220916194412765" style="zoom: 60%;" /><p><strong>Vector 和 ArrayList 的比较</strong></p> <img src="image-20220916194828683.png" alt="image-20220916194828683" style="zoom: 67%;" /><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h3><ul><li><p>编译时，检查添加元素的类型，提高了安全性</p></li><li><p>减少了类型转换的次数，提高效率</p><ul><li><p>不使用泛型：</p><p>Dog -加入-&gt; Object -取出-&gt; Dog  &#x2F;&#x2F;放入到 ArrayList 会先转成 Object，在取出时，还需要转回 Dog</p></li><li><p>使用泛型：</p><p>Dog -加入-&gt; Dog -取出-&gt; Dog  &#x2F;&#x2F;放入时和取出时，不需要进行类型转换，提高效率</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用传统的方法来解决</span><br><span class="hljs-comment">//        ArrayList arrayList = new ArrayList();</span><br><span class="hljs-comment">//        arrayList.add(new Dog(&quot;旺财&quot;, 10));</span><br><span class="hljs-comment">//        arrayList.add(new Dog(&quot;发财&quot;, 1));</span><br><span class="hljs-comment">//        arrayList.add(new Dog(&quot;小黄&quot;, 5));</span><br><span class="hljs-comment">//        //假如我们的程序员，不小心，添加了一只猫，遍历时就会出现ClassCastException异常</span><br><span class="hljs-comment">//        arrayList.add(new Cat(&quot;招财猫&quot;, 8));</span><br><span class="hljs-comment">//        //遍历</span><br><span class="hljs-comment">//        for (Object o : arrayList) &#123;</span><br><span class="hljs-comment">//            //向下转型Object -&gt;Dog</span><br><span class="hljs-comment">//            Dog dog = (Dog) o;</span><br><span class="hljs-comment">//            System.out.println(dog.getName() + &quot;-&quot; + dog.getAge());</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">// 使用泛型</span><br>        <span class="hljs-comment">//老韩解读</span><br>        <span class="hljs-comment">//1. 当我们 ArrayList&lt;Dog&gt; 表示存放到 ArrayList 集合中的元素是Dog类型 (细节后面说...)</span><br>        <span class="hljs-comment">//2. 如果编译器发现添加的类型，不满足要求，就会报错</span><br>        <span class="hljs-comment">//3. 在遍历的时候，可以直接取出 Dog 类型而不是 Object</span><br>        <span class="hljs-comment">//4. public class ArrayList&lt;E&gt; &#123;&#125; //E称为泛型,那么Dog-&gt;E</span><br>        ArrayList&lt;Dog&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;发财&quot;</span>, <span class="hljs-number">1</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>, <span class="hljs-number">5</span>));<br>        <span class="hljs-comment">//假如我们的程序员，不小心，添加了一只猫</span><br>        <span class="hljs-comment">//arrayList.add(new Cat(&quot;招财猫&quot;, 8));</span><br>        System.out.println(<span class="hljs-string">&quot;===使用泛型====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Dog dog : arrayList) &#123;<br>            System.out.println(dog.getName() + <span class="hljs-string">&quot;-&quot;</span> + dog.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.请编写程序，在ArrayList 中，添加3个Dog对象</span><br><span class="hljs-comment">2.Dog对象含有name 和 age, 并输出name 和 age (要求使用getXxx())</span><br><span class="hljs-comment">3.老师使用泛型来完成代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123; <span class="hljs-comment">//Cat类</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型的理解"><a href="#泛型的理解" class="headerlink" title="泛型的理解"></a>泛型的理解</h3><p>泛（广泛）型（类型）理解：泛型是一种可以表示数据类型的类型（把数据类型赋给泛型）</p><ul><li><p>泛型又称参数化类型，是 JDK5.0 出现的新特性，解决数据类型的安全性问题</p></li><li><p>在类声明或实例化时，只要指定好需要的具体的类型即可</p></li><li><p>Java 泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException 异常</p><p>同时，代码更加简洁健壮</p></li><li><p>泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//注意，特别强调：E具体的数据类型在定义Person对象的时候指定，即在编译期间，就确定E是什么类型</span><br>        Person&lt;String&gt; person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;String&gt;(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<br>        person.show(); <span class="hljs-comment">//String</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">你可以这样理解，上面的Person类</span><br><span class="hljs-comment">class Person &#123;</span><br><span class="hljs-comment">    String s ;</span><br><span class="hljs-comment">    //E表示 s的数据类型, 该数据类型在定义Person对象的时候指定,即在编译期间，就确定E是什么类型</span><br><span class="hljs-comment">    public Person(String s) &#123;//E也可以是参数类型</span><br><span class="hljs-comment">        this.s = s;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public String f() &#123;//返回类型使用E</span><br><span class="hljs-comment">        return s;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">         */</span><br>        Person&lt;Integer&gt; person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;Integer&gt;(<span class="hljs-number">100</span>);<br>        person2.show();<span class="hljs-comment">//Integer</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">class Person &#123;</span><br><span class="hljs-comment">    Integer s ;</span><br><span class="hljs-comment">    //E表示 s的数据类型, 该数据类型在定义Person对象的时候指定，即在编译期间，就确定E是什么类型</span><br><span class="hljs-comment">    public Person(Integer s) &#123;//E也可以是参数类型</span><br><span class="hljs-comment">        this.s = s;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public Integer f() &#123;//返回类型使用E</span><br><span class="hljs-comment">        return s;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，</span><br><span class="hljs-comment">// 或者是某个方法的返回值的类型，或者是参数类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;E&gt; &#123;<br>    E s ;<span class="hljs-comment">//E表示 s的数据类型, 该数据类型在定义Person对象的时候指定,即在编译期间，就确定E是什么类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(E s)</span> &#123;<span class="hljs-comment">//E也可以是参数类型</span><br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//返回类型使用E</span><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(s.getClass()); <span class="hljs-comment">//显示s的运行类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="泛型的语法"><a href="#泛型的语法" class="headerlink" title="泛型的语法"></a>泛型的语法</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>interface 接口&lt;T&gt;{}  和  class 类&lt;K, V&gt;{}</p><p>说明：</p><ul><li>其中，T、K、V 不代表值，而是表示类型</li><li>任意字母都可以。常用 T 表示（Type的缩写）</li></ul><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>要在类名后面指定类型参数的值（类型）。如：</p><ul><li>List&lt;String&gt; strList &#x3D; new ArrayList&lt;String&gt;();  </li><li>Iterator&lt;Customer&gt; iterator &#x3D; customers.iterator();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用泛型方式给HashSet 放入3个学生对象</span><br>        HashSet&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Student&gt;();<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">28</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">19</span>));<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span> (Student student : students) &#123;<br>            System.out.println(student);<br>        &#125;<br><br>        <span class="hljs-comment">//使用泛型方式给HashMap 放入3个学生对象</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            public class HashMap&lt;K,V&gt;  &#123;&#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//K -&gt; String V-&gt;Student</span><br>        HashMap&lt;String, Student&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Student&gt;();<br>        hm.put(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">38</span>));<br>        hm.put(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">48</span>));<br>        hm.put(<span class="hljs-string">&quot;hsp&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;hsp&quot;</span>, <span class="hljs-number">28</span>));<br>        <span class="hljs-comment">//迭代器 EntrySet</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="hljs-comment">            Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="hljs-comment">            return (es = entrySet) == null ? (entrySet = new EntrySet()) : es;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//先取出 Map.Entry</span><br>        Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = hm.entrySet();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="hljs-comment">                return new EntryIterator();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        Iterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = entries.iterator();<br>        System.out.println(<span class="hljs-string">&quot;==============================&quot;</span>);<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Map.Entry&lt;String, Student&gt; next =  iterator.next();<br>            System.out.println(next.getKey() + <span class="hljs-string">&quot;-&quot;</span> + next.getValue());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建  3个学生对象</span><br><span class="hljs-comment"> * 放入到HashSet中学生对象, 使用.</span><br><span class="hljs-comment"> * 放入到  HashMap中，要求 Key 是 String name, Value 就是 学生对象</span><br><span class="hljs-comment"> * 使用两种方式遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型注意事项与细节"><a href="#泛型注意事项与细节" class="headerlink" title="泛型注意事项与细节"></a>泛型注意事项与细节</h3><ul><li><p>1）interface List&lt;T&gt;{}    、  public class HashSet&lt;E&gt;{}    等等</p><p><strong>说明：T、E 只能是引用类型</strong></p><p>List&lt;Integer&gt; list &#x3D; new ArrayList&lt;Integer&gt;();  &#x2F;&#x2F;OK</p><p>List&lt;int&gt; list &#x3D; new ArrayList&lt;int&gt;();  &#x2F;&#x2F;错误</p></li><li><p>2）在给泛型指定具体类型后，<strong>可以传入 该类型 或者 子类类型</strong></p></li><li><p>3）泛型使用形式</p><p>List&lt;Integer&gt; list &#x3D; new ArrayList&lt;Integer&gt;();</p><p>List&lt;Integer&gt; list &#x3D; new ArrayList&lt;&gt;();（推荐）[说明：编译器会进行类型推断]</p><p>如果这样写 List list &#x3D; new ArrayList();  &#x2F;&#x2F;默认给它的泛型是 [&lt;E&gt; E 就是 Object ]</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.给泛型指向数据类型是，要求是引用类型，不能是基本数据类型</span><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(); <span class="hljs-comment">//OK</span><br>        <span class="hljs-comment">//List&lt;int&gt; list2 = new ArrayList&lt;int&gt;();//错误</span><br>        <span class="hljs-comment">//2. 说明</span><br>        <span class="hljs-comment">//因为 E 指定了 A 类型, 构造器传入了 new A()</span><br>        <span class="hljs-comment">//在给泛型指定具体类型后，可以传入该类型或者其子类类型</span><br>        Pig&lt;A&gt; aPig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>&lt;A&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<br>        aPig.f();<br>        Pig&lt;A&gt; aPig2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>&lt;A&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br>        aPig2.f();<br><br>        <span class="hljs-comment">//3. 泛型的使用形式</span><br>        ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        List&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">//在实际开发中，我们往往简写</span><br>        <span class="hljs-comment">//编译器会进行类型推断, 老师推荐使用下面写法</span><br>        ArrayList&lt;Integer&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Integer&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Pig&gt; pigs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//4. 如果定义了泛型但不传入，那么泛型默认是 Object</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//等价 ArrayList&lt;Object&gt; arrayList = new ArrayList&lt;Object&gt;();</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            public boolean add(Object e) &#123;</span><br><span class="hljs-comment">                ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="hljs-comment">                elementData[size++] = e;</span><br><span class="hljs-comment">                return true;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            class Tiger &#123;//类</span><br><span class="hljs-comment">                Object e;</span><br><span class="hljs-comment">                public Tiger() &#123;&#125;</span><br><span class="hljs-comment">                public Tiger(Object e) &#123;this.e = e;&#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;E&gt; &#123;<span class="hljs-comment">//类</span><br>    E e;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-built_in">this</span>.e = e;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span>&lt;E&gt; &#123;<span class="hljs-comment">//</span><br>    E e;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pig</span><span class="hljs-params">(E e)</span> &#123;<span class="hljs-built_in">this</span>.e = e;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(e.getClass()); <span class="hljs-comment">//运行类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义Employee类</span><br><span class="hljs-comment"> * 1) 该类包含：private成员变量name,sal,birthday，其中 birthday 为 MyDate 类的对象；</span><br><span class="hljs-comment"> * 2) 为每一个属性定义 getter, setter 方法；</span><br><span class="hljs-comment"> * 3) 重写 toString 方法输出 name, sal, birthday</span><br><span class="hljs-comment"> * 4) MyDate类包含: private成员变量month,day,year；并为每一个属性定义 getter, setter 方法；</span><br><span class="hljs-comment"> * 5) 创建该类的 3 个对象，并把这些对象放入 ArrayList 集合中（ArrayList 需使用泛型来定义），对集合中的元素进行排序，并遍历输出：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 排序方式： 调用ArrayList 的 sort 方法 ,</span><br><span class="hljs-comment"> * 传入 Comparator对象[使用泛型]，先按照name排序，如果name相同，则按生日日期的先后排序。【即：定制排序】</span><br><span class="hljs-comment"> * 有一定难度 15min , 比较经典 泛型使用案例 GenericExercise02.java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Employee&gt; employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">20000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1980</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>)));<br>        employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">12000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2001</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>)));<br>        employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1980</span>,<span class="hljs-number">12</span>,<span class="hljs-number">10</span>)));<br>        System.out.println(<span class="hljs-string">&quot;employees=&quot;</span> + employees);<br><br>        employees.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee emp1, Employee emp2)</span> &#123;<br>                <span class="hljs-comment">//先按照name排序，如果name相同，则按生日日期的先后排序。【即：定制排序】</span><br>                <span class="hljs-comment">//先对传入的参数进行验证</span><br>                <span class="hljs-keyword">if</span>(!(emp1 <span class="hljs-keyword">instanceof</span>  Employee &amp;&amp; emp2 <span class="hljs-keyword">instanceof</span> Employee)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;类型不正确..&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-comment">//比较name</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> emp1.getName().compareTo(emp2.getName());<br>                <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> i;<br>                &#125;<br>                <span class="hljs-comment">//下面是对birthday的比较，因此，我们最好把这个比较，放在MyDate类完成</span><br>                <span class="hljs-comment">//封装后，将来可维护性和复用性，就大大增强.</span><br>                <span class="hljs-keyword">return</span> emp1.getBirthday().compareTo(emp2.getBirthday());<br>            &#125;<br>        &#125;);<br><br>        System.out.println(<span class="hljs-string">&quot;==对雇员进行排序==&quot;</span>);<br>        System.out.println(employees);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> MyDate birthday;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sal;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSal</span><span class="hljs-params">(<span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br>    <span class="hljs-keyword">public</span> MyDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\nEmployee&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sal=&quot;</span> + sal +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;MyDate&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> year;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<span class="hljs-built_in">this</span>.year = year;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> month;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<span class="hljs-built_in">this</span>.month = month;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> day;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDay</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span> &#123;<span class="hljs-built_in">this</span>.day = day;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyDate&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;year=&quot;</span> + year +<br>                <span class="hljs-string">&quot;, month=&quot;</span> + month +<br>                <span class="hljs-string">&quot;, day=&quot;</span> + day +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(MyDate o)</span> &#123; <span class="hljs-comment">//把对year-month-day比较放在这里</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">yearMinus</span> <span class="hljs-operator">=</span> year - o.getYear();<br>        <span class="hljs-keyword">if</span>(yearMinus != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> yearMinus;<br>        &#125;<br>        <span class="hljs-comment">//如果year相同，就比较month</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthMinus</span> <span class="hljs-operator">=</span> month - o.getMonth();<br>        <span class="hljs-keyword">if</span>(monthMinus != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> monthMinus;<br>        &#125;<br>        <span class="hljs-comment">//如果year 和 month</span><br>        <span class="hljs-keyword">return</span> day - o.getDay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><h4 id="自定义泛型类-难度"><a href="#自定义泛型类-难度" class="headerlink" title="自定义泛型类 (难度)"></a>自定义泛型类 (难度)</h4><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名&lt;T, R...&gt; &#123;  <span class="hljs-comment">//...表示可以有多个泛型</span><br><span class="hljs-comment">//成员</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意细节</strong></p><ul><li>普通成员可以使用泛型（属性、方法）</li><li>使用泛型的数组，不能初始化</li><li>静态方法中不能使用类的泛型</li><li>泛型类的类型，是在创建对象时确定的（因为创建对象时，需要指定确定类型）</li><li>如果在创建对象时，没有指定类型，默认为 Object</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomGeneric_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//练习</span><br>        <span class="hljs-comment">//T=Double, R=String, M=Integer</span><br>        Tiger&lt;Double,String,Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>&lt;&gt;(<span class="hljs-string">&quot;john&quot;</span>);<br>        g.setT(<span class="hljs-number">10.9</span>); <span class="hljs-comment">//OK</span><br>        <span class="hljs-comment">//g.setT(&quot;yy&quot;); //错误，类型不对</span><br>        System.out.println(g);<br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>(<span class="hljs-string">&quot;john~~&quot;</span>);<span class="hljs-comment">//OK T=Object R=Object M=Object</span><br>        g2.setT(<span class="hljs-string">&quot;yy&quot;</span>); <span class="hljs-comment">//OK ,因为 T=Object &quot;yy&quot;=String 是Object子类</span><br>        System.out.println(<span class="hljs-string">&quot;g2=&quot;</span> + g2);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//解读</span><br><span class="hljs-comment">//1. Tiger 后面泛型，所以我们把 Tiger 就称为自定义泛型类</span><br><span class="hljs-comment">//2, T, R, M 泛型的标识符, 一般是单个大写字母</span><br><span class="hljs-comment">//3. 泛型标识符可以有多个.</span><br><span class="hljs-comment">//4. 普通成员可以使用泛型 (属性、方法)</span><br><span class="hljs-comment">//5. 使用泛型的数组，不能初始化</span><br><span class="hljs-comment">//6. 静态方法中不能使用类的泛型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T, R, M&gt; &#123;<br>    String name;<br>    R r; <span class="hljs-comment">//属性使用到泛型</span><br>    M m;<br>    T t;<br>    <span class="hljs-comment">//因为数组在new 不能确定T的类型，就无法在内存开空间</span><br>    T[] ts;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(R r, M m, T t)</span> &#123;<span class="hljs-comment">//构造器使用泛型</span><br>        <span class="hljs-built_in">this</span>.r = r;<br>        <span class="hljs-built_in">this</span>.m = m;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name, R r, M m, T t)</span> &#123;<span class="hljs-comment">//构造器使用泛型</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.r = r;<br>        <span class="hljs-built_in">this</span>.m = m;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br><br>    <span class="hljs-comment">//因为静态是和类相关的，在类加载时，对象还没有创建</span><br>    <span class="hljs-comment">//所以，如果静态方法和静态属性使用了泛型，JVM就无法完成初始化</span><br><span class="hljs-comment">//    static R r2;  //静态属性</span><br><span class="hljs-comment">//    public static void m1(M m) &#123;  //静态方法</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//方法使用泛型</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-comment">//返回类型可以使用泛型.</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">getR</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> r;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setR</span><span class="hljs-params">(R r)</span> &#123;<span class="hljs-built_in">this</span>.r = r;&#125;<br>    <span class="hljs-keyword">public</span> M <span class="hljs-title function_">getM</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> m;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setM</span><span class="hljs-params">(M m)</span> &#123;<span class="hljs-built_in">this</span>.m = m;&#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> t;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<span class="hljs-built_in">this</span>.t = t;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tiger&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, r=&quot;</span> + r +<br>                <span class="hljs-string">&quot;, m=&quot;</span> + m +<br>                <span class="hljs-string">&quot;, t=&quot;</span> + t +<br>                <span class="hljs-string">&quot;, ts=&quot;</span> + Arrays.toString(ts) +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h4><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&lt;T, R...&gt; &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意细节</strong></p><ul><li>接口中，静态成员不能使用泛型（注意：在接口中，属性都是 public static final 修饰的）</li><li>泛型接口的类型，在 继承接口时 或者 实现接口时 确定</li><li>没有指定类型，默认为 Object</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomInterfaceGeneric</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  泛型接口使用的说明</span><br><span class="hljs-comment"> *  1. 接口中，静态成员也不能使用泛型</span><br><span class="hljs-comment"> *  2. 泛型接口的类型, 在继承接口或者实现接口时确定</span><br><span class="hljs-comment"> *  3. 没有指定类型，默认为Object</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUsb</span>&lt;U, R&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//U name; 不能这样使用</span><br>    <span class="hljs-comment">//普通方法中，可以使用接口泛型</span><br>    R <span class="hljs-title function_">get</span><span class="hljs-params">(U u)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(R r)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(R r1, R r2, U u1, U u2)</span>;<br>    <span class="hljs-comment">//在jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span><br>    <span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在继承接口 指定泛型接口的类型</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUsb</span>&lt;String, Double&gt; &#123;<br>&#125;<br><span class="hljs-comment">//当我们去实现IA接口时，因为IA在继承IUsu 接口时，指定了U 为String R为Double</span><br><span class="hljs-comment">//，在实现IUsu接口的方法时，使用String替换U, 是Double替换R</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现接口时，直接指定泛型接口的类型</span><br><span class="hljs-comment">//给U 指定Integer 给 R 指定了 Float</span><br><span class="hljs-comment">//所以，当我们实现IUsb方法时，会使用Integer替换U, 使用Float替换R</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&lt;Integer, Float&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">get</span><span class="hljs-params">(Integer integer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Float aFloat)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//没有指定类型，默认为Object</span><br><span class="hljs-comment">//建议直接写成 IUsb&lt;Object,Object&gt;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span> &#123; <span class="hljs-comment">//等价 class CC implements IUsb&lt;Object,Object&gt; &#123;</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Object o)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h4><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符&lt;T, R...&gt; 返回类型 方法名(参数列表)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意细节</strong></p><ul><li>泛型方法，可以定义在普通类中，也可以定义在泛型类中</li><li>当泛型方法被调用时，类型需要确定（直接传值就行，编译器会自动确定类型）</li><li>public void eat(E, e){},  修饰符后没有&lt;T, R&gt;，eat 方法不是泛型方法，而是使用了泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomMethodGeneric</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        car.fly(<span class="hljs-string">&quot;宝马&quot;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//当调用方法时，传入参数，编译器，就会确定类型</span><br>        System.out.println(<span class="hljs-string">&quot;=======&quot;</span>);<br>        car.fly(<span class="hljs-number">300</span>, <span class="hljs-number">100.1</span>); <span class="hljs-comment">//当调用方法时，传入参数，编译器，就会确定类型</span><br>        System.out.println(<span class="hljs-string">&quot;=======&quot;</span>);<br>        <span class="hljs-comment">//测试</span><br>        <span class="hljs-comment">//T-&gt;String, R-&gt; ArrayList</span><br>        Fish&lt;String, ArrayList&gt; fish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>&lt;&gt;();<br>        fish.hello(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(), <span class="hljs-number">11.3f</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//泛型方法，可以定义在普通类中, 也可以定义在泛型类中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<span class="hljs-comment">//普通类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//普通方法</span><br>    &#125;<br>    <span class="hljs-comment">//说明 泛型方法</span><br>    <span class="hljs-comment">//1. &lt;T,R&gt; 就是泛型</span><br>    <span class="hljs-comment">//2. 是提供给 fly使用的</span><br>    <span class="hljs-keyword">public</span> &lt;T, R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t, R r)</span> &#123;<span class="hljs-comment">//泛型方法</span><br>        System.out.println(t.getClass());<span class="hljs-comment">//String</span><br>        System.out.println(r.getClass());<span class="hljs-comment">//Integer</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>&lt;T, R&gt; &#123;<span class="hljs-comment">//泛型类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//普通方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span>&lt;U,M&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(U u, M m)</span> &#123;<span class="hljs-comment">//泛型方法</span><br><br>    &#125;<br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1. 下面hi方法不是泛型方法</span><br>    <span class="hljs-comment">//2. 是hi方法使用了类声明的 泛型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(T t)</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span><br>    <span class="hljs-keyword">public</span>&lt;K&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(R r, K k)</span> &#123;<br>        System.out.println(r.getClass());<span class="hljs-comment">//ArrayList</span><br>        System.out.println(k.getClass());<span class="hljs-comment">//Float</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ul><li><p>泛型不具备继承性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();  <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li><li><p>&lt;?&gt;：支持任意泛型类型</p></li><li><p>&lt;? extends A&gt;：支持 A类 以及 A类的子类，规定了泛型的上限</p></li><li><p>&lt;? super A&gt;：支持 A类 以及 A类的父类（不限于直接父类），规定了泛型的下限</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExtends</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类的多态</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;xx&quot;</span>);<br>        <span class="hljs-comment">//泛型没有继承性</span><br>        <span class="hljs-comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span><br><br>        <span class="hljs-comment">//举例说明下面三个方法的使用</span><br>        List&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;AA&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;BB&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;CC&gt; list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span><br>        printCollection1(list1);<br>        printCollection1(list2);<br>        printCollection1(list3);<br>        printCollection1(list4);<br>        printCollection1(list5);<br><br>        <span class="hljs-comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span><br>        <span class="hljs-comment">//printCollection2(list1);//×</span><br>        <span class="hljs-comment">//printCollection2(list2);//×</span><br>        printCollection2(list3);<span class="hljs-comment">//√</span><br>        printCollection2(list4);<span class="hljs-comment">//√</span><br>        printCollection2(list5);<span class="hljs-comment">//√</span><br><br>        <span class="hljs-comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span><br>        printCollection3(list1);<span class="hljs-comment">//√</span><br>        <span class="hljs-comment">//printCollection3(list2);//×</span><br>        printCollection3(list3);<span class="hljs-comment">//√</span><br>        <span class="hljs-comment">//printCollection3(list4);//×</span><br>        <span class="hljs-comment">//printCollection3(list5);//×</span><br><br>        <span class="hljs-comment">//冒泡排序</span><br>        <span class="hljs-comment">//插入排序</span><br>        <span class="hljs-comment">//....</span><br>    &#125;<br>    <span class="hljs-comment">// ? extends AA 表示 上限，可以接受 AA或者AA子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? extends AA&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection1</span><span class="hljs-params">(List&lt;?&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123; <span class="hljs-comment">// 通配符，取出时，就是Object</span><br>            System.out.println(object);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ? super 子类类名AA:支持AA类以及AA类的父类，不限于直接父类，</span><br>    <span class="hljs-comment">//规定了泛型的下限</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection3</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> AA&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><ul><li><p>一个类有很多功能代码需要测试，为了测试，就需要写入到 main 方法中</p></li><li><p>如果有多个功能代码测试，就需要来回注销，切换很麻烦</p></li><li><p>如果可以直接运行一个方法，就方便很多，并且可以给出相关信息，就好了</p></li><li><p>JUnit 是一个 Java 语言的单元测试框架</p></li><li><p>多数 Java 的开发环境都已经继承了 JUnit 作为单元测试的工具</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JUnit_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//传统方式</span><br>        <span class="hljs-comment">//new JUnit_().m1();</span><br>        <span class="hljs-comment">//new JUnit_().m2();</span><br>    &#125;<br>    <span class="hljs-comment">// alt + Enter</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m1方法被调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m2方法被调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m3方法被调用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><p>程序：是为了完成特定任务、用某种语言编写的一组指令的集合（简单来说，就是我们写的代码）</p><p>进程：（1）进程是指运行中的程序，比如我们使用QQ，就启动了一个进程，操作系统就会为该进程分配内存空间；当我们使用迅雷，又启动了一个进程，操作系统将为迅雷分配新的内存空间  （2）进程是程序的一次执行过程，或者是正在运行的一个程序；是动态过程：有它自身的产生、存在和消亡的过程</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li><p>线程是由进程创建的，是进程的一个实体</p></li><li><p>一个进程可以拥有多个线程</p></li><li><p>单线程：同一时刻，只允许执行一个线程</p></li><li><p>多线程：同一时刻，可以执行多个线程</p><p>比如：一个qq进程，可以同时打开多个聊天窗口；一个迅雷进程，可以同时下载多个文件</p></li><li><p>并发：同一时刻，多个任务交替执行，造成 “貌似同时” 的错觉。简单说，单核 cpu 实现的多任务就是并发</p></li><li><p>并行：同一时刻，多个任务同时执行。多核 cpu 可以实现并行。</p></li><li><p>并发 与 并行 可以同时存在</p></li></ul><h3 id="线程基本使用"><a href="#线程基本使用" class="headerlink" title="线程基本使用"></a>线程基本使用</h3><h4 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h4><p>在 java 中线程使用有两种方法</p><ul><li>继承 Thread 类，重写 run 方法</li><li>实现 Runnable 接口，重写 run 方法</li></ul> <img src="image-20220918091701532.png" alt="image-20220918091701532" style="zoom:80%;" /><h4 id="线程应用案例1-继承-Thread-类"><a href="#线程应用案例1-继承-Thread-类" class="headerlink" title="线程应用案例1-继承 Thread 类"></a>线程应用案例1-继承 Thread 类</h4><p><strong>为什么启动线程是调用 .start() 而不是 .run()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-comment">//创建Cat对象，可以当做线程使用</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.start(); <span class="hljs-comment">//启动线程-&gt; 最终会执行cat的run方法</span><br>        <span class="hljs-comment">// .start()源码</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            (1)</span><br><span class="hljs-comment">            public synchronized void start() &#123;</span><br><span class="hljs-comment">                start0();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            (2)</span><br><span class="hljs-comment">            //start0() 是本地方法，是JVM调用, 底层是c/c++实现</span><br><span class="hljs-comment">            //真正实现多线程的效果，是start0(), 而不是 run</span><br><span class="hljs-comment">            private native void start0();</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//cat.run();</span><br>        <span class="hljs-comment">// run方法就是一个普通的方法, 没有真正的启动一个线程</span><br>        <span class="hljs-comment">// 此时的运行它的线程仍然是当前线程（main）</span><br>        <span class="hljs-comment">// 就会把run方法执行完毕，才继续向下执行</span><br><br>        <span class="hljs-comment">// .start()</span><br>        <span class="hljs-comment">// 说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span><br>        <span class="hljs-comment">// 这时 主线程和子线程是交替执行..</span><br>        System.out.println(<span class="hljs-string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName());<span class="hljs-comment">//名字main</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程 i=&quot;</span> + i);<br>            <span class="hljs-comment">//让主线程休眠</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>        <span class="hljs-comment">//在多线程里，主线程结束了不会影响子线程的运行</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//老韩说明</span><br><span class="hljs-comment">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span><br><span class="hljs-comment">//2. 我们会重写 run方法，写上自己的业务代码</span><br><span class="hljs-comment">//3. run Thread 类 实现了 Runnable 接口的run方法</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    @Override</span><br><span class="hljs-comment">    public void run() &#123;</span><br><span class="hljs-comment">        if (target != null) &#123;</span><br><span class="hljs-comment">            target.run();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//重写run方法，写上自己的业务逻辑</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//该线程每隔1秒。在控制台输出 “喵喵, 我是小猫咪”</span><br>            System.out.println(<span class="hljs-string">&quot;喵喵, 我是小猫咪&quot;</span> + (++times) + <span class="hljs-string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-comment">//让该线程休眠1秒 ctrl+alt+t</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(times == <span class="hljs-number">80</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//当times 到80, 退出while, 这时线程也就退出..</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20220918101953780.png" alt="image-20220918101953780" style="zoom: 67%;" /><h4 id="线程应用案例2-实现-Runnable-接口"><a href="#线程应用案例2-实现-Runnable-接口" class="headerlink" title="线程应用案例2-实现 Runnable 接口"></a>线程应用案例2-实现 Runnable 接口</h4><ul><li>java 是单线程的，在某些情况下一个类可能已经继承了某个父类，这时再用继承 Thread 类方法来创建线程显然是不可能了</li><li>java 设计者们提供了另外一个方式创建线程，就是通过实现 Runnable 接口来创建线程</li></ul><p><strong>代理模式</strong></p><p>实现 Runnable 接口的类不能直接调用 .start() 方法启动线程，而应该用 Thread 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dog);<br>thread.start();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">//dog.start(); // 这里不能调用start</span><br>        <span class="hljs-comment">//创建Thread对象,把dog对象(实现Runnable接口的对象),放入Thread</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dog);<br>        thread.start();<br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<span class="hljs-comment">//实现了 Runnable</span><br>        <span class="hljs-type">ThreadProxy</span> <span class="hljs-variable">threadProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadProxy</span>(tiger);<br>        threadProxy.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;老虎嗷嗷叫....&quot;</span>+ (++count) + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">10</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//静态代理模式讲解：（模仿）</span><br><span class="hljs-comment">//线程代理类 , 模拟了一个极简的Thread类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<span class="hljs-comment">//你可以把该类当做Thread类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//属性，类型是 Runnable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;<br>            target.run();<span class="hljs-comment">//动态绑定（运行类型Tiger）</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        start0();<span class="hljs-comment">//这个方法是真正实现多线程方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span> &#123;<br>        run();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123; <span class="hljs-comment">//通过实现Runnable接口，开发线程</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//普通方法，不会启动线程</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());<br>            <span class="hljs-comment">//休眠1秒</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">10</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="继承Thread-与-实现Runnable-的区别"><a href="#继承Thread-与-实现Runnable-的区别" class="headerlink" title="继承Thread 与 实现Runnable 的区别"></a>继承Thread 与 实现Runnable 的区别</h4><ul><li><p>从 java 的设计来看，通过继承 Thread 或者实现 Runnable 接口来创建线程本质上没有区别，从jdk帮助文档我们可以看到 Thread 类本身就实现了 Runnable 接口</p></li><li><p>实现 Runnable 接口的方式 更加适合多个线程共享一个资源(同时执行一个对象)的情况，并且避免了单继承的限制，建议使用 Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;===使用实现接口方式来售票=====&quot;</span>);<br><span class="hljs-type">SellTicket02</span> <span class="hljs-variable">sellTicket02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket02</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket02).start();<span class="hljs-comment">//第1个线程-窗口</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket02).start();<span class="hljs-comment">//第2个线程-窗口</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket02).start();<span class="hljs-comment">//第3个线程-窗口</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="线程使用应用案例-多线程执行"><a href="#线程使用应用案例-多线程执行" class="headerlink" title="线程使用应用案例-多线程执行"></a>线程使用应用案例-多线程执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">T1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T1</span>();<br>        <span class="hljs-type">T2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>        thread1.start();<span class="hljs-comment">//启动第1个线程</span><br>        thread2.start();<span class="hljs-comment">//启动第2个线程</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//每隔1秒输出 “hello,world”,输出10次</span><br>            System.out.println(<span class="hljs-string">&quot;hello,world &quot;</span> + (++count));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">60</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//每隔1秒输出 “hi”,输出5次</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + (++count));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><h4 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h4><ul><li>当线程完成任务后，会自动退出</li><li>还可以通过使用变量来控制 run 方法退出的方式停止线程，即通知方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExit_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t1.start();<br>        <span class="hljs-comment">//如果希望main线程去控制t1 线程的终止, 必须可以修改 循环判断条件（loop）</span><br>        <span class="hljs-comment">//让t1 退出run方法，从而终止 t1线程 -&gt; 通知方式</span><br><br>        <span class="hljs-comment">//让主线程休眠 10 秒，再通知 t1线程退出</span><br>        System.out.println(<span class="hljs-string">&quot;main线程休眠10s...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>        t1.setLoop(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//设置一个控制变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">50</span>);<span class="hljs-comment">// 让当前线程休眠50ms</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;T 运行中....&quot;</span> + (++count));<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loop = loop;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><p>setName  &#x2F;&#x2F;设置线程名称，使之与参数name相同</p></li><li><p>getName  &#x2F;&#x2F;返回该线程的名称</p></li><li><p>start  &#x2F;&#x2F;使该线程开始执行，Java 虚拟机底层调用该线程的 start0() 方法</p><p>start() 底层会创建新的线程来调用 run()，而 run() 就是一个简单的方法调用，不会启动新的线程</p></li><li><p>run  &#x2F;&#x2F;调用线程对象 run() 方法</p></li><li><p>setPriority  &#x2F;&#x2F;更改线程的优先级</p></li><li><p>getPriority  &#x2F;&#x2F;获取线程的优先级 </p><p>线程优先级的范围： MAX_PRIORITY&#x3D;10;   MIN_PRIORITY&#x3D;1;   NORM_PRIORITY&#x3D;5;</p></li><li><p>sleep  &#x2F;&#x2F;线程的静态方法，在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</p></li><li><p>interrupt  &#x2F;&#x2F;中断线程休眠</p><p>interrupt 中断线程休眠，但并没有结束线程，所以一般用于中断正在休眠的线程</p><p>比如：正有一个线程t1在休眠，如果调用t1.interrupt()中断休眠，就会catch到一个异常（InterruptedException异常）</p></li><li><p>yield：线程的礼让。让出 cpu，让其他线程执行，但礼让的资源不确定，所以也不一定礼让成功</p></li><li><p>join：线程的加入。加入的线程一旦插队成功，则肯定先执行完加入的线程所有的任务</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//测试相关的方法</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t.setName(<span class="hljs-string">&quot;老韩&quot;</span>);<br>        t.setPriority(Thread.MIN_PRIORITY);<span class="hljs-comment">//1</span><br>        t.start();<span class="hljs-comment">//启动子线程</span><br>        <span class="hljs-comment">//主线程打印5 hi ,然后我就中断 子线程的休眠</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + i);<br>        &#125;<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 线程的优先级 =&quot;</span> + t.getPriority());<span class="hljs-comment">//1</span><br>        t.interrupt();<span class="hljs-comment">//当执行到这里，就会中断 t线程的休眠.</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123; <span class="hljs-comment">//自定义的线程类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-comment">//Thread.currentThread().getName() 获取当前线程的名称</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;  吃包子~~~~&quot;</span> + i);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中~~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">20000</span>);<span class="hljs-comment">//20秒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-comment">//当该线程执行到一个interrupt 方法时，就会catch到一个异常, 可以加入自己的业务代码</span><br>                <span class="hljs-comment">//InterruptedException 是捕获到一个中断异常.</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;被 interrupt了&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//.join()与.yield()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">T2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>();<br>        t2.start();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程(小弟) 吃了 &quot;</span> + i  + <span class="hljs-string">&quot; 包子&quot;</span>);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;主线程(小弟) 让 子线程(老大) 先吃..&quot;</span>);<br>                <span class="hljs-comment">//join, 线程插队</span><br>                t2.join();<span class="hljs-comment">// 这里相当于让t2 线程先执行完毕</span><br><span class="hljs-comment">//                Thread.yield();//礼让，不一定成功..</span><br>                System.out.println(<span class="hljs-string">&quot;线程(老大) 吃完了 主线程(小弟) 接着吃..&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠1秒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;子线程(老大) 吃了 &quot;</span> + i +  <span class="hljs-string">&quot; 包子&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h4><ul><li><p>用户线程：也叫工作线程，当线程的任务执行完后或以通知方式结束</p></li><li><p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</p></li><li><p>常见的守护线程：垃圾回收机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//语法：</span><br>线程对象.setDaemon(<span class="hljs-literal">true</span>);<br>线程对象.start();<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyDaemonThread</span> <span class="hljs-variable">myDaemonThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDaemonThread</span>();<br>        <span class="hljs-comment">// 如果我们希望当main线程结束后，子线程自动结束，</span><br>        <span class="hljs-comment">// 那么只需将子线程设为守护线程即可</span><br>        myDaemonThread.setDaemon(<span class="hljs-literal">true</span>);<br>        myDaemonThread.start();<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//main线程</span><br>            System.out.println(<span class="hljs-string">&quot;宝强在辛苦的工作...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;宝强回家了...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDaemonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<span class="hljs-comment">//无限循环</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠1000毫秒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;马蓉和宋喆快乐聊天，哈哈哈~~~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3> <img src="image-20220918154416827.png" alt="image-20220918154416827" style="zoom: 80%;" /> <img src="image-20220918154841698.png" alt="image-20220918154841698" style="zoom:55%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 写程序查看线程状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadState_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>        t.start();<br>        <span class="hljs-keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125;<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h3><h4 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h4><ul><li>在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性</li><li>也可以这样理解：线程同步，即当有一个线程在对内存进行操作时，其它线程都不可以对这个内存地址进行操作，直到该线程完成操作，其它线程才能对该线程内存地址进行操作</li></ul><h4 id="同步具体方法-Synchronized"><a href="#同步具体方法-Synchronized" class="headerlink" title="同步具体方法-Synchronized"></a>同步具体方法-Synchronized</h4><p>Synchronized 是非公平锁</p><ul><li><p>同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(对象)&#123;  <span class="hljs-comment">// 得到对象的锁，才能操作同步代码</span><br>    <span class="hljs-comment">//需要被同步代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>synchronized 还可以放在方法声明中，表示整个方法为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ul><li><p>Java 语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性</p></li><li><p>每个对象都对应于一个可称为 “互斥锁” 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</p></li><li><p>关键字 synchronized 来与对象的互斥锁联系。当某个对象用 synchronized 修饰时，表明该对象在任一时刻只能由一个线程访问</p></li><li><p>同步的局限性：导致程序的执行效率降低</p></li><li><p><strong>同步方法（非静态的）的锁默认是 this，也可以是其它任意对象（但要求是同一个对象）</strong></p></li><li><p><strong>同步方法（静态的）的锁默认为当前类本身（类名.class）。（静态方法没有 this）</strong></p></li><li><p>实现的落地步骤</p><ul><li><p>需要先分析上锁的代码</p></li><li><p>选择同步代码块或同步方法（推荐使用同步代码块）</p></li><li><p>要求多个线程的锁对象为同一个（注意 this 中存在的陷阱）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意 this 中存在的陷阱</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">synchronized</span>&#123;&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>().start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>().start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>().start();<br><span class="hljs-comment">//此时三个线程的this不相同</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTicket03</span> <span class="hljs-variable">sellTicket03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket03</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket03).start();<span class="hljs-comment">//第 1 个线程-窗口</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket03).start();<span class="hljs-comment">//第 2 个线程-窗口</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket03).start();<span class="hljs-comment">//第 3 个线程-窗口</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现接口方式, 使用 synchronized 实现线程同步</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享 ticketNum</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//控制 run 方法变量</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (SellTicket03.class) &#123;<br>            System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//同步方法, 在同一时刻， 只能有一个线程来执行 sell 方法</span><br>    <span class="hljs-keyword">if</span> (ticketNum &lt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>            loop = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 售出一张票&quot;</span><br>                           + <span class="hljs-string">&quot; 剩余票数=&quot;</span> + (--ticketNum));<span class="hljs-comment">//1 - 0 - -1 - -2</span><br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">50</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>            sell();<span class="hljs-comment">//sell 方法是一个同步方法</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h3><p><strong>基本介绍：</strong>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁（一定要避免死锁的发生）</p><p>一个通俗的例子：</p><p>妈妈：你先完成作业，我才让你玩手机</p><p>小明：你先让我玩手机，我才完成作业</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//模拟死锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//模拟死锁现象</span><br>        <span class="hljs-type">DeadLockDemo</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">true</span>);<br>        A.setName(<span class="hljs-string">&quot;A线程&quot;</span>);<br>        <span class="hljs-type">DeadLockDemo</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">false</span>);<br>        B.setName(<span class="hljs-string">&quot;B线程&quot;</span>);<br>        A.start();<br>        B.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">// 保证多线程，共享一个对象,这里使用static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-type">boolean</span> flag;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadLockDemo</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//下面业务逻辑的分析</span><br>        <span class="hljs-comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span><br>        <span class="hljs-comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span><br>        <span class="hljs-comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span><br>        <span class="hljs-comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">synchronized</span> (o1) &#123;<span class="hljs-comment">//对象互斥锁, 下面就是同步代码</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 进入o1_1&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (o2) &#123; <span class="hljs-comment">// 这里获得li对象的监视权</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 进入o1_2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (o2) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 进入o2_1&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (o1) &#123; <span class="hljs-comment">// 这里获得li对象的监视权</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 进入2_2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><h4 id="会释放锁的操作"><a href="#会释放锁的操作" class="headerlink" title="会释放锁的操作"></a>会释放锁的操作</h4><ul><li>当前线程的同步代码块、同步方法执行结束</li><li>当前线程在同步代码块、同步方法中遇到 break、return</li><li>当前线程在同步代码块、同步方法中出现了未处理的 Error 或 Exception，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的 wait() 方法，当前线程暂停，并释放锁</li></ul><h4 id="不会释放锁的操作"><a href="#不会释放锁的操作" class="headerlink" title="不会释放锁的操作"></a>不会释放锁的操作</h4><ul><li>线程执行同步代码块或同步方法时，程序调用了 Thread.sleep()、Thread.yield() 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其它线程调用了该线程的 suspend() 方法将该线程挂起，该线程不会释放锁</li><li>提示：应尽量避免使用 suspend() 和 resume() 来控制线程，方法不再推荐使用</li></ul><h3 id="Semaphore-限流"><a href="#Semaphore-限流" class="headerlink" title="Semaphore(限流)"></a>Semaphore(限流)</h3><p><a href="https://blog.csdn.net/weixin_45203607/article/details/122840245">Java多线程-Semaphore(限流)</a></p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="文件-文件流"><a href="#文件-文件流" class="headerlink" title="文件-文件流"></a>文件-文件流</h3> <img src="image-20220920140407846.png" alt="image-20220920140407846" style="zoom:50%;" /><h3 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h3><h4 id="创建文件对象相关构造器和方法"><a href="#创建文件对象相关构造器和方法" class="headerlink" title="创建文件对象相关构造器和方法"></a>创建文件对象相关构造器和方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">（<span class="hljs-number">1</span>） <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String pathname) <span class="hljs-comment">//根据路径构建一个File对象</span><br>（<span class="hljs-number">2</span>） <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(File parent, String child)  <span class="hljs-comment">//根据父目录文件+子路径构建一个File对象</span><br>（<span class="hljs-number">3</span>） <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String parent, String child)  <span class="hljs-comment">//根据父目录+子路径构建一个File对象</span><br>（<span class="hljs-number">0</span>） createNewFile  <span class="hljs-comment">//创建新文件  注意：在使用 createNewFile方法后才会真正创建文件</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCreate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//方式1 new File(String pathname)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\news1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);  <span class="hljs-comment">//创建文件对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();  <span class="hljs-comment">//创建新文件</span><br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//方式2 new File(File parent,String child) //根据父目录文件+子路径构建</span><br>    <span class="hljs-comment">//e:\\news2.txt</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">create02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news2.txt&quot;</span>;<br>        <span class="hljs-comment">//这里的file对象，在java程序中，只是一个对象</span><br>        <span class="hljs-comment">//只有执行了createNewFile 方法，才会真正的，在磁盘创建该文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;创建成功~&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方式3 new File(String parent,String child) //根据父目录+子路径构建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create03</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//String parentPath = &quot;d:/&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\&quot;</span>;  <span class="hljs-comment">//推荐这种</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news3.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, fileName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;创建成功~&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//下面四个都是抽象类</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//InputStream</span><br>    <span class="hljs-comment">//OutputStream</span><br>    <span class="hljs-comment">//Reader //字符输入流</span><br>    <span class="hljs-comment">//Writer  //字符输出流</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取文件的相关信息"><a href="#获取文件的相关信息" class="headerlink" title="获取文件的相关信息"></a>获取文件的相关信息</h4><p>getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</p> <img src="image-20220920142432214.png" alt="image-20220920142432214" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInformation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//获取文件的信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//先创建文件对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\news1.txt&quot;</span>);<br>        <span class="hljs-comment">//调用相应的方法，得到对应信息</span><br>        System.out.println(<span class="hljs-string">&quot;文件名字=&quot;</span> + file.getName());<br>        <span class="hljs-comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span><br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件父级目录=&quot;</span> + file.getParent());<br>        System.out.println(<span class="hljs-string">&quot;文件大小(字节)=&quot;</span> + file.length());<span class="hljs-comment">//不同编码的存储方式不同</span><br>        System.out.println(<span class="hljs-string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="hljs-comment">//T</span><br>        System.out.println(<span class="hljs-string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="hljs-comment">//T</span><br>        System.out.println(<span class="hljs-string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="hljs-comment">//F</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="目录的操作和文件删除"><a href="#目录的操作和文件删除" class="headerlink" title="目录的操作和文件删除"></a>目录的操作和文件删除</h4><p>mkdir 创建一级目录</p><p>mkdirs 创建多级目录</p><p>delete 删除空目录或文件</p><p>注意：delete 只能删除空目录或文件，如果目录里有文件或子目录，则需先删除里面的文件或子目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Directory_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br>    <span class="hljs-comment">//判断 d:\\news1.txt 是否存在，如果存在就删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\news1.txt&quot;</span>;  <span class="hljs-comment">//文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该文件不存在...&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//判断 D:\\demo02 是否存在，存在就删除，否则提示不存在</span><br>    <span class="hljs-comment">//这里我们需要体会到，在java编程中，目录也被当做文件</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\demo02&quot;</span>;  <span class="hljs-comment">//目录</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录不存在...&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//判断 D:\\demo\\a\\b\\c 目录是否存在，如果存在就提示已经存在，否则就创建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\demo\\a\\b\\c&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            System.out.println(directoryPath + <span class="hljs-string">&quot;存在..&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (file.mkdirs()) &#123; <span class="hljs-comment">//创建一级目录使用mkdir() ，创建多级目录使用mkdirs()</span><br>                System.out.println(directoryPath + <span class="hljs-string">&quot;创建成功..&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(directoryPath + <span class="hljs-string">&quot;创建失败...&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="IO-流原理及流的分类"><a href="#IO-流原理及流的分类" class="headerlink" title="IO 流原理及流的分类"></a>IO 流原理及流的分类</h3><h4 id="Java-IO-流原理"><a href="#Java-IO-流原理" class="headerlink" title="Java IO 流原理"></a>Java IO 流原理</h4><ul><li><p>I&#x2F;O是Input&#x2F;Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理数据传输。</p><p>如读&#x2F;写文件，网络通讯等</p></li><li><p>Java程序中，对于数据的输入&#x2F;输出操作以 “流（stream）” 的方式进行</p></li><li><p>java.io 包下提供了各种 “流” 类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</p></li><li><p>输入 input：读取外部数据（网络或磁盘、光盘等存储设备的数据）到程序（内存）中。</p></li><li><p>输出 output：将程序（内存）数据输出到网络或磁盘、光盘等存储设备中</p></li></ul><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ul><li><p>按操作数据单位不同分为：字节流（8 bit）二进制文件，字节流（按字符）文本文件  |（否则可能有损失）</p></li><li><p>按数据流的流向不同分为：输入流、输出流</p></li><li><p>按流的角色不同分为：字节流、处理流&#x2F;包装流</p> <img src="image-20220920145929039.png" alt="image-20220920145929039" style="zoom: 80%;" /></li><li><p>Java 的 IO 流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生出来的</p></li><li><p>由这4个抽象基类派生出来的子类名称都是以其父类名作为子类名后缀</p></li></ul><h3 id="IO-流体系图-常用的类"><a href="#IO-流体系图-常用的类" class="headerlink" title="IO 流体系图-常用的类"></a>IO 流体系图-常用的类</h3><p><strong>IO 流体系图：</strong></p> <img src="image-20220920150646088.png" alt="image-20220920150646088" style="zoom:80%;" /><p><strong>文件 VS 流：</strong></p> <img src="image-20220920150738374.png" alt="image-20220920150738374" style="zoom:50%;" /><p><strong>各个InputStream的关系：</strong></p> <img src="image-20220920151707753.png" alt="image-20220920151707753" style="zoom:50%;" /><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 演示读取文件...</span><br><span class="hljs-comment">     * 单个字节的读取，效率比较低</span><br><span class="hljs-comment">     * -&gt; 使用 read(byte[] b)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建 FileInputStream 对象，用于读取 文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">//.read()从该输入流读取一个字节的数据。如果没有输入可用，此方法将被阻止。</span><br>            <span class="hljs-comment">//如果返回-1 , 表示读取完毕</span><br>            <span class="hljs-keyword">while</span> ((readData = fileInputStream.read()) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 读取到的值为int类型 要转成char显示</span><br>                System.out.print((<span class="hljs-type">char</span>)readData);<br>                <span class="hljs-comment">// 注意：该方法一次只能读取一个字节（utf-8中字母占1字节，汉字占3字节）</span><br>                <span class="hljs-comment">// 如果出现汉字等需3个字节存储的文字，则会出现乱码</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭文件流，释放资源.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用 read(byte[] b) 读取文件，提高效率</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\hello.txt&quot;</span>;<br>        <span class="hljs-comment">//字节数组</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>]; <span class="hljs-comment">//一次读取8个字节.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建 FileInputStream 对象，用于读取 文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">//.read(buf)</span><br>            <span class="hljs-comment">// 从该输入流读取最多buf.length字节的数据到字节数组（buf）。</span><br>            <span class="hljs-comment">// 如果返回-1 , 表示读取完毕</span><br>            <span class="hljs-comment">// 如果读取正常, 返回实际读取的字节数</span><br>            <span class="hljs-keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<span class="hljs-comment">//显示</span><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭文件流，释放资源.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p> 如果文件不存在，会创建文件(注意：前提是目录已经存在.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStream01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建 FileOutputStream对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\a.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//得到 FileOutputStream对象 对象</span><br>            <span class="hljs-comment">//老师说明</span><br>            <span class="hljs-comment">//1. new FileOutputStream(filePath) ，当写入内容时，会覆盖原来的内容</span><br>            <span class="hljs-comment">//2. new FileOutputStream(filePath, true) ，当写入内容时，是追加到文件后面</span><br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath, <span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//写入一个字节</span><br>            <span class="hljs-comment">//fileOutputStream.write(&#x27;H&#x27;);//</span><br>            <span class="hljs-comment">//写入字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp,world!&quot;</span>;<br>            <span class="hljs-comment">//str.getBytes() 可以把 字符串-&gt; 字节数组</span><br>            <span class="hljs-comment">//fileOutputStream.write(str.getBytes());</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            write(byte[] b, int off, int len)</span><br><span class="hljs-comment">            将len字节从位于偏移量off的指定字节数组写入此文件输出流</span><br><span class="hljs-comment">             */</span><br>            fileOutputStream.write(str.getBytes(), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例：文件拷贝"><a href="#案例：文件拷贝" class="headerlink" title="案例：文件拷贝"></a><strong>案例：文件拷贝</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//完成 文件拷贝，将 d:\\Koala.jpg 拷贝 d:\\Koala3.jpg</span><br>        <span class="hljs-comment">//思路分析</span><br>        <span class="hljs-comment">//1. 创建文件的输入流 , 将文件读入到程序</span><br>        <span class="hljs-comment">//2. 创建文件的输出流， 将读取到的文件数据，写入到指定的文件.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">srcFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\Koala.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">destFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\Koala3.jpg&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFilePath);<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFilePath);<br>            <span class="hljs-comment">//定义一个字节数组,提高读取效果</span><br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">//读取到后，就写入到文件 通过 fileOutputStream</span><br>                <span class="hljs-comment">//即，是一边读，一边写</span><br>                fileOutputStream.write(buf, <span class="hljs-number">0</span>, readLen);<span class="hljs-comment">//一定要使用这个方法</span><br>                <span class="hljs-comment">//fileOutputStream.write(buf);  //整个写入（拷贝不能使用这种）</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拷贝ok~&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//关闭输入流和输出流，释放资源</span><br>                <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-literal">null</span>) &#123;<br>                    fileInputStream.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-literal">null</span>) &#123;<br>                    fileOutputStream.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FileReader-和-FileWriter-介绍"><a href="#FileReader-和-FileWriter-介绍" class="headerlink" title="FileReader 和 FileWriter 介绍"></a>FileReader 和 FileWriter 介绍</h4> <img src="image-20220920171124837.png" alt="image-20220920171124837" style="zoom:80%;" /> <h4 id="FileReader-相关方法："><a href="#FileReader-相关方法：" class="headerlink" title="FileReader 相关方法："></a><strong>FileReader 相关方法：</strong></h4><ul><li>new FileReader(File&#x2F;String)</li><li>read：每次读取单个字符（不会出现乱码），返回该字符，如果到文件末尾返回 -1</li><li>read(char[])：批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回 -1</li></ul><p><strong>相关API：</strong></p><ul><li>new String(char[])：将 char[] 转换成 String</li><li>new String(char[], off, len)：将 char[] 的指定部分转换成 String</li></ul><h4 id="FileWriter-常用方法："><a href="#FileWriter-常用方法：" class="headerlink" title="FileWriter 常用方法："></a><strong>FileWriter 常用方法：</strong></h4><ul><li>new FileWriter(File&#x2F;String)：覆盖模式，相当于流的指针在首端</li><li>new FileWritter(File&#x2F;String, true)：追加模式，相当于流的指针在尾端</li><li>write(int)：写入单个字符</li><li>write(char [])：写入指定数组</li><li>write(char[], off, len)：写入指定数组的指定部分</li><li>write(string)：写入整个字符串</li><li>write(string, off, len)：写入字符串的指定部分</li></ul><p><strong>相关API：</strong></p><p>String 类：toCharArray：将 String 转换成 char[]</p><p><strong>注意：</strong> <strong>FileWriter 使用后，必须要关闭（close）或刷新（flush），否则只是在内存中而写入不到指定的文件！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">///FileReader案例</span><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单个字符读取文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\story.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1. 创建FileReader对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath);<br>            <span class="hljs-comment">//循环读取 使用read, 单个字符读取</span><br>            <span class="hljs-keyword">while</span> ((data = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print((<span class="hljs-type">char</span>) data);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                    fileReader.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字符数组读取文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;~~~readFile02 ~~~&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\story.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-comment">//1. 创建FileReader对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath);<br>            <span class="hljs-comment">//循环读取 使用read(buf), 返回的是实际读取到的字符数</span><br>            <span class="hljs-comment">//如果返回-1, 说明到文件结束</span><br>            <span class="hljs-keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                    fileReader.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FileWriter案例</span><br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\note.txt&quot;</span>;<br>        <span class="hljs-comment">//创建FileWriter对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">char</span>[] chars = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath);<span class="hljs-comment">//默认是覆盖写入</span><br>            <span class="hljs-comment">//注意：覆盖写入指的是每次打开会重新覆盖，而不是每次写入都会重新覆盖</span><br><span class="hljs-comment">//            3) write(int):写入单个字符</span><br>            fileWriter.write(<span class="hljs-string">&#x27;H&#x27;</span>);<br><span class="hljs-comment">//            4) write(char[]):写入指定数组</span><br>            fileWriter.write(chars);<br><span class="hljs-comment">//            5) write(char[],off,len):写入指定数组的指定部分</span><br>            fileWriter.write(<span class="hljs-string">&quot;韩顺平教育&quot;</span>.toCharArray(), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//            6) write（string）：写入整个字符串</span><br>            fileWriter.write(<span class="hljs-string">&quot; 你好北京~&quot;</span>);<br>            fileWriter.write(<span class="hljs-string">&quot;风雨之后，定见彩虹&quot;</span>);<br><span class="hljs-comment">//            7) write(string,off,len):写入字符串的指定部分</span><br>            fileWriter.write(<span class="hljs-string">&quot;上海天津&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//在数据量大的情况下，可以使用循环操作.</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//fileWriter.flush();</span><br>                <span class="hljs-comment">//关闭文件流，等价 flush() + 关闭</span><br>                fileWriter.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//对于 FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</span><br>        <span class="hljs-comment">//否则数据还只是在内存中，而没有写入到磁盘</span><br>        <span class="hljs-comment">//老韩看源码就知道原因.</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        看看代码</span><br><span class="hljs-comment">        private void writeBytes() throws IOException &#123;</span><br><span class="hljs-comment">            this.bb.flip();</span><br><span class="hljs-comment">            int var1 = this.bb.limit();</span><br><span class="hljs-comment">            int var2 = this.bb.position();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            assert var2 &lt;= var1;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            int var3 = var2 &lt;= var1 ? var1 - var2 : 0;</span><br><span class="hljs-comment">            if (var3 &gt; 0) &#123;</span><br><span class="hljs-comment">                if (this.ch != null) &#123;</span><br><span class="hljs-comment">                    assert this.ch.write(this.bb) == var3 : var3;</span><br><span class="hljs-comment">                &#125; else &#123;</span><br><span class="hljs-comment">                    this.out.write(this.bb.array(), this.bb.arrayOffset() + var2, var3);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            this.bb.clear();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        System.out.println(<span class="hljs-string">&quot;程序结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><h4 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>节点流可以从一个特定的数据源读写数据，如 FileReader、FileWriter    [数据源就是存放数据的地方]</li><li>处理流（也叫包装流）是 “连接” 在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，也更加灵活，如 BufferedReader、BufferedWriter</li></ul><p>注意：（以BufferedReader&#x2F;BufferedWriter举例说明）</p><p><strong>BufferedReader中，有属性Reader，即 可以封装任意一个的Reader子类的节点流</strong></p><p><strong>BufferedWriter中，有属性Writer，即 可以封装任意一个的Writer子类的节点流</strong></p><h4 id="节点流和处理流一览图"><a href="#节点流和处理流一览图" class="headerlink" title="节点流和处理流一览图"></a>节点流和处理流一览图</h4> <img src="image-20220920192614729.png" alt="image-20220920192614729" style="zoom:90%;" /><h4 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h4><ul><li>节点流是底层流&#x2F;低级流，直接跟数据源相接</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li><li>处理流（也叫包装流）对节点流进行包装，使用了修饰器设计模式，不会直接与数据相连</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理流 修饰器设计模式 模拟案例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader_</span> &#123; <span class="hljs-comment">//抽象类</span><br>   <span class="hljs-comment">//示意</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//也可以 在Reader_ 抽象类，使用read方法统一管理.</span><br>    <span class="hljs-comment">//后面在调用时，利于对象动态绑定机制， 绑定到对应的实现子类即可.</span><br>    <span class="hljs-comment">//public abstract void read();</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;对文件进行读取...&quot;</span>);&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;System.out.println(<span class="hljs-string">&quot;读取字符串..&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Reader_ reader_; <span class="hljs-comment">//属性是 Reader_ 类型</span><br><br>    <span class="hljs-comment">//接收Reader_ 子类对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BufferedReader_</span><span class="hljs-params">(Reader_ reader_)</span> &#123;<br>        <span class="hljs-built_in">this</span>.reader_ = reader_;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//封装一层</span><br>        reader_.readFile();<br>    &#125;<br><br>    <span class="hljs-comment">//扩张功能：让方法更加灵活，多次读取文件，或者加缓冲byte[] ....</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFiles</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            reader_.readFile();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//扩展 readString, 批量处理字符串数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readStrings</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;num; i++) &#123;<br>            reader_.readString();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader_</span>());<br>        bufferedReader_.readFiles(<span class="hljs-number">10</span>);  <span class="hljs-comment">//使用扩展功能</span><br>        <span class="hljs-comment">//bufferedReader_.readFile();  //原方法</span><br>        <span class="hljs-comment">//Serializable</span><br>        <span class="hljs-comment">//Externalizable</span><br>        <span class="hljs-comment">//ObjectInputStream</span><br>        <span class="hljs-comment">//ObjectOutputStream</span><br>        <span class="hljs-comment">//这次希望通过 BufferedReader_ 多次读取字符串</span><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader_</span>());<br>        bufferedReader_2.readStrings(<span class="hljs-number">5</span>);  <span class="hljs-comment">//使用扩展功能</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h4><ul><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列边界的方法来一次输入输出大批量的数据，使用更加灵活方便</li></ul><p><strong>注意：使用处理流（Buffered）时记得 flash &#x2F; shutdown(网络)</strong></p><h4 id="处理流-BufferedReader-和-BufferedWriter"><a href="#处理流-BufferedReader-和-BufferedWriter" class="headerlink" title="处理流-BufferedReader 和 BufferedWriter"></a>处理流-BufferedReader 和 BufferedWriter</h4><ul><li><p>BufferedReader 和 BufferedWriter 属于字符流，是按照字符来读取数据的</p></li><li><p>关闭处理流时，只需要关闭外层流（即包装流）即可</p><p>（理解：关闭外层流时会自动关闭包装在其中的节点流）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BufferedReader使用案例</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\a.java&quot;</span>;<br>        <span class="hljs-comment">//创建bufferedReader</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-comment">//读取</span><br>        String line; <span class="hljs-comment">//按行读取, 效率高</span><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. bufferedReader.readLine() 是按行读取文件</span><br>        <span class="hljs-comment">//2. 当返回null 时，表示文件读取完毕</span><br>        <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(line);<br>        &#125;<br>        <span class="hljs-comment">//关闭流, 这里注意，只需要关闭 BufferedReader ，因为底层会自动的去关闭节点流（FileReader）</span><br>        <span class="hljs-comment">/*  源码解读</span><br><span class="hljs-comment">        public void close() throws IOException &#123;</span><br><span class="hljs-comment">            synchronized (lock) &#123;</span><br><span class="hljs-comment">                if (in == null)</span><br><span class="hljs-comment">                    return;</span><br><span class="hljs-comment">                try &#123;</span><br><span class="hljs-comment">                    in.close(); //in 就是我们传入的 new FileReader(filePath), 关闭了.</span><br><span class="hljs-comment">                &#125; finally &#123;</span><br><span class="hljs-comment">                    in = null;</span><br><span class="hljs-comment">                    cb = null;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        bufferedReader.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BufferedWriter使用案例</span><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\ok.txt&quot;</span>;<br>        <span class="hljs-comment">//创建BufferedWriter</span><br>        <span class="hljs-comment">//说明:</span><br>        <span class="hljs-comment">//1. new FileWriter(filePath, true) 表示以追加的方式写入(在节点流中表示追加)</span><br>        <span class="hljs-comment">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath));<br>        bufferedWriter.write(<span class="hljs-string">&quot;hello, 韩顺平教育!&quot;</span>);<br>        bufferedWriter.newLine();<span class="hljs-comment">//插入一个和系统相关的换行</span><br>        bufferedWriter.write(<span class="hljs-string">&quot;hello2, 韩顺平教育!&quot;</span>);<br>        bufferedWriter.newLine();<br>        bufferedWriter.write(<span class="hljs-string">&quot;hello3, 韩顺平教育!&quot;</span>);<br>        bufferedWriter.newLine();<br>        <span class="hljs-comment">//说明：关闭外层流即可 ， 传入的 new FileWriter(filePath) ,会在底层关闭</span><br>        bufferedWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Buffered拷贝 案例</span><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedCopy_</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. BufferedReader 和 BufferedWriter 是按照字符操作</span><br>        <span class="hljs-comment">//2. 不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</span><br>        <span class="hljs-comment">//BufferedInputStream</span><br>        <span class="hljs-comment">//BufferedOutputStream</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">srcFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\a.java&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">destFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\a2.java&quot;</span>;<br><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        String line;<br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFilePath));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(destFilePath));<br>            <span class="hljs-comment">//说明: readLine 读取一行内容，但是不包含换行符</span><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//每读取一行，就写入</span><br>                bw.write(line);<br>                <span class="hljs-comment">//插入一个换行</span><br>                bw.newLine();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拷贝完毕...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(br != <span class="hljs-literal">null</span>) &#123;<br>                    br.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(bw != <span class="hljs-literal">null</span>) &#123;<br>                    bw.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理流-BufferedInputStream-和-BufferedOutputStream"><a href="#处理流-BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="处理流-BufferedInputStream 和 BufferedOutputStream"></a>处理流-BufferedInputStream 和 BufferedOutputStream</h4><ul><li>BufferedInputStream 是字节流，在创建 BufferedInputStream 时，会创建一个内部缓存区数组</li><li>BufferedOutputStream 是字节流，实现缓冲的输出流，可以将多个字节写入底层输出流中，而不必对每次字节写入调用底层系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例：演示使用BufferedOutputStream 和 BufferedInputStream 完成二进制文件拷贝</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-comment">// 思考：字节流可以操作二进制文件，可以操作文本文件吗？当然可以，而且操作方式相同</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedCopy02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">srcFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\Koala.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">destFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\hsp.jpg&quot;</span>;<br><span class="hljs-comment">//        String srcFilePath = &quot;d:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span><br><span class="hljs-comment">//        String destFilePath = &quot;d:\\hsp.avi&quot;;</span><br><span class="hljs-comment">//        String srcFilePath = &quot;e:\\a.java&quot;;</span><br><span class="hljs-comment">//        String destFilePath = &quot;e:\\a3.java&quot;;</span><br><br>        <span class="hljs-comment">//创建BufferedOutputStream对象BufferedInputStream对象</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//因为 FileInputStream  是 InputStream 子类</span><br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFilePath));<br>            bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFilePath));<br><br>            <span class="hljs-comment">//循环的读取文件，并写入到 destFilePath</span><br>            <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//当返回 -1 时，就表示文件读取完毕</span><br>            <span class="hljs-keyword">while</span> ((readLen = bis.read(buff)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buff, <span class="hljs-number">0</span>, readLen);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;文件拷贝完毕~~~&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(bis != <span class="hljs-literal">null</span>) &#123;<br>                    bis.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(bos != <span class="hljs-literal">null</span>) &#123;<br>                    bos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象流-ObjectInputStream-和-ObjectOutputStream"><a href="#对象流-ObjectInputStream-和-ObjectOutputStream" class="headerlink" title="对象流-ObjectInputStream 和 ObjectOutputStream"></a>对象流-ObjectInputStream 和 ObjectOutputStream</h4> <img src="image-20220920222410638.png" alt="image-20220920222410638" style="zoom: 80%;" /> <img src="image-20220920222614466.png" alt="image-20220920222614466" style="zoom: 33%;" /><p><strong>序列化和反序列化</strong></p><ul><li>序列化就是在保存数据时，保存数据的值和数据类型</li><li>反序列化就是在恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：<ul><li>Serializable  &#x2F;&#x2F;这是一个标记接口，里面没有方法（推荐使用）</li><li>Externalizable  &#x2F;&#x2F;该接口有方法需要实现，因此我们一般实现 Serializable 接口</li></ul></li></ul><h4 id="对象流介绍"><a href="#对象流介绍" class="headerlink" title="对象流介绍"></a>对象流介绍</h4><p>功能：提供了对基本类型或对象类型的序列化和反序列化的方法</p><ul><li><p>ObjectOutputStream 提供 序列化功能</p></li><li><p>ObjectInputStream 提供 反序列化功能</p></li></ul> <img src="image-20220920223003450.png" alt="image-20220920223003450" style="zoom: 50%;" /> <img src="image-20220920223115442.png" alt="image-20220920223115442" style="zoom:49%;" /><p><strong>注意事项和细节：</strong></p><ul><li><p><strong>读写顺序要一致 （否则会异常）</strong></p></li><li><p><strong>要求序列化或反序列化对象实现 Serializable</strong></p></li><li><p>序列化的类中建议添加 SerialVersionUID，提高版本的兼容性</p><p>如果有 SerialVersionUID ，当序列化的类修改了后，则只会认为该类只是修改了而不是一个新的类</p></li><li><p>序列化对象时，默认将里面所有属性都进行序列化，但除了 static 或 transient 修饰的成员</p></li><li><p>序列化对象时，要求里面属性的类型也需要实现序列化接口（当有属性是类时）</p></li><li><p>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//序列化信息：使用ObjectOutputStream 序列化 基本数据类型和一个 Dog对象(name, age),</span><br><span class="hljs-comment">//并保存到 data.dat 文件中</span><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//序列化后，保存的文件格式，不是存文本，而是按照它的格式来保存</span><br>        <span class="hljs-comment">//如果按文本格式保存 打开后看到的是乱码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br><br>        <span class="hljs-comment">//序列化数据到 d:\data.dat</span><br>        oos.writeInt(<span class="hljs-number">100</span>);<span class="hljs-comment">// int -&gt; Integer (实现了 Serializable)</span><br>        oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">// boolean -&gt; Boolean (实现了 Serializable)</span><br>        oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">// char -&gt; Character (实现了 Serializable)</span><br>        oos.writeDouble(<span class="hljs-number">9.5</span>);<span class="hljs-comment">// double -&gt; Double (实现了 Serializable)</span><br>        oos.writeUTF(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<span class="hljs-comment">//String (实现了 Serializable)</span><br>        <span class="hljs-comment">//保存一个dog对象</span><br>        oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;日本&quot;</span>, <span class="hljs-string">&quot;白色&quot;</span>));<br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;数据保存完毕(序列化形式)&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>&#125;<br><span class="hljs-comment">//如果需要序列化某个类的对象，实现 Serializable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String nation;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String color;<br>    <span class="hljs-comment">//序列化对象时，要求里面属性的类型也需要实现序列化接口</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Master</span> <span class="hljs-variable">master</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Master</span>();<br>    <span class="hljs-comment">//serialVersionUID 序列化的版本号，可以提高兼容性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String nation, String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.nation = nation;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, color=&#x27;&quot;</span> + color + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span> + <span class="hljs-string">&quot;  nation=&quot;</span>+ nation + <span class="hljs-string">&quot;  master=&quot;</span> + master;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反序列化信息：使用ObjectInputStream 读取 data.dat 并反序列化恢复数据</span><br><span class="hljs-keyword">import</span> com.hspedu.outputstream_.Dog;  <span class="hljs-comment">//注意：要引入反序列化中包含的类</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//指定反序列化的文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br>        <span class="hljs-comment">//读取</span><br>        <span class="hljs-comment">//老师解读</span><br>        <span class="hljs-comment">//1. 读取(反序列化)的顺序需要和你保存数据(序列化)的顺序一致</span><br>        <span class="hljs-comment">//2. 否则会出现异常</span><br>        System.out.println(ois.readInt());<br>        System.out.println(ois.readBoolean());<br>        System.out.println(ois.readChar());<br>        System.out.println(ois.readDouble());<br>        System.out.println(ois.readUTF());<br><br>        <span class="hljs-comment">//dog 的编译类型是 Object , dog 的运行类型是 Dog</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行类型=&quot;</span> + dog.getClass());<br>        System.out.println(<span class="hljs-string">&quot;dog信息=&quot;</span> + dog);<span class="hljs-comment">//底层 Object -&gt; Dog</span><br><br>        <span class="hljs-comment">//这里是特别重要的细节:</span><br>        <span class="hljs-comment">//1. 如果我们希望调用Dog的方法, 需要向下转型</span><br>        <span class="hljs-comment">//2. 我们需要引用Dog类，需要我们导入Dog类（import）|（在不同包里是需要注意该问题）</span><br>        <span class="hljs-comment">//   因此我们也需要将Dog的定义，放在 反序列化class文件 可以引用的位置</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> (Dog)dog;<br>        System.out.println(dog2.getName()); <span class="hljs-comment">//旺财..</span><br><br>        <span class="hljs-comment">//关闭流, 关闭外层流即可，底层会关闭 FileInputStream 流</span><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4> <img src="image-20220920232521586.png" alt="image-20220920232521586" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputAndOutput</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//System类 的 public final static InputStream in = null;</span><br>        <span class="hljs-comment">// System.in 编译类型 InputStream</span><br>        <span class="hljs-comment">// System.in 运行类型 BufferedInputStream</span><br>        <span class="hljs-comment">// 表示的是标准输入 键盘</span><br>        System.out.println(System.in.getClass());<br>        <span class="hljs-comment">//解读</span><br>        <span class="hljs-comment">//1. System.out public final static PrintStream out = null;</span><br>        <span class="hljs-comment">//2. 编译类型 PrintStream</span><br>        <span class="hljs-comment">//3. 运行类型 PrintStream</span><br>        <span class="hljs-comment">//4. 表示的是标准输出 显示器</span><br>        System.out.println(System.out.getClass());<br>        System.out.println(<span class="hljs-string">&quot;hello, 韩顺平教育~&quot;</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入内容&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;next=&quot;</span> + next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="转换流-InputStreamReader-和-OutputStreamWriter"><a href="#转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="转换流-InputStreamReader 和 OutputStreamWriter"></a>转换流-InputStreamReader 和 OutputStreamWriter</h4><ul><li>InputStreamReader：Reader 的子类，可以将 InputStream（字节流）包装成（转换）Reader（字符流）</li><li>OutputStreamWriter：Writer 的子类，实现将 OutputStream（字节流）包装成（转换） Writer（字符流）</li><li>当处理纯文本数据时，如果使用字符流效率更高，且可以有效解决中文问题，所以建议将字节流转换成字符流</li><li>可以在使用时指定编码格式（比如 utf-8，gbk、gb2312、ISO8859-1 等）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示使用 InputStreamReader 转换流解决中文乱码问题</span><br><span class="hljs-comment"> * 将字节流 FileInputStream 转成字符流  InputStreamReader, 指定编码 gbk/utf-8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\a.txt&quot;</span>;<br><span class="hljs-comment">//解读</span><br><span class="hljs-comment">//1. 把 FileInputStream 转成 InputStreamReader</span><br><span class="hljs-comment">//2. 指定编码 gbk</span><br><span class="hljs-comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span><br><span class="hljs-comment">//3. 把 InputStreamReader 传入 BufferedReader</span><br><span class="hljs-comment">//BufferedReader br = new BufferedReader(isr);</span><br>        <span class="hljs-comment">//将2 和 3 合在一起</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<br>                                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>));<br>        <span class="hljs-comment">//4. 读取</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(<span class="hljs-string">&quot;读取内容=&quot;</span> + s);<br>        <span class="hljs-comment">//5. 关闭外层流</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示 OutputStreamWriter 使用</span><br><span class="hljs-comment"> * 把FileOutputStream 字节流，转成字符流 OutputStreamWriter</span><br><span class="hljs-comment"> * 指定处理的编码 gbk/utf-8/utf8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStreamWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\hsp.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">charSet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span>;<br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath), charSet);<br>        osw.write(<span class="hljs-string">&quot;hi, 韩顺平教育&quot;</span>);<br>        osw.close();<br>        System.out.println(<span class="hljs-string">&quot;按照 &quot;</span> + charSet + <span class="hljs-string">&quot; 保存文件成功~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打印流-PrintStream-和-PrintWriter"><a href="#打印流-PrintStream-和-PrintWriter" class="headerlink" title="打印流-PrintStream 和 PrintWriter"></a>打印流-PrintStream 和 PrintWriter</h4><p>打印流只有输出流，没有输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示PrintStream （字节打印流/输出流）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<br>        <span class="hljs-comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        public void print(String s) &#123;</span><br><span class="hljs-comment">            if (s == null) &#123;</span><br><span class="hljs-comment">                s = &quot;null&quot;;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            write(s);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        out.print(<span class="hljs-string">&quot;john, hello&quot;</span>);<br>        <span class="hljs-comment">//因为print底层使用的是write , 所以我们可以直接调用write进行打印/输出</span><br>        out.write(<span class="hljs-string">&quot;韩顺平,你好&quot;</span>.getBytes());<br>        out.close();<br><br>        <span class="hljs-comment">//我们可以去修改打印流输出的位置/设备</span><br>        <span class="hljs-comment">//1. 输出位置修改成到 &quot;e:\\f1.txt&quot;</span><br>        <span class="hljs-comment">//2. &quot;hello, 韩顺平教育~&quot; 就会输出到 e:\f1.txt</span><br>        <span class="hljs-comment">//3. public static void setOut(PrintStream out) &#123;</span><br>        <span class="hljs-comment">//        checkIO();</span><br>        <span class="hljs-comment">//        setOut0(out); // native 方法，修改了out</span><br>        <span class="hljs-comment">//   &#125;</span><br>        System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;e:\\f1.txt&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;hello, 韩顺平教育~&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示 PrintWriter 使用方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(System.out);</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\f2.txt&quot;</span>));<br>        printWriter.print(<span class="hljs-string">&quot;hi, 北京你好~~~~&quot;</span>);<br>        printWriter.close();<span class="hljs-comment">//flush + 关闭流, 才会将数据写入到文件..</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h3><p>1）专门用于读写配置文件的集合类</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">配置文件的格式：（不需要空格，不需要引号）<br>键<span class="hljs-operator">=</span>值<br>键<span class="hljs-operator">=</span>值<br></code></pre></td></tr></table></figure><p>2）注意：键值对不需要有空格，值不需要用引号一起来。默认类型是String</p><p>3）Properties 的常见方法</p><ul><li><p>load：加载配置文件的键值对到 Properties 对象</p></li><li><p>list：将数据输出到指定设备&#x2F;文件（流对象）</p></li><li><p>getProperty(key)：根据键获取值</p></li><li><p>setProperty(key, value)：设置键值对 到 Properties 对象</p></li><li><p>store：将 Properties 中的键值对存储到配置文件</p><p>在 IDEA 中，保存信息到配置文件，如果含有中文，会存储为 Unicode 编码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例演示</span><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//使用Properties 类来读取mysql.properties 文件</span><br><br>        <span class="hljs-comment">//1. 创建Properties 对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//2. 加载指定配置文件</span><br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-comment">//3. 把k-v显示控制台</span><br>        properties.list(System.out);<br>        <span class="hljs-comment">//4. 根据key 获取对应的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;用户名=&quot;</span> + user);<br>        System.out.println(<span class="hljs-string">&quot;密码是=&quot;</span> + pwd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//使用Properties 类来创建 配置文件, 修改配置文件内容</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//创建</span><br>        <span class="hljs-comment">//1.如果该文件没有该key 就是创建</span><br>        <span class="hljs-comment">//2.如果该文件中有该key ,就是修改</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Properties 父类是 Hashtable ， 底层就是Hashtable 核心方法</span><br><span class="hljs-comment">            public synchronized V put(K key, V value) &#123;</span><br><span class="hljs-comment">                // Make sure the value is not null</span><br><span class="hljs-comment">                if (value == null) &#123;</span><br><span class="hljs-comment">                    throw new NullPointerException();</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                // Makes sure the key is not already in the hashtable.</span><br><span class="hljs-comment">                Entry&lt;?,?&gt; tab[] = table;</span><br><span class="hljs-comment">                int hash = key.hashCode();</span><br><span class="hljs-comment">                int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="hljs-comment">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-comment">                Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="hljs-comment">                for(; entry != null ; entry = entry.next) &#123;</span><br><span class="hljs-comment">                    if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="hljs-comment">                        V old = entry.value;</span><br><span class="hljs-comment">                        entry.value = value;//如果key 存在，就替换</span><br><span class="hljs-comment">                        return old;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                addEntry(hash, key, value, index);//如果是新k, 就addEntry</span><br><span class="hljs-comment">                return null;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        properties.setProperty(<span class="hljs-string">&quot;charset&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<span class="hljs-comment">//注意保存时，是中文的unicode码值</span><br>        properties.setProperty(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;888666&quot;</span>);<br><br>        <span class="hljs-comment">//将k-v 存储到文件中即可  //第二个参数是注释</span><br>        properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src\\mysql2.properties&quot;</span>), <span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;保存配置文件成功~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="课堂练习-过"><a href="#课堂练习-过" class="headerlink" title="课堂练习(过)"></a>课堂练习(过)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *(1) 在判断e盘下是否有文件夹mytemp ,如果没有就创建mytemp</span><br><span class="hljs-comment"> *(2) 在e:\\mytemp 目录下, 创建文件 hello.txt</span><br><span class="hljs-comment"> *(3) 如果hello.txt 已经存在，提示该文件已经存在，就不要再重复创建了</span><br><span class="hljs-comment"> *(4) 并且在hello.txt 文件中，写入 hello,world~</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\mytemp&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span>(!file.exists()) &#123;<br>            <span class="hljs-comment">//创建</span><br>            <span class="hljs-keyword">if</span>(file.mkdirs()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;创建 &quot;</span> + directoryPath + <span class="hljs-string">&quot; 创建成功&quot;</span> );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;创建 &quot;</span> + directoryPath + <span class="hljs-string">&quot; 创建失败&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span>  <span class="hljs-operator">=</span> directoryPath + <span class="hljs-string">&quot;\\hello.txt&quot;</span>;<span class="hljs-comment">// d:\mytemp\hello.txt</span><br>        file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span>(!file.exists()) &#123;<br>            <span class="hljs-comment">//创建文件</span><br>            <span class="hljs-keyword">if</span>(file.createNewFile()) &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot; 创建成功~&quot;</span>);<br>                <span class="hljs-comment">//如果文件存在，我们就使用BufferedWriter 字符输入流写入内容</span><br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file));<br>                bufferedWriter.write(<span class="hljs-string">&quot;hello, world~~ 韩顺平教育&quot;</span>);<br>                bufferedWriter.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot; 创建失败~&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果文件已经存在，给出提示信息</span><br>            System.out.println(filePath + <span class="hljs-string">&quot; 已经存在，不在重复创建...&quot;</span>);<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 要求:  使用BufferedReader读取一个文本文件，为每行加上行号，</span><br><span class="hljs-comment"> * 再连同内容一并输出到屏幕上。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lineNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//循环读取</span><br>                System.out.println(++lineNum + line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(br != <span class="hljs-literal">null</span>) &#123;<br>                    br.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (1) 要编写一个dog.properties   name=tom age=5 color=red</span><br><span class="hljs-comment"> * (2) 编写Dog 类(name,age,color)  创建一个dog对象，读取dog.properties 用相应的内容完成属性初始化, 并输出</span><br><span class="hljs-comment"> * (3) 将创建的Dog 对象 ，序列化到 文件 e:\\dog.dat 文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;src\\dog.properties&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;name&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//Object -&gt; String</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(properties.get(<span class="hljs-string">&quot;age&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">// Object -&gt; int</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;color&quot;</span>) + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//Object -&gt; String</span><br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(name, age, color);<br>        System.out.println(<span class="hljs-string">&quot;===dog对象信息====&quot;</span>);<br>        System.out.println(dog);<br><br>        <span class="hljs-comment">//将创建的Dog 对象 ，序列化到 文件 dog.dat 文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\dog.dat&quot;</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(serFilePath));<br>        oos.writeObject(dog);<br><br>        <span class="hljs-comment">//关闭流</span><br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;dog对象，序列化完成...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//在编写一个方法，反序列化dog</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\dog.dat&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(serFilePath));<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog)ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;===反序列化后 dog====&quot;</span>);<br>        System.out.println(dog);<br>        ois.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, color=&#x27;&quot;</span> + color + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络的相关概念"><a href="#网络的相关概念" class="headerlink" title="网络的相关概念"></a>网络的相关概念</h3><h4 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h4>  <img src="image-20220921112611952.png" alt="image-20220921112611952" style="zoom:80%;" /><ol><li><p>概念：两台设备之间通过网络实现数据传输  </p></li><li><p>网络通信：将数据通过网络从一台设备传输到另一台设备  </p></li><li><p>java.net包下提供了一系列的类或接口，供程序员使用，完成网络通信</p></li></ol><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li><p>概念：两台或多台设备通过一定物理设备连接起来构成了网络</p></li><li><p>根据网络的覆盖范围不同，对网络进行分类：</p><ul><li>局域网：覆盖范围最小，仅仅覆盖 一个教室或一个机房</li><li>城域网：覆盖范围较大，可以覆盖 一个城市</li><li>广域网：覆盖范围最大，可以覆盖 全国，甚至全球，万维网是广域网的代表</li></ul></li></ul><h4 id="ip-地址-重要"><a href="#ip-地址-重要" class="headerlink" title="ip 地址(重要)"></a>ip 地址(重要)</h4><ul><li><p>概念：用于唯一标识网络中的每台计算机&#x2F;主机</p></li><li><p>查看ip地址：ipconfig</p></li><li><p>ip地址的表示形式：点分十进制 xxx.xxx.xxx.xxx</p></li><li><p>每一个十进制数的范围：0～255</p></li><li><p>ip地址的组成 &#x3D; 网络地址+主机地址，比如：192.168.16.69</p></li><li><p>lPv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址[1]。</p></li><li><p>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。</p><p>IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍</p></li></ul><h4 id="ipv4-地址分类"><a href="#ipv4-地址分类" class="headerlink" title="ipv4 地址分类"></a>ipv4 地址分类</h4><p> <img src="image-20220921114615816.png" alt="image-20220921114615816" style="zoom: 50%;" /> <img src="image-20220921114848511.png" alt="image-20220921114848511" style="zoom:50%;" /></p><p>特殊的：127.0.0.1 表示本机地址</p><h4 id="域名和端口"><a href="#域名和端口" class="headerlink" title="域名和端口"></a>域名和端口</h4><ul><li><p>域名：例如：<a href="http://www.baidu.com/">www.baidu.com</a></p><ul><li>好处：为了方便记忆，解决记ip的困难  </li><li>概念：将ip地址映射成域名，这里怎么映射上，HTTP协议</li></ul></li><li><p>端口号</p><ul><li><p>概念：用于标识计算机上某个特定的网络程序  </p></li><li><p>表示形式：以整数形式，端口范围0<del>65535[2个字节表示端口0</del>216-1]  </p></li><li><p>0~1024已经被占用，比如 ssh 22 ,  ftp 21 ,  smtp 25 ,  http 80  </p><p>(因此，在网络开发中，不要使用 0-1024 的端口)</p></li><li><p>常见的网络程序端口号：  </p><ul><li>ssh 22 ,  ftp 21 ,  smtp 25 ,  http 80 </li><li>tomcat：8080</li><li>mysql：3306</li><li>oracle：1521</li><li>sqlserver：1433</li></ul></li></ul></li><li><p>域名和端口的理解：</p> <img src="image-20220921144831286.png" alt="image-20220921144831286" style="zoom: 50%;" /></li></ul><h4 id="网络通信协议-TCP-x2F-IP"><a href="#网络通信协议-TCP-x2F-IP" class="headerlink" title="网络通信协议(TCP&#x2F;IP)"></a>网络通信协议(TCP&#x2F;IP)</h4><p>TCP&#x2F;IP (Transmission Control  Protocol&#x2F;Internet Protocol的简写)，中文译名为传输控制协议&#x2F;因特网互联协议，又叫网络通讯协议，这个协议是 Internet 最基本的协议、Internet国际互联网络的基础，简单地说，就是由网络层的 IP 协议和传输层的 TCP 协议组成的。[示意图]</p><p>个人理解：网络通信协议 规范了网络数据的结构</p> <img src="image-20220921114510403.png" alt="image-20220921114510403" style="zoom:50%;" /><h4 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h4> <img src="image-20220921151249596.png" alt="image-20220921151249596" style="zoom:45%;" /><h4 id="TCP-和-UDP"><a href="#TCP-和-UDP" class="headerlink" title="TCP 和 UDP"></a>TCP 和 UDP</h4><p><strong>√</strong> <strong>TCP协议：传输控制协议</strong></p><ol><li><p>使用TCP协议前，须先建立TCP连接，形成传输数据通道</p></li><li><p>传输前，采用 “<strong>三次握手</strong>” 方式，是可靠的</p></li><li><p>TCP协议进行通信的两个应用进程：客户端、服务端  </p></li><li><p>在连接中可进行大数据量的传输</p></li><li><p>传输完毕，需释放已建立的连接，效率低</p></li></ol><p><strong>√</strong> <strong>UDP协议：用户数据协议</strong></p><ol><li>将数据、源、目的封装成数据包，不需要建立连接  </li><li>每个数据包的大小限制在64K内，不适合传输大量数据</li><li>因无需连接，故是不可靠的（不能保证数据一定被对方接收到）</li><li>发送数据结束时无需释放资源（因为不是面向连接的），速度快</li></ol><h3 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h3><ul><li>获取本机 InetAddress 对象：getLocalHost</li><li>根据指定 主机名&#x2F;域名 获取 ip 地址对象：getByName</li><li>获取 InetAddress对象 的主机名：getHostName</li><li>获取 InetAddress对象 的地址：getHostAddress</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><span class="hljs-comment">//演示 InetAddress类 的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">API_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><br>        <span class="hljs-comment">//1. 获取本机的InetAddress 对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        System.out.println(localHost);<span class="hljs-comment">//DESKTOP-S4MP84S/192.168.12.1</span><br><br>        <span class="hljs-comment">//2. 根据指定主机名 获取 InetAddress对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">host1</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;LAPTOP-A2UEI881&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;host1=&quot;</span> + host1);<span class="hljs-comment">//DESKTOP-S4MP84S/192.168.12.1</span><br><br>        <span class="hljs-comment">//3. 根据域名返回 InetAddress对象, 比如 www.baidu.com 对应</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">host2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;host2=&quot;</span> + host2);<span class="hljs-comment">//www.baidu.com/183.232.231.174</span><br><br>        <span class="hljs-comment">//4. 通过 InetAddress 对象，获取对应的地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAddress</span> <span class="hljs-operator">=</span> host2.getHostAddress();<span class="hljs-comment">//IP 110.242.68.4</span><br>        System.out.println(<span class="hljs-string">&quot;host2 对应的ip = &quot;</span> + hostAddress);<span class="hljs-comment">//183.232.231.174</span><br><br>        <span class="hljs-comment">//5. 通过 InetAddress 对象，获取对应的主机名/或者的域名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostName</span> <span class="hljs-operator">=</span> host2.getHostName();<br>        System.out.println(<span class="hljs-string">&quot;host2对应的主机名/域名=&quot;</span> + hostName); <span class="hljs-comment">// www.baidu.com</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li><p>套接字（Socket）开发网络应用程序被广泛采用，以至于成为事实上的标准。</p></li><li><p>通信的两端都要有 Socket，是两台机器间通信的端点</p></li><li><p>网络通信其实就是 Socket 间的通信</p></li><li><p>Socket 允许程序把网络连接当成一个流，数据在两个 Socket 间通过 IO 传输</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</p></li><li><p>Socket 有两种方式：TCP编程（可靠的）、UDP编程（不可靠的）</p></li><li><p>示意图：</p> <img src="image-20220921194523349.png" alt="image-20220921194523349" style="zoom: 67%;" /> <img src="image-20220921195106779.png" alt="image-20220921195106779" style="zoom:56%;" /></li></ul><h3 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h3><h4 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>基于客户端一服务端的网络通信</li><li>底层使用的是TCP&#x2F;IP协议</li><li>应用场景举例：客户端发送数据，服务端接受并显示控制台</li><li>基于Socket的TCP编程</li></ul><h4 id="应用案例1"><a href="#应用案例1" class="headerlink" title="应用案例1"></a>应用案例1</h4><ol><li><p>编写一个服务器端，和一个客户端</p></li><li><p>服务器端在 9999端口监听</p></li><li><p>客户端连接到服务器端，发送 “hello，server”，然后退出</p></li><li><p>服务器端接收到客户端发送的信息，输出，并退出</p></li><li><p>过程示意图：</p> <img src="image-20220921202032716.png" alt="image-20220921202032716" style="zoom:50%;" /></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP01Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. new ServerSocket(9999);</span><br>        <span class="hljs-comment">//   在本机 的9999端口监听, 等待连接</span><br>        <span class="hljs-comment">//   细节：要求在本机没有其它服务在监听9999</span><br>        <span class="hljs-comment">//   补充：这个 ServerSocket 可以通过 .accept() 返回多个Socket[多个客户端连接服务器的并发]</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);<br>        <span class="hljs-comment">//2. .accept()</span><br>        <span class="hljs-comment">//   当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span><br>        <span class="hljs-comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();  <span class="hljs-comment">//补充（见上一条补充）</span><br>        System.out.println(<span class="hljs-string">&quot;服务端 socket =&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//4. IO读取</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<span class="hljs-comment">//根据读取到的实际长度，显示内容.</span><br>        &#125;<br>        <span class="hljs-comment">//5.关闭流和socket</span><br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<span class="hljs-comment">//关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端，发送 &quot;hello, server&quot; 给服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP01Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 连接服务端 (ip , 端口）</span><br>        <span class="hljs-comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 socket返回=&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span><br>        <span class="hljs-comment">//   得到 和 socket对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3. 通过输出流，写入数据到 数据通道</span><br>        outputStream.write(<span class="hljs-string">&quot;hello, server&quot;</span>.getBytes());<br>        <span class="hljs-comment">//4. 关闭流对象和socket, 必须关闭</span><br>        outputStream.close();<br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;客户端退出.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用案例2"><a href="#应用案例2" class="headerlink" title="应用案例2"></a>应用案例2</h4><ol><li><p>编写一个服务端，和一个客户端  </p></li><li><p>服务器端在 9999 端口监听  </p></li><li><p>客户端连接到服务端，发送“hello,server”，并接收服务器端回发的 “hello,client”，再退出</p></li><li><p>服务器端接收到客户端发送的信息，输出，并发送 “hello,client”，再退出</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP02Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 在本机 的9999端口监听, 等待连接</span><br>        <span class="hljs-comment">//   细节: 要求在本机没有其它服务在监听9999</span><br>        <span class="hljs-comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);<br>        <span class="hljs-comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span><br>        <span class="hljs-comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        System.out.println(<span class="hljs-string">&quot;服务端 socket =&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//4. IO读取</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<span class="hljs-comment">//根据读取到的实际长度，显示内容.</span><br>        &#125;<br>        <span class="hljs-comment">//5. 获取socket相关联的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(<span class="hljs-string">&quot;hello, client&quot;</span>.getBytes());<br>        <span class="hljs-comment">//   设置写入结束标记</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//6.关闭流和socket</span><br>        outputStream.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<span class="hljs-comment">//关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端，发送 &quot;hello, server&quot; 给服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP02Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 连接服务端 (ip , 端口）</span><br>        <span class="hljs-comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 socket返回=&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span><br>        <span class="hljs-comment">//   得到 和 socket对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3. 通过输出流，写入数据到 数据通道</span><br>        outputStream.write(<span class="hljs-string">&quot;hello, server&quot;</span>.getBytes());<br>        <span class="hljs-comment">//   设置写入结束标记</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//4. 获取和socket关联的输入流. 读取数据(字节)，并显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br><br>        <span class="hljs-comment">//5. 关闭流对象和socket, 必须关闭</span><br>        inputStream.close();<br>        outputStream.close();<br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;客户端退出.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用案例-3-使用字符流"><a href="#应用案例-3-使用字符流" class="headerlink" title="应用案例 3(使用字符流)"></a>应用案例 3(使用字符流)</h4><ol><li><p>编写一个服务端，和一个客户端</p></li><li><p>服务端在9999端口监听</p></li><li><p>客户端连接到服务端，发送”hello, server’”，并接收服务端回发的 “hello,client”，再退出  </p></li><li><p>服务端接收到客户端发送的信息，输出，并发送”hello, client”，再退出</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端, 使用字符流方式读写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 在本机 的9999端口监听, 等待连接</span><br>        <span class="hljs-comment">//   细节: 要求在本机没有其它服务在监听9999</span><br>        <span class="hljs-comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);<br>        <span class="hljs-comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span><br>        <span class="hljs-comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span><br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        System.out.println(<span class="hljs-string">&quot;服务端 socket =&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//4. IO读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();<span class="hljs-comment">//使用readLine()读取</span><br>        System.out.println(s);<span class="hljs-comment">//输出</span><br><br>        <span class="hljs-comment">//5. 获取socket相关联的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>       <span class="hljs-comment">//    使用字符输出流的方式回复信息</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br>        bufferedWriter.write(<span class="hljs-string">&quot;hello client 字符流&quot;</span>);<br>        <span class="hljs-comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span><br>        <span class="hljs-comment">//这样的话就不需要使用.shutdownOutput();标记结束 你妈的韩顺平！！！这里是错误的</span><br>        <span class="hljs-comment">//.shutdownOutput() 一定要加上 —— 血的教训</span><br>        bufferedWriter.newLine();<br>        bufferedWriter.flush();<span class="hljs-comment">//注意：如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span><br><br>        <span class="hljs-comment">//6.关闭流和socket</span><br>        <span class="hljs-comment">//一般来说 后开的流先关闭</span><br>        bufferedWriter.close();<br>        bufferedReader.close();<br>        socket.close();<br>        serverSocket.close();<span class="hljs-comment">//关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端，发送 &quot;hello, server&quot; 给服务端， 使用字符流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 连接服务端 (ip , 端口）</span><br>        <span class="hljs-comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 socket返回=&quot;</span> + socket.getClass());<br>        <span class="hljs-comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span><br>        <span class="hljs-comment">//   得到 和 socket对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br>        bufferedWriter.write(<span class="hljs-string">&quot;hello, server 字符流&quot;</span>);<br>        <span class="hljs-comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span><br>        <span class="hljs-comment">//这样的话就不需要使用.shutdownOutput();标记结束</span><br>        bufferedWriter.newLine();<br>        bufferedWriter.flush();<span class="hljs-comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span><br><br>        <span class="hljs-comment">//4. 获取和socket关联的输入流. 读取数据(字符)，并显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine(); <span class="hljs-comment">//使用readLine()读取</span><br>        System.out.println(s);<br><br>        <span class="hljs-comment">//5. 关闭流对象和socket, 必须关闭</span><br>        <span class="hljs-comment">//一般来说 后开的流先关闭</span><br>        bufferedReader.close();<span class="hljs-comment">//关闭外层流</span><br>        bufferedWriter.close();<br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;客户端退出.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用案例-4（文件）"><a href="#应用案例-4（文件）" class="headerlink" title="应用案例 4（文件）"></a>应用案例 4（文件）</h4><ol><li><p>编写一个服务端和一个客户端  </p></li><li><p>服务器端在8888端口监听  </p></li><li><p>客户端连接到服务端，发送一张图片 e:\\qie.png  </p></li><li><p>服务器端接收到客户端发送的图片，保存到src下，发送”收到图片”再退出  </p></li><li><p>客户端接收到服务端发送的 “收到图片”，再退出  </p></li><li><p>该程序要求使用 StreamUtils.java（已经准备好了，直接使用）</p></li><li><p>过程示意图：</p> <img src="image-20220921235649357.png" alt="image-20220921235649357" style="zoom: 67%;" /></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件上传的服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPFileUploadServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//1. 服务端在本机监听8888端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端在8888端口监听....&quot;</span>);<br>        <span class="hljs-comment">//2. 等待连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">//3. 读取客户端发送的数据</span><br>        <span class="hljs-comment">//   通过Socket得到输入流</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<br>        <span class="hljs-comment">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">destFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;chapter21\\src\\qie2.png&quot;</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFilePath));<br>        bos.write(bytes);<br>        bos.close();<br><br>        <span class="hljs-comment">// 向客户端回复 &quot;收到图片&quot;</span><br>        <span class="hljs-comment">// 通过socket 获取到输出流(字符)</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        writer.write(<span class="hljs-string">&quot;收到图片&quot;</span>);<br>        writer.flush();<span class="hljs-comment">//使用Writer需要手动把内容刷新到数据通道</span><br>        socket.shutdownOutput();<span class="hljs-comment">//设置写入结束标记</span><br><br>        <span class="hljs-comment">//关闭其他资源</span><br>        writer.close();<br>        bis.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件上传的客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPFileUploadClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//客户端连接服务端 8888，得到Socket对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">//创建读取磁盘文件的输入流</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\qie.png&quot;</span>;<br><span class="hljs-comment">//        String filePath = &quot;d:\\abc.mp4&quot;;</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br><br>        <span class="hljs-comment">//bytes 就是filePath对应的字节数组</span><br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<br><br>        <span class="hljs-comment">//通过socket获取到输出流, 将bytes数据发送给服务端</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        bos.write(bytes);<span class="hljs-comment">//将文件对应的字节数组的内容，写入到数据通道</span><br>        bis.close();<br>        socket.shutdownOutput();<span class="hljs-comment">//设置写入数据的结束标记</span><br><br>        <span class="hljs-comment">//=====接收从服务端回复的消息=====//</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//使用StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> StreamUtils.streamToString(inputStream);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//关闭相关的流</span><br>        inputStream.close();<br>        bos.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个关于 流的转换 的工具类</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类用于演示关于流的读写方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamUtils</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：将输入流转换成byte[]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] streamToByteArray(InputStream is) <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<span class="hljs-comment">//创建输出流对象</span><br><span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//字节数组</span><br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=is.read(b))!=-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//循环读取</span><br>bos.write(b, <span class="hljs-number">0</span>, len);<span class="hljs-comment">//把读取到的数据写入bos</span><br>&#125;<br><span class="hljs-type">byte</span>[] array = bos.toByteArray(); <span class="hljs-comment">//将bos转换成字节数组</span><br>bos.close();<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：将InputStream转换成String</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>StringBuilder builder= <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>String line;<br><span class="hljs-keyword">while</span>((line=reader.readLine())!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//当读取到 null时，就表示结束</span><br>builder.append(line+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h4><p>1.netstat -an 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</p><p>2.netstat -an| more 可以分页显示</p><p>3.要求在 dos 控制台下执行（win+r）</p><p>说明：</p><ul><li><p>本地地址：IP地址 + 端口号</p></li><li><p>外部地址：有没有外部的连接连到本机，显示的是 外部端（客户端）的 IP地址 + 端口号</p></li><li><p>Listening 表示某个端口在监听</p></li><li><p>如果有一个外部程序（客户端）连接到该端口，就会显示一条连接信息。</p></li><li><p>可以输入 ctrl+c 退出指令</p></li></ul><p>示意图：</p><p>​<img src="image-20220922121512178.png" alt="image-20220922121512178" style="zoom:67%;" /></p><h4 id="TCP-的相关补充"><a href="#TCP-的相关补充" class="headerlink" title="TCP 的相关补充"></a>TCP 的相关补充</h4><p>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的</p><p>这个端口是由 TCP&#x2F;IP 来分配的，是不确定的，是随机的。</p> <img src="image-20220922123249795.png" alt="image-20220922123249795" style="zoom: 50%;" /><h3 id="UDP-网络通信编程-了解"><a href="#UDP-网络通信编程-了解" class="headerlink" title="UDP 网络通信编程[了解]"></a>UDP 网络通信编程[了解]</h3><h4 id="基本介绍-8"><a href="#基本介绍-8" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>类 DatagramSocket 和 DatagramPacket（数据包&#x2F;数据报）实现了基于UDP协议网络程序。    </p></li><li><p>UDP 数据包 通过 数据包套接字 DatagramSocket 发送和接收，系统不保证 UDP 数据包一定能够安全送到目的地，也不能确定什么时候可以抵达。</p></li><li><p>DatagramPacket对象 封装了 UDP数据包，在数据报中包含了 发送端 的 lP地址 和 端口号 以及 接收端 的 IP地址和 端口号。</p></li><li><p>UDP协议中 每个数据包都给出了完整的地址信息，因此无须建立发送方和接收方的连接</p></li></ul><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ol><li><p>核心的两个 类&#x2F;对象 DatagramSocket与DatagramPacket </p></li><li><p>建立发送端，接收端（没有服务端和客户端的概念）（发送端与接收端的身份会随时改变）</p></li><li><p>发送数据前，建立 数据包&#x2F;报 DatagramPacket对象  </p></li><li><p>调用 DatagramSocket 的发送、接收方法（接收和发送数据是通过 DatagramSocket 对象完成）</p></li><li><p>关闭 DatagramSocket</p> <img src="image-20220922144417511.png" alt="image-20220922144417511" style="zoom:58%;" /></li></ol><h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4><ol><li><p>编写一个接收端A和一个发送端B  </p></li><li><p>接收端A在9999端口等待接收数据(receive)  </p></li><li><p>发送端B向接收端A发送数据”hello,明天吃火锅~”  </p></li><li><p>接收端A接收到发送端B发送的数据，回复“好的，明天见”，再退出  </p></li><li><p>发送端接收回复的数据，再退出</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UDP接收端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceiverA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1. 创建一个 DatagramSocket 对象，准备在9999端口接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span><br>        <span class="hljs-comment">//   在UDP协议中，数据包最大为64k</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        <span class="hljs-comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><br>        <span class="hljs-comment">//   填充到 packet对象</span><br>        <span class="hljs-comment">//提示: 当有数据包发送到 本机的9999端口时，就会接收到数据</span><br>        <span class="hljs-comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span><br>        System.out.println(<span class="hljs-string">&quot;接收端A 等待接收数据..&quot;</span>);<br>        socket.receive(packet);<br><br>        <span class="hljs-comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><br>        <span class="hljs-type">byte</span>[] data = packet.getData();<span class="hljs-comment">//接收到数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//===回复信息给B端</span><br>        <span class="hljs-comment">//将需要发送的数据，封装到 DatagramPacket对象</span><br>        data = <span class="hljs-string">&quot;好的, 明天见&quot;</span>.getBytes();<br><span class="hljs-comment">//说明: 封装的DatagramPacket对象 data 内容字节数组, data.length, 目标主机(IP), 目标端口</span><br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.228.1&quot;</span>), <span class="hljs-number">9998</span>);<br><br>        socket.send(packet);<span class="hljs-comment">//发送</span><br><br>        <span class="hljs-comment">//5. 关闭资源</span><br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;A端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端B（也可以接收数据）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSenderB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//1.创建 DatagramSocket 对象，准备在9998端口接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9998</span>);<br><br>        <span class="hljs-comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span><br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="hljs-comment">//</span><br><br><span class="hljs-comment">//说明: 封装的DatagramPacket对象 data 内容字节数组, data.length, 目标主机(IP), 目标端口</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.228.1&quot;</span>), <span class="hljs-number">9999</span>);<br><br>        socket.send(packet);<br><br>        <span class="hljs-comment">//3.=== 接收从A端回复的信息</span><br>        <span class="hljs-comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span><br>        <span class="hljs-comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        <span class="hljs-comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><br>        <span class="hljs-comment">//   填充到 packet对象</span><br>        <span class="hljs-comment">//老师提示: 当有数据包发送到 本机的9998端口时，就会接收到数据</span><br>        <span class="hljs-comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span><br>        socket.receive(packet);<br><br>        <span class="hljs-comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><br>        data = packet.getData();<span class="hljs-comment">//接收到数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;B端退出&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h3> <img src="image-20220922153658489.png" alt="image-20220922153658489" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端, 使用字符流方式读写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 在本机 的9999端口监听, 等待连接</span><br>        <span class="hljs-comment">//   细节: 要求在本机没有其它服务在监听9999</span><br>        <span class="hljs-comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);<br>        <span class="hljs-comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span><br>        <span class="hljs-comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//4. IO读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equals(s)) &#123;<br>            answer = <span class="hljs-string">&quot;我是韩顺平&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;hobby&quot;</span>.equals(s)) &#123;<br>            answer = <span class="hljs-string">&quot;编写java程序&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            answer = <span class="hljs-string">&quot;你说的啥子&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 获取socket相关联的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//    使用字符输出流的方式回复信息</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br>        bufferedWriter.write(answer);<br>        bufferedWriter.newLine();<span class="hljs-comment">// 插入一个换行符，表示回复内容的结束</span><br>        bufferedWriter.flush();<span class="hljs-comment">//注意需要手动的flush</span><br><br>        <span class="hljs-comment">//6.关闭流和socket</span><br>        bufferedWriter.close();<br>        bufferedReader.close();<br>        socket.close();<br>        serverSocket.close();<span class="hljs-comment">//关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端，发送 &quot;hello, server&quot; 给服务端， 使用字符流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//思路</span><br>        <span class="hljs-comment">//1. 连接服务端 (ip , 端口）</span><br>        <span class="hljs-comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span><br>        <span class="hljs-comment">//   得到 和 socket对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br><br>        <span class="hljs-comment">//从键盘读取用户的问题</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入你的问题&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">question</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        bufferedWriter.write(question);<br>        bufferedWriter.newLine();<span class="hljs-comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span><br>        bufferedWriter.flush();<span class="hljs-comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span><br><br>        <span class="hljs-comment">//4. 获取和socket关联的输入流. 读取数据(字符)，并显示</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//5. 关闭流对象和socket, 必须关闭</span><br>        bufferedReader.close();<span class="hljs-comment">//关闭外层流</span><br>        bufferedWriter.close();<br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;客户端退出.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20220922153711315.png" alt="image-20220922153711315" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UDP接收端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02ReceiverA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1. 创建一个 DatagramSocket 对象，准备在8888接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span><br>        <span class="hljs-comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        <span class="hljs-comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><br>        <span class="hljs-comment">//   填充到 packet对象</span><br>        System.out.println(<span class="hljs-string">&quot;接收端 等待接收问题 &quot;</span>);<br>        socket.receive(packet);<br><br>        <span class="hljs-comment">//4. 可以把 packet 进行拆包，取出数据，并显示.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><br>        <span class="hljs-type">byte</span>[] data = packet.getData();<span class="hljs-comment">//接收到数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);<br>        <span class="hljs-comment">//判断接收到的信息是什么</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;四大名著是哪些&quot;</span>.equals(s)) &#123;<br>            answer = <span class="hljs-string">&quot;四大名著 &lt;&lt;红楼梦&gt;&gt; &lt;&lt;三国演示&gt;&gt; &lt;&lt;西游记&gt;&gt; &lt;&lt;水浒传&gt;&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            answer = <span class="hljs-string">&quot;what?&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//===回复信息给B端</span><br>        <span class="hljs-comment">//将需要发送的数据，封装到 DatagramPacket对象</span><br>        data = answer.getBytes();<br>        <span class="hljs-comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span><br>        packet =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.12.1&quot;</span>), <span class="hljs-number">9998</span>);<br><br>        socket.send(packet);<span class="hljs-comment">//发送</span><br><br>        <span class="hljs-comment">//5. 关闭资源</span><br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;A端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端B ====&gt; 也可以接收数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02SenderB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9998</span>);<br><br>        <span class="hljs-comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入你的问题: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">question</span> <span class="hljs-operator">=</span> scanner.next();<br>        <span class="hljs-type">byte</span>[] data = question.getBytes(); <span class="hljs-comment">//</span><br><br>        <span class="hljs-comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.12.1&quot;</span>), <span class="hljs-number">8888</span>);<br><br>        socket.send(packet);<br><br>        <span class="hljs-comment">//3.=== 接收从A端回复的信息</span><br>        <span class="hljs-comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span><br>        <span class="hljs-comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        <span class="hljs-comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><br>        <span class="hljs-comment">//   填充到 packet对象</span><br>        <span class="hljs-comment">//老师提示: 当有数据包发送到 本机的9998端口时，就会接收到数据</span><br>        <span class="hljs-comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span><br>        socket.receive(packet);<br><br>        <span class="hljs-comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><br>        data = packet.getData();<span class="hljs-comment">//接收到数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;B端退出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20220922153817732.png" alt="image-20220922153817732" style="zoom:50%;" /> <img src="image-20220922162428406.png" alt="image-20220922162428406" style="zoom: 65%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 先写文件下载的服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//1 监听 9999端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2.等待客户端连接</span><br>        System.out.println(<span class="hljs-string">&quot;服务端，在9999端口监听，等待下载文件&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        <span class="hljs-comment">//3.读取 客户端发送要下载的文件名</span><br>        <span class="hljs-comment">//  这里老师使用了while读取文件名，是考虑将来客户端发送的数据较大的情况</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">downLoadFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>            downLoadFileName += <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b, <span class="hljs-number">0</span> , len);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;客户端希望下载文件名=&quot;</span> + downLoadFileName);<br><br>        <span class="hljs-comment">//老师在服务器上有两个文件, 无名.mp3 高山流水.mp3</span><br>        <span class="hljs-comment">//如果客户下载的是 高山流水 我们就返回该文件，否则一律返回 无名.mp3</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;高山流水&quot;</span>.equals(downLoadFileName)) &#123;<br>            resFileName = <span class="hljs-string">&quot;src\\高山流水.mp3&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resFileName = <span class="hljs-string">&quot;src\\无名.mp3&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//4. 创建一个输入流，读取文件</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(resFileName));<br><br>        <span class="hljs-comment">//5. 使用工具类StreamUtils，读取文件到一个字节数组</span><br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<br>        <span class="hljs-comment">//6. 得到Socket关联的输出流</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(socket.getOutputStream());<br>        <span class="hljs-comment">//7. 写入到数据通道，返回给客户端</span><br>        bos.write(bytes);<br>        socket.shutdownOutput();<span class="hljs-comment">//很关键.</span><br><br>        <span class="hljs-comment">//8 关闭相关的资源</span><br>        bis.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>        System.out.println(<span class="hljs-string">&quot;服务端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件下载的客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 接收用户输入，指定下载文件名</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入下载文件名&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadFileName</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        <span class="hljs-comment">//2. 客户端连接服务端，准备发送</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//3. 获取和Socket关联的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(downloadFileName.getBytes());<br>        <span class="hljs-comment">//设置写入结束的标志</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//4. 读取服务端返回的文件(字节数据)</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(socket.getInputStream());<br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<br>        <span class="hljs-comment">//5. 得到一个输出流，准备将 bytes 写入到磁盘文件</span><br>        <span class="hljs-comment">//比如你下载的是 高山流水 =&gt; 下载的就是 高山流水.mp3</span><br>        <span class="hljs-comment">//    你下载的是 韩顺平 =&gt; 下载的就是 无名.mp3  文件名 韩顺平.mp3</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\&quot;</span> + downloadFileName + <span class="hljs-string">&quot;.mp3&quot;</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br>        bos.write(bytes);<br><br>        <span class="hljs-comment">//6. 关闭相关的资源</span><br>        bos.close();<br>        bis.close();<br>        outputStream.close();<br>        socket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;客户端下载完毕，正确退出..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类用于演示关于流的读写方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamUtils</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：将输入流转换成byte[]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] streamToByteArray(InputStream is) <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<span class="hljs-comment">//创建输出流对象</span><br><span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=is.read(b))!=-<span class="hljs-number">1</span>)&#123;<br>bos.write(b, <span class="hljs-number">0</span>, len);<br>&#125;<br><span class="hljs-type">byte</span>[] array = bos.toByteArray();<br>bos.close();<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：将InputStream转换成String</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>StringBuilder builder= <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>String line;<br><span class="hljs-keyword">while</span>((line=reader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>builder.append(line+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><h4 id="基本介绍-9"><a href="#基本介绍-9" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>反射机制允许程序在执行期借助于 Reflection API 取得任何类的内部信息（比如成员变量，构造器，成员方法等等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到</p></li><li><p>加载完类之后，在堆中就产生了一个 Class 类型的对象（一个类只有一个 Class 对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。</p><p>这个 Class 对象就像一面镜子，透过这个镜子看到类的结构，所以形象地称之为：反射</p></li><li><p>普通：p 对象  –&gt;  类型 Person类</p></li><li><p>反射：Class 对象  cls  —&gt;  类型 Class类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射问题的引入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.hspedu.Cat;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionQuestion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//根据配置文件 re.properties 指定信息, 创建Cat对象并调用方法hi</span><br>        <span class="hljs-comment">//回忆</span><br>        <span class="hljs-comment">//传统的方式 new 对象 -》 调用方法</span><br><span class="hljs-comment">//        Cat cat = new Cat();</span><br><span class="hljs-comment">//        cat.hi(); ===&gt; cat.cry() 修改源码.</span><br><br>        <span class="hljs-comment">//我们尝试做一做 -&gt; 明白反射</span><br>        <span class="hljs-comment">//1. 使用Properties 类, 可以读写配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\re.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classfullpath</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;classfullpath&quot;</span>).toString();<span class="hljs-comment">//&quot;com.hspedu.Cat&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;method&quot;</span>).toString();<span class="hljs-comment">//&quot;hi&quot;</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classfullpath);<br>        System.out.println(<span class="hljs-string">&quot;method=&quot;</span> + methodName);<br><br>        <span class="hljs-comment">//2. 创建对象 , 传统的方法，行不通 =》 反射机制</span><br>        <span class="hljs-comment">//new classfullpath();</span><br><br>        <span class="hljs-comment">//3. 使用反射机制解决</span><br>        <span class="hljs-comment">//(1) 加载类, 返回Class类型的对象cls</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(classfullpath);<br>        <span class="hljs-comment">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="hljs-comment">//运行类型</span><br>        <span class="hljs-comment">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName&quot;hi&quot;  的方法对象</span><br>        <span class="hljs-comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> cls.getMethod(methodName);<br>        <span class="hljs-comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span><br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        method1.invoke(o); <span class="hljs-comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反射机制原理示意图"><a href="#反射机制原理示意图" class="headerlink" title="反射机制原理示意图"></a>反射机制原理示意图</h4> <img src="image-20220924103955134.png" alt="image-20220924103955134" style="zoom:54%;" /><h4 id="反射机制可以完成的事"><a href="#反射机制可以完成的事" class="headerlink" title="反射机制可以完成的事"></a>反射机制可以完成的事</h4><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ul><h4 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h4><ul><li>java.lang.Class：代表一个类，Class对象 表示某个类加载后在堆中的对象</li><li>java.lang.reflect.Method：代表类的方法，Method对象 表示某个类的方法</li><li>java.lang.reflect.Field：代表类的成员变量，Field对象表示某个类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造方法，Constructor对象表示构造器</li><li>这些类在 包 java.lang.reflect 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//1. 使用Properties 类, 可以读写配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\re.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classfullpath</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;classfullpath&quot;</span>).toString();<span class="hljs-comment">//&quot;com.hspedu.Cat&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> properties.get(<span class="hljs-string">&quot;method&quot;</span>).toString();<span class="hljs-comment">//&quot;hi&quot;</span><br><br>        <span class="hljs-comment">//2. 使用反射机制解决</span><br>        <span class="hljs-comment">//(1) 加载类, 返回Class类型的对象cls</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(classfullpath);<br>        <span class="hljs-comment">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="hljs-comment">//运行类型</span><br>        <span class="hljs-comment">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName&quot;hi&quot;  的方法对象</span><br>        <span class="hljs-comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> cls.getMethod(methodName);<br>        <span class="hljs-comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span><br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        method1.invoke(o); <span class="hljs-comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span><br><br>        <span class="hljs-comment">//java.lang.reflect.Field: 代表类的成员变量, Field对象表示某个类的成员变量</span><br>        <span class="hljs-comment">//得到name字段</span><br>        <span class="hljs-comment">//注意：getField不能得到私有的属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> cls.getField(<span class="hljs-string">&quot;age&quot;</span>); <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 传统写法：对象.成员变量 ； 反射：成员变量对象.get(对象)</span><br>        System.out.println(nameField.get(o));<br><br>        <span class="hljs-comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor对象表示构造器</span><br>        <span class="hljs-comment">//在()中可以指定构造器参数类型, 下面返回的是无参构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cls.getConstructor();<br>        System.out.println(constructor);<span class="hljs-comment">//Cat()</span><br>        <span class="hljs-comment">//下面返回的是带有参数(String name)的构造器</span><br>        <span class="hljs-comment">//这里传入的 String.class 就是String类的Class对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> cls.getConstructor(String.class);<br>        System.out.println(constructor2);<span class="hljs-comment">//Cat(String name)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反射优点和缺点"><a href="#反射优点和缺点" class="headerlink" title="反射优点和缺点"></a>反射优点和缺点</h4><ul><li>优点：可以动态的创建和使用对象（框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑</li><li>缺点：使用反射基本是解释执行，对执行速度有影响</li></ul><h4 id="反射调用优化-关闭访问检查"><a href="#反射调用优化-关闭访问检查" class="headerlink" title="反射调用优化 - 关闭访问检查"></a>反射调用优化 - 关闭访问检查</h4><ul><li><p>Method 和 Field、Constructor对象都有 setAccessible() 方法</p></li><li><p>setAccessible 作用是启动和启动和禁用访问安全检查的开关</p></li><li><p>参数值为 true 表示 反射的对象在使用时去校访问检查，提高反射的效率。</p><p>参数值为 false 表示 反射的对象执行访问检查</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试反射调用的性能，和优化方案</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.hspedu.Cat;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//Field</span><br>        <span class="hljs-comment">//Method</span><br>        <span class="hljs-comment">//Constructor</span><br>        m1();<br>        m2();<br>        m3();<br>    &#125;<br><br>    <span class="hljs-comment">//传统方法来调用hi</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">900000000</span>; i++) &#123;<br>            cat.hi();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;m1() 耗时=&quot;</span> + (end - start));<br>    &#125;<br><br>    <span class="hljs-comment">//反射机制调用方法hi</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.hspedu.Cat&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">900000000</span>; i++) &#123;<br>            hi.invoke(o);<span class="hljs-comment">//反射调用方法</span><br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;m2() 耗时=&quot;</span> + (end - start));<br>    &#125;<br><br>    <span class="hljs-comment">//反射调用优化 + 关闭访问检查</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;<br>        <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.hspedu.Cat&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>        hi.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//在反射调用方法时，取消访问检查</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">900000000</span>; i++) &#123;<br>            hi.invoke(o);<span class="hljs-comment">//反射调用方法</span><br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;m3() 耗时=&quot;</span> + (end - start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><h4 id="基本介绍-10"><a href="#基本介绍-10" class="headerlink" title="基本介绍"></a>基本介绍</h4> <img src="image-20220924091230962.png" alt="image-20220924091230962" style="zoom:46%;" /><ul><li>Class 也是类，因此也继承 Object 类</li><li>Class 类对象不是 new 出来的，而是系统创建的</li><li>对于某个类的 Class 类对象，在内存中只能有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生产的</li><li>通过 Class 对象可以得到一个类的完整结构，通过一系列 API</li><li>Class 对象是存放在堆中的</li><li>类的字节码二进制数据，是存放在方法区的，有的地方称为类的元数据（包括 方法代码、变量名、方法名、访问权限等等）[<a href="https://www.zhihu.com/question/38496907]">https://www.zhihu.com/question/38496907]</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对Class类特点的梳理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.hspedu.Cat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//看看Class类图</span><br>        <span class="hljs-comment">//1. Class也是类，因此也继承Object类</span><br>        <span class="hljs-comment">//Class</span><br>        <span class="hljs-comment">//2. Class类对象不是new出来的，而是系统创建的</span><br>        <span class="hljs-comment">//(1) 传统new对象</span><br>        <span class="hljs-comment">/*  ClassLoader类</span><br><span class="hljs-comment">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class="hljs-comment">                return loadClass(name, false);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        Cat cat = new Cat();</span><br>        <span class="hljs-comment">//(2) 反射方式, 刚才没有debug到 ClassLoader类的 loadClass,</span><br>        <span class="hljs-comment">//    原因是，没有注销Cat cat = new Cat();</span><br>        <span class="hljs-comment">//    而类只会加载一次</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            ClassLoader类, 仍然是通过 ClassLoader类加载Cat类的 Class对象</span><br><span class="hljs-comment">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class="hljs-comment">                return loadClass(name, false);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.hspedu.Cat&quot;</span>);<br><br>        <span class="hljs-comment">//3. 对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.hspedu.Cat&quot;</span>);<br>        <span class="hljs-comment">// cls1 与 cls2 是同一个对象</span><br>        System.out.println(cls1.hashCode());<br>        System.out.println(cls2.hashCode());<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.hspedu.Dog&quot;</span>);<br>        System.out.println(cls3.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Class-类的常用方法"><a href="#Class-类的常用方法" class="headerlink" title="Class 类的常用方法"></a>Class 类的常用方法</h4> <img src="image-20220924093824530.png" alt="image-20220924093824530" style="zoom:60%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示Class类的常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.hspedu.Car;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.hspedu.Car&quot;</span>;<br>        <span class="hljs-comment">//1 . 获取到Car类 对应的 Class对象</span><br>        <span class="hljs-comment">//    &lt;?&gt; 表示不确定的Java类型</span><br>        Class&lt;?&gt; cls = Class.forName(classAllPath);<br>        <span class="hljs-comment">//2. 输出cls</span><br>        <span class="hljs-comment">//显示cls对象, 是哪个类的Class对象： com.hspedu.Car</span><br>        System.out.println(cls);<br>        <span class="hljs-comment">//输出cls运行类型： java.lang.Class</span><br>        System.out.println(cls.getClass());<br>        <span class="hljs-comment">//3. 得到包名</span><br>        System.out.println(cls.getPackage().getName());<span class="hljs-comment">//包名</span><br>        <span class="hljs-comment">//4. 得到全类名</span><br>        System.out.println(cls.getName());<br>        <span class="hljs-comment">//5. 通过cls创建对象实例</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) cls.newInstance();<br>        System.out.println(car);<span class="hljs-comment">//car.toString()</span><br>        <span class="hljs-comment">//6. 通过反射获取属性 brand</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> cls.getField(<span class="hljs-string">&quot;brand&quot;</span>);<br>        System.out.println(brand.get(car));<span class="hljs-comment">//宝马</span><br>        <span class="hljs-comment">//7. 通过反射给属性赋值</span><br>        brand.set(car, <span class="hljs-string">&quot;奔驰&quot;</span>);<br>        System.out.println(brand.get(car));<span class="hljs-comment">//奔驰</span><br>        <span class="hljs-comment">//8 我希望大家可以得到所有的属性(字段)</span><br>        System.out.println(<span class="hljs-string">&quot;=======所有的字段属性====&quot;</span>);<br>        Field[] fields = cls.getFields();<br>        <span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>            System.out.println(f.getName());<span class="hljs-comment">//名称</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取-Class-类对象"><a href="#获取-Class-类对象" class="headerlink" title="获取 Class 类对象"></a>获取 Class 类对象</h3><ul><li><p>前提：已知一个类的全类名，且该类在类路径下，可通过 Class 类的静态方法 forName() 获取，可能抛出 ClassNotFoundException，</p><p>实例：Class cls1 &#x3D; Class.forName(“java.lang.Cat”); </p><p>应用场景：多用于配置文件，读取类全路径，加载类</p></li><li><p>前提：若已知具体的类，通过类的 class 获取，该方式 最为安全可靠，程序性能最高</p><p>实例：Class cls2 &#x3D; Cat.class;</p><p>应用场景：多用于参数传递，比如反射得到对应构造器对象</p></li><li><p>前提：已知某个类的实例，调用该实例的 getClass() 方法获取 Class 对象</p><p>实例：Class cla3 &#x3D; 对象.getClass();  &#x2F;&#x2F;运行类型</p><p>应用场景：通过创建好的对象，获取 Class 对象</p></li><li><p>其它方式：（类加载器）</p><p>ClassLoader cl &#x3D; 对象.getClass().getClassLoader();</p><p>Class cla4 &#x3D; cl.loadClass(“类的全类名”);</p></li><li><p>基本数据（int, char, boolean, float, double, byte, long, short）按如下方式得到 Class 类对象</p><p>Class cls &#x3D; 基本数据类型.class</p></li><li><p>基本数据类型对应的包装类，可以通过 .TYPE 得到 Class 类对象</p><p>Class cls &#x3D; 包装类.TYPE</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示得到Class对象的各种方式(6)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.hspedu.Car;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetClass_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//1.Class.forName  ,  多用于配置文件，读取类全路径，加载类</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.hspedu.Car&quot;</span>; <span class="hljs-comment">//通过读取配置文件获取</span><br>        Class&lt;?&gt; cls1 = Class.forName(classAllPath);<br>        System.out.println(cls1);<br><br>        <span class="hljs-comment">//2. 类名.class , 多用于参数传递</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Car.class;<br>        System.out.println(cls2);<br><br>        <span class="hljs-comment">//3. 对象.getClass() , 应用场景，已经有对象实例时</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> car.getClass();<br>        System.out.println(cls3);<br><br>        <span class="hljs-comment">//4. 通过类加载器【4种】来获取到类的Class对象 （这种方式的优点？）</span><br>        <span class="hljs-comment">//(1)先得到类加载器 car</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> car.getClass().getClassLoader();<br>        <span class="hljs-comment">//(2)通过类加载器得到Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls4</span> <span class="hljs-operator">=</span> classLoader.loadClass(classAllPath);<br>        System.out.println(cls4);<br><br>        <span class="hljs-comment">//cls1 , cls2 , cls3 , cls4 其实是同一个对象</span><br>        System.out.println(cls1.hashCode());<br>        System.out.println(cls2.hashCode());<br>        System.out.println(cls3.hashCode());<br>        System.out.println(cls4.hashCode());<br><br>        <span class="hljs-comment">//5. 基本数据(int, char,boolean,float,double,byte,long,short)按如下方式得到Class类对象</span><br>        Class&lt;Integer&gt; integerClass = <span class="hljs-type">int</span>.class;<br>        Class&lt;Character&gt; characterClass = <span class="hljs-type">char</span>.class;<br>        Class&lt;Boolean&gt; booleanClass = <span class="hljs-type">boolean</span>.class;<br>        System.out.println(integerClass);<span class="hljs-comment">//int 自动拆箱</span><br><br>        <span class="hljs-comment">//6. 基本数据类型对应的包装类，可以通过 .TYPE 得到Class类对象</span><br>        Class&lt;Integer&gt; type1 = Integer.TYPE;<br>        Class&lt;Character&gt; type2 = Character.TYPE; <span class="hljs-comment">//其它包装类BOOLEAN, DOUBLE, LONG,BYTE等待</span><br>        System.out.println(type1);<span class="hljs-comment">//int 自动拆箱</span><br>        <span class="hljs-comment">// 这两种方式得到的时同一个对象</span><br>        System.out.println(integerClass.hashCode());<span class="hljs-comment">//</span><br>        System.out.println(type1.hashCode());<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="哪些类型有-Class-对象"><a href="#哪些类型有-Class-对象" class="headerlink" title="哪些类型有 Class 对象"></a>哪些类型有 Class 对象</h3><ol><li><p>外部类，成员内部类，静态内部类，局部内部类，匿名内部类  </p></li><li><p>interface:接口</p></li><li><p>数组  </p></li><li><p>enum:枚举  </p></li><li><p>annotation:注解  </p></li><li><p>基本数据类型  </p></li><li><p>void</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示哪些类型有Class对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllTypeClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Class&lt;String&gt; cls1 = String.class;<span class="hljs-comment">//外部类</span><br>        Class&lt;Serializable&gt; cls2 = Serializable.class;<span class="hljs-comment">//接口</span><br>        Class&lt;Integer[]&gt; cls3 = Integer[].class;<span class="hljs-comment">//数组</span><br>        Class&lt;<span class="hljs-type">float</span>[][]&gt; cls4 = <span class="hljs-type">float</span>[][].class;<span class="hljs-comment">//二维数组</span><br>        Class&lt;Deprecated&gt; cls5 = Deprecated.class;<span class="hljs-comment">//注解</span><br>        Class&lt;Thread.State&gt; cls6 = Thread.State.class;<span class="hljs-comment">//枚举</span><br>        Class&lt;Long&gt; cls7 = <span class="hljs-type">long</span>.class;<span class="hljs-comment">//基本数据类型</span><br>        Class&lt;Void&gt; cls8 = <span class="hljs-keyword">void</span>.class;<span class="hljs-comment">//void数据类型</span><br>        Class&lt;Class&gt; cls9 = Class.class;<span class="hljs-comment">//Class也是外部类</span><br><br>        System.out.println(cls1);<br>        System.out.println(cls2);<br>        System.out.println(cls3);<br>        System.out.println(cls4);<br>        System.out.println(cls5);<br>        System.out.println(cls6);<br>        System.out.println(cls7);<br>        System.out.println(cls8);<br>        System.out.println(cls9);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="基本说明-1"><a href="#基本说明-1" class="headerlink" title="基本说明"></a>基本说明</h4><p>反射机制是 Java 实现动态语言的关键，也就是通过反射实现类动态加载</p><ul><li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果实际运行时没用到该类，则即使不存在该类也不报错，降低了依赖性</li></ul><h4 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h4><ul><li>当创建对象时（new）  &#x2F;&#x2F;静态加载</li><li>当子类被加载时，父类也加载  &#x2F;&#x2F;静态加载</li><li>调用类中的静态成员时  &#x2F;&#x2F;静态加载</li><li>通过反射  &#x2F;&#x2F;动态加载     例：Class.forName(“com.test.Cat”);</li></ul><h4 id="类加载过程图"><a href="#类加载过程图" class="headerlink" title="类加载过程图"></a>类加载过程图</h4> <img src="image-20220924113503012.png" alt="image-20220924113503012" style="zoom: 78%;" /><h4 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h4><p>JVM在该阶段的主要目的是将字节码从不同的数据源（可能是class文件、也可能是 jar包，甚至网络）转化为<strong>二进制字节流</strong>加载到内存中，并生成一个代表该类的  java.lang.Class 对象</p><h4 id="连接阶段-验证"><a href="#连接阶段-验证" class="headerlink" title="连接阶段-验证"></a>连接阶段-验证</h4><ol><li><p>目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p></li><li><p>包括：文件格式验证（是否以魔数 oxcafebabe 开头）、元数据验证、字节码验证和符号引用验证 [举例说明]        </p></li><li><p>可以考虑使用 -Xverify:none 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间。</p></li></ol><h4 id="连接阶段-准备"><a href="#连接阶段-准备" class="headerlink" title="连接阶段-准备"></a>连接阶段-准备</h4><p>JVM 会在该阶段对静态变量，分配内存并默认初始化（对应数据类型的默认初始值，如 0、0L、null、false等）。这些变量所使用的内存都将在方法区中进行分配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 说明类加载的链接阶段-准备</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//属性-成员变量-字段</span><br>    <span class="hljs-comment">//老韩分析类加载的链接阶段-准备 属性是如何处理</span><br>    <span class="hljs-comment">//1. n1 是实例属性, 不是静态变量，因此在准备阶段，是不会分配内存</span><br>    <span class="hljs-comment">//2. n2 是静态变量，分配内存 n2 是默认初始化为 0 , 而不是 20（到初始化阶段才会初始化为20）</span><br>    <span class="hljs-comment">//3. n3 是 static final, 是常量, 它和静态变量不一样, 因为一旦赋值就不变 n3 = 30</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="连接阶段-解析"><a href="#连接阶段-解析" class="headerlink" title="连接阶段-解析"></a>连接阶段-解析</h4><p>虚拟机将常量池内的 符号引用 替换为 直接引用（内存地址）的过程。</p><h4 id="初始化（Initialization"><a href="#初始化（Initialization" class="headerlink" title="初始化（Initialization)"></a>初始化（Initialization)</h4><ul><li>到了初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行&lt;clinit&gt;() 方法的过程</li><li>&lt;clinit&gt;() 方法是由编译器按语句在源文件中出现的顺序，一次自动收集类中所有的静态变量的赋值动作和静态代码块中的语句，并进行合并</li><li>虚拟机会保证一个类的 &lt;clinit&gt;() 方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 &lt;clinit&gt;() 方法，其它线程都需要阻塞等待，直到活动线程执行 &lt;clinit&gt;() 方法完毕</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示类加载-初始化阶段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoad03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//分析</span><br>        <span class="hljs-comment">//1. 加载B类，并生成 B的class对象</span><br>        <span class="hljs-comment">//2. 连接阶段 num = 0</span><br>        <span class="hljs-comment">//3. 初始化阶段</span><br>        <span class="hljs-comment">//   依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并合并</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            clinit() &#123;</span><br><span class="hljs-comment">                System.out.println(&quot;B 静态代码块被执行&quot;);</span><br><span class="hljs-comment">                //num = 300;</span><br><span class="hljs-comment">                num = 100;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            合并: num = 100</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//new B();//类加载</span><br>        <span class="hljs-comment">//System.out.println(B.num);//100, 如果直接使用类的静态属性，也会导致类的加载</span><br><br>        <span class="hljs-comment">//看看加载类的时候，是有同步机制控制</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class="hljs-comment">        throws ClassNotFoundException</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            //正因为有这个机制，才能保证某个类在内存中, 只有一份Class对象</span><br><span class="hljs-comment">            synchronized (getClassLoadingLock(name)) &#123;</span><br><span class="hljs-comment">            //....</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 静态代码块被执行&quot;</span>);<br>        num = <span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B() 构造器被执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射获取类的结构"><a href="#反射获取类的结构" class="headerlink" title="反射获取类的结构"></a>反射获取类的结构</h3><h4 id="一-java-lang-Class-类"><a href="#一-java-lang-Class-类" class="headerlink" title="一: java.lang.Class 类"></a>一: java.lang.Class 类</h4><ul><li>getName：获取全类名</li><li>getSimpleName：获取简单类名</li><li>getFields：获取所有 public 修饰的属性，包含本类以及父类的</li><li>getDeclaredFields：获取本类中所有属性</li><li>getMethods：获取所有 public 修饰的方法，包含本类以及父类的</li><li>getDeclaredMethods：获取本类中所有方法</li><li>getConstructors：获取本类所有 public 修饰的构造器</li><li>getDeclaredConstructors：获取本类中所有构造器</li><li>getPackage：以 Package 形式返回包信息</li><li>getSuperClass：以 Class 形式返回父类信息</li><li>getlnterfaces：以 Class[] 形式返回接口信息</li><li>getAnnotations：以 Annotation[] 形式返回注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一组方法API</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api_01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br><br>    <span class="hljs-comment">//得到Class对象</span><br>    Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.Person&quot;</span>);<br>    <span class="hljs-comment">//getName:获取全类名</span><br>    System.out.println(personCls.getName());<span class="hljs-comment">//com.hspedu.reflection.Person</span><br>    <span class="hljs-comment">//getSimpleName:获取简单类名</span><br>    System.out.println(personCls.getSimpleName());<span class="hljs-comment">//Person</span><br>    <span class="hljs-comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span><br>    Field[] fields = personCls.getFields();<br>    <span class="hljs-keyword">for</span> (Field field : fields) &#123;<span class="hljs-comment">//增强for</span><br>        System.out.println(<span class="hljs-string">&quot;本类以及父类的public属性=&quot;</span> + field.getName());<br>    &#125;<br>    <span class="hljs-comment">//getDeclaredFields:获取本类中所有属性</span><br>    Field[] declaredFields = personCls.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());<br>    &#125;<br>    <span class="hljs-comment">//getMethods:获取所有public修饰的方法，包含本类以及父类（不局限于直接父类）的</span><br>    Method[] methods = personCls.getMethods();<br>    <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类以及父类的方法=&quot;</span> + method.getName());<br>    &#125;<br>    <span class="hljs-comment">//getDeclaredMethods:获取本类中所有方法</span><br>    Method[] declaredMethods = personCls.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());<br>    &#125;<br>    <span class="hljs-comment">//getConstructors: 获取本类所有 public 修饰的构造器</span><br>    Constructor&lt;?&gt;[] constructors = personCls.getConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类的构造器=&quot;</span> + constructor.getName());<br>    &#125;<br>    <span class="hljs-comment">//getDeclaredConstructors:获取本类中所有构造器（包括私有构造器）</span><br>    Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<br>        <span class="hljs-comment">//这里老师只是输出名字</span><br>    &#125;<br>    <span class="hljs-comment">//getPackage:以Package形式返回 包信息</span><br>    System.out.println(personCls.getPackage());<span class="hljs-comment">//com.hspedu.reflection</span><br>    <span class="hljs-comment">//getSuperClass:以Class形式返回父类信息</span><br>    Class&lt;?&gt; superclass = personCls.getSuperclass();<br>    System.out.println(<span class="hljs-string">&quot;父类的class对象=&quot;</span> + superclass);<span class="hljs-comment">//</span><br>    <span class="hljs-comment">//getInterfaces:以Class[]形式返回接口信息</span><br>    Class&lt;?&gt;[] interfaces = personCls.getInterfaces();<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;<br>        System.out.println(<span class="hljs-string">&quot;接口信息=&quot;</span> + anInterface);<br>    &#125;<br>    <span class="hljs-comment">//getAnnotations:以Annotation[] 形式返回注解信息</span><br>    Annotation[] annotations = personCls.getAnnotations();<br>    <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>        System.out.println(<span class="hljs-string">&quot;注解信息=&quot;</span> + annotation);<span class="hljs-comment">//注解</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> String hobby;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name)</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123; &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IB</span> &#123; &#125;<br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>, IB &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 4 + 8 = 12</span><br>    String job;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;&#125;<br>    <span class="hljs-comment">//私有的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> sal)</span> &#123;&#125;<br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二-java-lang-reflect-Field-类"><a href="#二-java-lang-reflect-Field-类" class="headerlink" title="二: java.lang.reflect.Field 类"></a>二: java.lang.reflect.Field 类</h4><ul><li><p>getModifiers：以 int 形式返回修饰符</p><p>[说明：默认修饰符：0，public：1，private：2，protected：4，static：8，final：16]</p><p>特别的，若被多个同时修饰符修饰则相加，如：public(1) + static(8) &#x3D; 9</p></li><li><p>getType：以 Class 形式 返回 属性类型（的Class对象）</p></li><li><p>getName：返回属性名</p></li></ul><h4 id="三-java-lang-reflect-Method-类"><a href="#三-java-lang-reflect-Method-类" class="headerlink" title="三: java.lang.reflect.Method 类"></a>三: java.lang.reflect.Method 类</h4><ul><li><p>getModifiers：以 int 形式返回修饰符</p><p>[说明：默认修饰符：0，public：1，private：2，protected：4，static：8，final：16]</p><p>特别的，若被多个同时修饰符修饰则相加，如：public(1) + static(8) &#x3D; 9</p></li><li><p>getReturnType：以 Class 形式获取返回类型（的Class对象）</p></li><li><p>getName：返回方法名</p></li><li><p>getParameterTypes：以 Class[] 返回参数类型数组</p></li></ul><h4 id="四-java-lang-reflect-Constructor-类"><a href="#四-java-lang-reflect-Constructor-类" class="headerlink" title="四: java.lang.reflect.Constructor 类"></a>四: java.lang.reflect.Constructor 类</h4><ul><li><p>getModifiers：以 int 形式返回修饰符</p><p>[说明：默认修饰符：0，public：1，private：2，protected：4，static：8，final：16]</p><p>特别的，若被多个同时修饰符修饰则相加，如：public(1) + static(8) &#x3D; 9</p></li><li><p>getName：返回构造器名（全类名）</p></li><li><p>getParameterTypes：以 Class[] 返回参数类型数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第二、三、四组</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api_02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>    <span class="hljs-comment">//得到Class对象</span><br>    Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.Person&quot;</span>);<br>    <span class="hljs-comment">//getDeclaredFields:获取本类中所有属性</span><br>    <span class="hljs-comment">//规定 说明: 默认修饰符是0，public是1，private是2，protected是4，static是8，final是16</span><br>    Field[] declaredFields = personCls.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()<br>                           + <span class="hljs-string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()<br>                           + <span class="hljs-string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());<br>    &#125;<br><br>    <span class="hljs-comment">//getDeclaredMethods:获取本类中所有方法</span><br>    Method[] declaredMethods = personCls.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName()<br>                           + <span class="hljs-string">&quot; 该方法的访问修饰符值=&quot;</span> + declaredMethod.getModifiers()<br>                           + <span class="hljs-string">&quot; 该方法返回类型&quot;</span> + declaredMethod.getReturnType());<br><br>        <span class="hljs-comment">//输出当前这个方法的形参数组情况</span><br>        Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该方法的形参类型=&quot;</span> + parameterType);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//getDeclaredConstructors:获取本类中所有构造器</span><br>    Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;<br>        System.out.println(<span class="hljs-string">&quot;====================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="hljs-comment">//这里老师只是输出名</span><br><br>        Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该构造器的形参类型=&quot;</span> + parameterType);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> String hobby;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name)</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123; &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IB</span> &#123; &#125;<br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>, IB &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 4 + 8 = 12</span><br>    String job;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;&#125;<br>    <span class="hljs-comment">//私有的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> sal)</span> &#123;&#125;<br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h3><ul><li><p>方式一：调用类中的 public 修饰的无参构造器</p></li><li><p>方式二：调用类中的指定构造器</p></li><li><p>Class类 相关方法</p><ul><li>newInstance：调用类中的无参构造器，获取对应类的对象</li><li>getConstructor(Class…clazz)：根据参数列表，获取对应的 public 构造器对象</li><li>getDecalaredConstructor(Class..clazz)：根据参数列表，获取对应的所有构造器对象</li></ul></li><li><p>Constructor类 相关方法</p><ul><li>setAccessible：暴破【暴力破解】，使用反射可以访问 private 构造器&#x2F;方法&#x2F;属性</li><li>newInstance(Object..obj)：调用构造器</li></ul></li></ul><p>案例演示 com.hspedu.reflection ReflecCreateInstance.java</p><p>测试 1：通过反射创建某类的对象，要求该类中必须有 public 的无参构造</p><p>测试 2：通过调用某个特定构造器的方式，实现创建某类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示通过反射机制创建实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflecCreateInstance</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;<br><br>        <span class="hljs-comment">//1. 先获取到User类的Class对象</span><br>        Class&lt;?&gt; userClass = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.User&quot;</span>);<br>        <span class="hljs-comment">//2. 通过public的无参构造器创建实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> userClass.newInstance();<br>        System.out.println(o);<br>        System.out.println(o.hashCode());<br>        <span class="hljs-comment">//3. 通过public的有参构造器创建实例</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            constructor 对象就是</span><br><span class="hljs-comment">            public User(String name) &#123;//public的有参构造器</span><br><span class="hljs-comment">                this.name = name;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//  3.1 先得到对应构造器</span><br>        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);<br>        <span class="hljs-comment">//  3.2 创建实例，并传入实参</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;hsp&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hsp=&quot;</span> + hsp);<br>        System.out.println(hsp.hashCode());<br>        <span class="hljs-comment">//4. 通过非public的有参构造器创建实例</span><br>        <span class="hljs-comment">//  4.1 得到private的构造器对象</span><br>        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="hljs-type">int</span>.class, String.class);<br>        <span class="hljs-comment">//  4.2 创建实例</span><br>        <span class="hljs-comment">//暴破【暴力破解】, 使用反射可以访问private构造器/方法/属性, 反射面前，都是纸老虎</span><br>        constructor1.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> constructor1.newInstance(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;张三丰&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user2=&quot;</span> + user2);<br>        System.out.println(user2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123; <span class="hljs-comment">//User类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//无参 public</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-comment">//public的有参构造器</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<span class="hljs-comment">//private 有参构造器</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h3><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><ul><li><p>根据属性名获取 Field 对象</p><p>Field f &#x3D; clazz对象.getDeclaredField(属性名);</p></li><li><p>暴破：field.setAccessible(true);  &#x2F;&#x2F; field 是 Field</p></li><li><p>访问：</p><p>f.set(obj, val);  </p><p>syso(field.get(obj));</p></li><li><p>补充：如果是静态属性，则 set 和 get 中的参数 obj，可以写成 null</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示反射操作属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflecAccessProperty</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;<br><br>        <span class="hljs-comment">//1. 得到Student类对应的 Class对象</span><br>        Class&lt;?&gt; stuClass = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.Student&quot;</span>);<br>        <span class="hljs-comment">//2. 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> stuClass.newInstance();<span class="hljs-comment">//o 的运行类型就是Student</span><br>        System.out.println(o.getClass());<span class="hljs-comment">//Student</span><br>        <span class="hljs-comment">//3. 使用反射得到age 属性对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stuClass.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(o, <span class="hljs-number">88</span>);<span class="hljs-comment">//通过反射来操作属性</span><br>        System.out.println(o);<span class="hljs-comment">//</span><br>        System.out.println(age.get(o));<span class="hljs-comment">//返回age属性的值</span><br><br>        <span class="hljs-comment">//4. 使用反射操作 name 属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stuClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">//对 name 进行暴破, 可以操作private 属性</span><br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//name.set(o, &quot;老韩&quot;);</span><br>        name.set(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;老韩~&quot;</span>);<span class="hljs-comment">//因为name是static属性，因此 o 也可以写出null</span><br>        System.out.println(o);<br>        System.out.println(name.get(o)); <span class="hljs-comment">//获取属性值</span><br>        System.out.println(name.get(<span class="hljs-literal">null</span>));<span class="hljs-comment">//获取属性值, 要求name是static</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//构造器</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h4><ul><li><p>根据方法名和参数列表获取 Method 方法对象：</p><p>Method m &#x3D; clazz.getDeclaredMethod(方法名, X.class);  &#x2F;&#x2F;可得到本类的所有方法</p></li><li><p>获取对象：Object obj &#x3D; clazz.newInstance();</p></li><li><p>暴破：m.setAccessible(true);</p></li><li><p>访问：Object returnValue &#x3D; m.invoke(obj, 实参列表);  &#x2F;&#x2F;obj 就是对象</p></li><li><p>补充：如果是静态方法，则 invoke 的参数 obj，可以写成 null</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示通过反射调用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflecAccessMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;<br><br>        <span class="hljs-comment">//1. 得到Boss类对应的Class对象</span><br>        Class&lt;?&gt; bossCls = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.Boss&quot;</span>);<br>        <span class="hljs-comment">//2. 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> bossCls.newInstance();<br>        <span class="hljs-comment">//3. 调用public的hi方法</span><br>        <span class="hljs-comment">//Method hi = bossCls.getMethod(&quot;hi&quot;, String.class);//OK</span><br>        <span class="hljs-comment">//  3.1 得到hi方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> bossCls.getDeclaredMethod(<span class="hljs-string">&quot;hi&quot;</span>, String.class);<span class="hljs-comment">//OK</span><br>        <span class="hljs-comment">//  3.2 调用</span><br>        hi.invoke(o, <span class="hljs-string">&quot;韩顺平教育~&quot;</span>);<br><br>        <span class="hljs-comment">//4. 调用private static 方法</span><br>        <span class="hljs-comment">//  4.1 得到 say 方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">say</span> <span class="hljs-operator">=</span> bossCls.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, <span class="hljs-type">int</span>.class, String.class, <span class="hljs-type">char</span>.class);<br>        <span class="hljs-comment">//  4.2 因为say方法是private, 所以需要暴破，原理和前面讲的构造器和属性一样</span><br>        say.setAccessible(<span class="hljs-literal">true</span>);<br>        System.out.println(say.invoke(o, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>));<br>        <span class="hljs-comment">//  4.3 因为say方法是static的，还可以这样调用 ，可以传入null</span><br>        System.out.println(say.invoke(<span class="hljs-literal">null</span>, <span class="hljs-number">200</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>));<br><br>        <span class="hljs-comment">//5. 在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">reVal</span> <span class="hljs-operator">=</span> say.invoke(<span class="hljs-literal">null</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;reVal 的运行类型=&quot;</span> + reVal.getClass());<span class="hljs-comment">//String</span><br><br>        <span class="hljs-comment">//再演示一个返回的案例</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> bossCls.getDeclaredMethod(<span class="hljs-string">&quot;m1&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">reVal2</span> <span class="hljs-operator">=</span> m1.invoke(o);<br>        System.out.println(<span class="hljs-string">&quot;reVal2的运行类型=&quot;</span> + reVal2.getClass());<span class="hljs-comment">//Monster</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boss</span> &#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Boss</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//构造器</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> Monster <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>();&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">say</span><span class="hljs-params">(<span class="hljs-type">int</span> n, String s, <span class="hljs-type">char</span> c)</span> &#123;<span class="hljs-comment">//静态方法</span><br>        <span class="hljs-keyword">return</span> n + <span class="hljs-string">&quot; &quot;</span> + s + <span class="hljs-string">&quot; &quot;</span> + c;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(String s)</span> &#123;<span class="hljs-comment">//普通public方法</span><br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="课后练习-1"><a href="#课后练习-1" class="headerlink" title="课后练习"></a>课后练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用Class类的forName方法得到File类的class 对象</span><br><span class="hljs-comment">         * 在控制台打印File类的所有构造器</span><br><span class="hljs-comment">         * 通过newInstance的方法创建File对象，并创建E:\mynew.txt文件</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//1. Class类的forName方法得到File类的class 对象</span><br>        Class&lt;?&gt; fileCls = Class.forName(<span class="hljs-string">&quot;java.io.File&quot;</span>);<br>        <span class="hljs-comment">//2. 得到所有的构造器</span><br>        Constructor&lt;?&gt;[] declaredConstructors = fileCls.getDeclaredConstructors();<br>        <span class="hljs-comment">//遍历输出</span><br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;File构造器=&quot;</span> + declaredConstructor);<br>        &#125;<br>        <span class="hljs-comment">//3. 指定的得到 public java.io.File(java.lang.String)</span><br>        Constructor&lt;?&gt; declaredConstructor = fileCls.getDeclaredConstructor(String.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\mynew.txt&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance(fileAllPath);<span class="hljs-comment">//创建File对象</span><br><br>        <span class="hljs-comment">//4. 得到createNewFile 的方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">createNewFile</span> <span class="hljs-operator">=</span> fileCls.getMethod(<span class="hljs-string">&quot;createNewFile&quot;</span>);<br>        createNewFile.invoke(file);<span class="hljs-comment">//创建文件，调用的是 createNewFile</span><br>        <span class="hljs-comment">//file的运行类型就是File</span><br>        System.out.println(file.getClass());<br>        System.out.println(<span class="hljs-string">&quot;创建文件成功&quot;</span> + fileAllPath);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h2> <img src="image-20220925091551275.png" alt="image-20220925091551275" style="zoom:76%;" /><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><strong>简要介绍：</strong></p><p>Lambda 是一个 匿名函数，我们可以把 Lambda 表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><p><strong>Lambda表达式的使用：</strong></p><ul><li><p>举例： (o1,o2) -&gt; Integer.compare(o1,o2);</p></li><li><p>格式：</p><ul><li>-&gt; ：lambda操作符 或 箭头操作符</li><li>-&gt; 左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</li><li>-&gt; 右边：lambda体 （其实就是重写的抽象方法的方法体）</li></ul></li><li><p>Lambda表达式的使用：（分为6种情况介绍）</p><p><strong>总结：</strong></p><ul><li><strong>-&gt; 左边：</strong>lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略</li><li><strong>-&gt; 右边：</strong>lambda体应该使用一对 {} 包裹；如果 lambda 体只有一条执行语句（可能是return语句），省略这一对 {} 和 return 关键字</li></ul></li><li><p>Lambda表达式的本质：作为函数式接口的实例（即相当于new了一个对象）（函数式接口是必要条件）</p><p>Lambda表达式是对象，而不是函数，并且必须依附于一类特别的对象类型 —— 函数式接口。</p><p>（与其它语言不同，其它语言一般是直接作为一个匿名函数 [ 如 JS 中的箭头函数 ]）</p></li><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。</p></li><li><p>因此，以前用匿名实现类表示的现在都可以用Lambda表达式来写。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest1</span> &#123;<br>    <span class="hljs-comment">//语法格式一：无参，无返回值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;我爱北京天安门&quot;</span>);<br>            &#125;<br>        &#125;;<br>        r1.run();<br>        System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;我爱北京故宫&quot;</span>);<br>        &#125;;<br>        r2.run();<br>    &#125;<br>    <br>    <span class="hljs-comment">//语法格式二：Lambda 需要一个参数，但是没有返回值。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>                System.out.println(s);<br>            &#125;<br>        &#125;;<br>        con.accept(<span class="hljs-string">&quot;谎言和誓言的区别是什么？&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//类型推断</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//类型推断</span><br>    &#125;<br><br>    <span class="hljs-comment">//语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = s -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>        Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                System.out.println(o1);<br>                System.out.println(o2);<br>                <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>            &#125;<br>        &#125;;<br>        System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;<br>            System.out.println(o1);<br>            System.out.println(o2);<br>            <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>        &#125;;<br>        System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>        Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>        &#125;;<br>        System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>));<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);<br>        System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test8</span><span class="hljs-params">()</span>&#123;<br>        Consumer&lt;String&gt; con1 = s -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);<br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul><li><p>只包含一个抽象方法的接口，称为 函数式接口。</p></li><li><p>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</p></li><li><p>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p></li><li><p>在 java.util.function 包下定义了 Java 8 的丰富的函数式接口</p></li></ul><p><strong>Java 内置四大核心函数式接口：</strong></p> <img src="image-20220925105023050.png" alt="image-20220925105023050" style="zoom: 60%;" /><p><strong>其他接口：</strong></p> <img src="image-20220925105124856.png" alt="image-20220925105124856" style="zoom:60%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java内置的4大核心函数式接口</span><br><span class="hljs-comment"> * 消费型接口 Consumer&lt;T&gt;     void accept(T t)</span><br><span class="hljs-comment"> * 供给型接口 Supplier&lt;T&gt;     T get()</span><br><span class="hljs-comment"> * 函数型接口 Function&lt;T,R&gt;   R apply(T t)</span><br><span class="hljs-comment"> * 断定型接口 Predicate&lt;T&gt;    boolean test(T t)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest2</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        happyTime(<span class="hljs-number">500</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Double&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;学习太累了，去天上人间买了瓶矿泉水，价格为：&quot;</span> + aDouble);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;********************&quot;</span>);<br><br>        happyTime(<span class="hljs-number">400</span>,money -&gt; System.out.println(<span class="hljs-string">&quot;去店铺喝了口水，价格为：&quot;</span> + money));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">happyTime</span><span class="hljs-params">(<span class="hljs-type">double</span> money, Consumer&lt;Double&gt; con)</span>&#123;<br>        con.accept(money);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>,<span class="hljs-string">&quot;天津&quot;</span>,<span class="hljs-string">&quot;东京&quot;</span>,<span class="hljs-string">&quot;西京&quot;</span>,<span class="hljs-string">&quot;普京&quot;</span>);<br>        List&lt;String&gt; filterStrs = filterString(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> s.contains(<span class="hljs-string">&quot;京&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(filterStrs);<br>        List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(<span class="hljs-string">&quot;京&quot;</span>));<br>        System.out.println(filterStrs1);<br>    &#125;<br><br>    <span class="hljs-comment">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">filterString</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;<br>        ArrayList&lt;String&gt; filterList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String s : list)&#123;<br>            <span class="hljs-keyword">if</span>(pre.test(s))&#123;<br>                filterList.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> filterList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><ul><li><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p></li><li><p>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</p></li><li><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</p></li><li><p>格式：使用操作符 “::” 将类(或对象) 与 方法名分隔开来。</p></li></ul><p><strong>方法引用的使用：</strong></p><ul><li>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li><li>方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例。</li><li>使用格式：  类(或对象) :: 方法名</li><li>具体分为如下的三种情况：<ul><li>情况1     对象 :: 非静态方法</li><li>情况2     类 :: 静态方法</li><li>情况3     类 :: 非静态方法</li></ul></li><li>使用要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodRefTest</span> &#123;<br><br><span class="hljs-comment">// 情况一：对象 :: 实例方法</span><br><span class="hljs-comment">// Consumer 中的 void accept(T t)</span><br><span class="hljs-comment">// PrintStream 中的 void println(T t)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);<br>con1.accept(<span class="hljs-string">&quot;北京&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>Consumer&lt;String&gt; con2 = ps::println;<br>con2.accept(<span class="hljs-string">&quot;beijing&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//Supplier中的T get()</span><br><span class="hljs-comment">//Employee中的String getName()</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5600</span>);<br><br>Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();<br>System.out.println(sup1.get());<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>Supplier&lt;String&gt; sup2 = emp::getName;<br>System.out.println(sup2.get());<br>&#125;<br><br><span class="hljs-comment">// 情况二：类 :: 静态方法</span><br><span class="hljs-comment">//Comparator中的int compare(T t1,T t2)</span><br><span class="hljs-comment">//Integer中的static int compare(T t1,T t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);<br>System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Comparator&lt;Integer&gt; com2 = Integer::compare;<br>System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">3</span>));<br>&#125;<br><br><span class="hljs-comment">//Function中的R apply(T t)</span><br><span class="hljs-comment">//Math中的Long round(Double d)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>Function&lt;Double,Long&gt; func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Double, Long&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">apply</span><span class="hljs-params">(Double d)</span> &#123;<br><span class="hljs-keyword">return</span> Math.round(d);<br>&#125;<br>&#125;;<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);<br>System.out.println(func1.apply(<span class="hljs-number">12.3</span>));<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Function&lt;Double,Long&gt; func2 = Math::round;<br>System.out.println(func2.apply(<span class="hljs-number">12.6</span>));<br>&#125;<br><br><span class="hljs-comment">// 情况三：类 :: 实例方法  (有难度)</span><br><span class="hljs-comment">// Comparator中的int comapre(T t1,T t2)</span><br><span class="hljs-comment">// String中的int t1.compareTo(t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> &#123;<br>Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);<br>System.out.println(com1.compare(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Comparator&lt;String&gt; com2 = String :: compareTo;<br>System.out.println(com2.compare(<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;abm&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">//BiPredicate中的boolean test(T t1, T t2);</span><br><span class="hljs-comment">//String中的boolean t1.equals(t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> &#123;<br>BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);<br>System.out.println(pre1.test(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>        <br>BiPredicate&lt;String,String&gt; pre2 = String :: equals;<br>System.out.println(pre2.test(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">// Function中的R apply(T t)</span><br><span class="hljs-comment">// Employee中的String getName();</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">6000</span>);<br><br>Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();<br>System.out.println(func1.apply(employee));<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Function&lt;Employee,String&gt; func2 = Employee::getName;<br>System.out.println(func2.apply(employee));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><ul><li><p>格式： ClassName::new</p></li><li><p>与函数式接口相结合，自动与函数式接口中方法兼容。</p></li><li><p>可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！</p><p>且方法的返回值即为构造器对应类的对象。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstructorRefTest</span> &#123;<br><span class="hljs-comment">//构造器引用</span><br>    <span class="hljs-comment">//Supplier中的T get()</span><br>    <span class="hljs-comment">//Employee的空参构造器：Employee()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        Supplier&lt;Employee&gt; sup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;Employee&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>            &#125;<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        System.out.println(sup1.get());<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="hljs-keyword">new</span>;<br>        System.out.println(sup2.get());<br>    &#125;<br><br><span class="hljs-comment">//Function中的R apply(T t)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(id);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> func1.apply(<span class="hljs-number">1001</span>);<br>        System.out.println(employee);<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="hljs-keyword">new</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee1</span> <span class="hljs-operator">=</span> func2.apply(<span class="hljs-number">1002</span>);<br>        System.out.println(employee1);<br>    &#125;<br><br><span class="hljs-comment">//BiFunction中的R apply(T t,U u)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(id,name);<br>        System.out.println(func1.apply(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="hljs-keyword">new</span>;<br>        System.out.println(func2.apply(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;Tom&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><p>可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[length];<br>    String[] arr1 = func1.apply(<span class="hljs-number">5</span>);<br>    System.out.println(Arrays.toString(arr1));<br>    System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="hljs-keyword">new</span>;<br>    String[] arr2 = func2.apply(<span class="hljs-number">10</span>);<br>    System.out.println(Arrays.toString(arr2));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><h4 id="Stream-API-说明"><a href="#Stream-API-说明" class="headerlink" title="Stream API 说明"></a>Stream API 说明</h4><p>Stream API ( java.util.stream) 把真正的函数式编程风格引入到 Java 中。这是目前为止对Java类库最好的补充，因为 Stream API 可以极大提供 Java 程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><h4 id="为什么要使用Stream-API"><a href="#为什么要使用Stream-API" class="headerlink" title="为什么要使用Stream API"></a>为什么要使用Stream API</h4><p>实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要 Java 层面去处理。</p><p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p><h4 id="什么是-Stream"><a href="#什么是-Stream" class="headerlink" title="什么是 Stream"></a>什么是 Stream</h4><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。<br>“集合 讲的是数据，Stream 讲的是计算！”</p><p><strong>注意：</strong><br>① Stream 自己不会存储元素。<br>② Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③ Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p><h4 id="Stream-的操作三步骤"><a href="#Stream-的操作三步骤" class="headerlink" title="Stream 的操作三步骤"></a>Stream 的操作三步骤</h4><p>1- 创建 Stream（Stream的实例化）<br>一个数据源（如：集合、数组），获取一个流</p><p>2- 中间操作<br>一个中间操作链，对数据源的数据进行处理（过滤、映射、…)</p><p>3- 终止操作( 终端操作)<br>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不能再被使用。</p> <img src="image-20220925154323456.png" alt="image-20220925154323456" style="zoom:70%;" /><h5 id="Stream-的创建"><a href="#Stream-的创建" class="headerlink" title="Stream 的创建"></a>Stream 的创建</h5><ul><li><p><strong>通过集合：</strong></p><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li>default Stream&lt;E&gt; stream() : 返回一个顺序流</li><li>default Stream&lt;E&gt; parallelStream() : 返回一个并行流</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br><br>    <span class="hljs-comment">//default Stream&lt;E&gt; stream() : 返回一个顺序流（会按照集合中的顺序来操作）</span><br>    Stream&lt;Employee&gt; stream = employees.stream();<br><br>    <span class="hljs-comment">//default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span><br>    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>通过数组：</strong></p><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><ul><li>static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</li></ul><p>重载形式，能够处理对应基本类型的数组：</p><ul><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span><br>    <span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(arr);<br><br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">e2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;Jerry&quot;</span>);<br>    Employee[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[]&#123;e1,e2&#125;;<br>    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>通过Stream 的of() ：</strong></p><p>可以调用Stream类静态方法 of()，通过显示值创建一个流。它可以接收任意数量的参数。</p><p> public static&lt;T&gt; Stream&lt;T&gt; of(T… values) ：返回一个流</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//基本数据类型会进行自动装箱</span><br>    Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>创建无限流：</strong></p><p>可以使用静态方法 Stream.iterate() 和 Stream.generate()，创建无限流。</p><ul><li><p>迭代：public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</p></li><li><p>生成：public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//迭代</span><br>    <span class="hljs-comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span><br>    <span class="hljs-comment">//遍历前10个偶数</span><br>    Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><br>    <span class="hljs-comment">//生成</span><br>    <span class="hljs-comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span><br>    Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Stream-的中间操作"><a href="#Stream-的中间操作" class="headerlink" title="Stream 的中间操作"></a>Stream 的中间操作</h5><p>多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的处理！而在 终止操作时一次性全部处理，称为“惰性求值”。</p><ul><li><p><strong>筛选与切片</strong></p> <img src="image-20220925162037977.png" alt="image-20220925162037977" style="zoom: 67%;" /> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1-筛选与切片</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Employee&gt; list = EmployeeData.getEmployees();<br>    <span class="hljs-comment">// filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</span><br>    Stream&lt;Employee&gt; stream = list.stream();<br>    <span class="hljs-comment">//练习：查询员工表中薪资大于7000的员工信息</span><br>    stream.filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">7000</span>).forEach(System.out::println);<br>    System.out.println();<br><br>    <span class="hljs-comment">// limit(n)——截断流，使其元素不超过给定数量。</span><br>    list.stream().limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>    System.out.println();<br><br>    <span class="hljs-comment">// skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。</span><br>    <span class="hljs-comment">// 若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span><br>    list.stream().skip(<span class="hljs-number">3</span>).forEach(System.out::println);<br>    System.out.println();<br><br>    <span class="hljs-comment">// distinct()——筛选（去重），通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span><br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">41</span>,<span class="hljs-number">8000</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>    <span class="hljs-comment">//System.out.println(list);</span><br>    list.stream().distinct().forEach(System.out::println);<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>映射</strong></p> <img src="image-20220925164043557.png" alt="image-20220925164043557" style="zoom:67%;" /> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// map(Function f)：接收一个函数作为参数，将元素转换成其他形式或提取信息，</span><br>    <span class="hljs-comment">// 该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br>    List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>);<br>    list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);<br><br>    <span class="hljs-comment">// 练习1：获取员工姓名长度大于3的员工的姓名。</span><br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>    Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);<br>    namesStream.filter(name -&gt; name.length() &gt; <span class="hljs-number">3</span>).forEach(System.out::println);<br>    System.out.println();<br>    <span class="hljs-comment">//练习2：与flatMap对比</span><br>    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);<br>    streamStream.forEach(s -&gt;&#123;<br>        s.forEach(System.out::println);<br>    &#125;);<br>    System.out.println();<br><br>    <span class="hljs-comment">// flatMap(Function f)：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span><br>    <span class="hljs-comment">// 如果说map(Function f)类似于ArrayList中的add()方法，</span><br>    <span class="hljs-comment">// 那么flatMap(Function f)就类似于addAll()方法</span><br>    Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);<br>    characterStream.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title function_">fromStringToStream</span><span class="hljs-params">(String str)</span>&#123;<span class="hljs-comment">//aa</span><br>    ArrayList&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(Character c : str.toCharArray())&#123;<br>        list.add(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list.stream();<br>&#125;<br><br><span class="hljs-meta">@Test</span>  <span class="hljs-comment">//举例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    list1.add(<span class="hljs-number">1</span>);<br>    list1.add(<span class="hljs-number">2</span>);<br>    list1.add(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    list2.add(<span class="hljs-number">4</span>);<br>    list2.add(<span class="hljs-number">5</span>);<br>    list2.add(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">//        list1.add(list2);  //[1, 2, 3, [4, 5, 6]]</span><br>    list1.addAll(list2);  <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br>    System.out.println(list1);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>排序</strong></p> <img src="image-20220925164121230.png" alt="image-20220925164121230" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3-排序</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// sorted()——自然排序</span><br>    List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">65</span>, <span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">98</span>, <span class="hljs-number">7</span>);<br>    list.stream().sorted().forEach(System.out::println);<br>    <br>    <span class="hljs-comment">// 下面代码抛异常，原因:Employee没有实现Comparable接口</span><br>    <span class="hljs-comment">// List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br>    <span class="hljs-comment">// employees.stream().sorted().forEach(System.out::println);</span><br><br>    <span class="hljs-comment">// sorted(Comparator com)——定制排序</span><br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>    employees.stream().sorted( (e1,e2) -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ageValue</span> <span class="hljs-operator">=</span> Integer.compare(e1.getAge(),e2.getAge());<br>        <span class="hljs-keyword">if</span>(ageValue != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> ageValue;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());<br>        &#125;<br>    &#125;).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="Stream-的终止操作"><a href="#Stream-的终止操作" class="headerlink" title="Stream 的终止操作"></a>Stream 的终止操作</h5><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p><p>流进行了终止操作后，不能再次使用。</p><ul><li><p><strong>匹配与查找</strong></p> <img src="image-20220925193138861.png" alt="image-20220925193138861" style="zoom: 67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1-匹配与查找</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br><br>    <span class="hljs-comment">// allMatch(Predicate p)：检查是否匹配所有元素。</span><br>    <span class="hljs-comment">// 练习：是否所有的员工的年龄都大于18</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">allMatch</span> <span class="hljs-operator">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="hljs-number">18</span>);<br>    System.out.println(allMatch);<br><br>    <span class="hljs-comment">// anyMatch(Predicate p)：检查是否至少匹配一个元素。</span><br>    <span class="hljs-comment">// 练习：是否存在员工的工资大于 10000</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">anyMatch</span> <span class="hljs-operator">=</span> employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="hljs-number">10000</span>);<br>    System.out.println(anyMatch);<br><br>    <span class="hljs-comment">// noneMatch(Predicate p)：检查是否没有匹配的元素。</span><br>    <span class="hljs-comment">// 练习：是否存在员工姓“雷”</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">noneMatch</span> <span class="hljs-operator">=</span> employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="hljs-string">&quot;雷&quot;</span>));<br>    System.out.println(noneMatch);<br><br>    <span class="hljs-comment">// findFirst：返回第一个元素</span><br>    Optional&lt;Employee&gt; employee = employees.stream().findFirst();<br>    System.out.println(employee);<br><br>    <span class="hljs-comment">// findAny：返回当前流中的任意元素</span><br>    Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();<br>    System.out.println(employee1);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>    <span class="hljs-comment">// count——返回流中元素的总个数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">5000</span>).count();<br>    System.out.println(count);<br><br>    <span class="hljs-comment">// max(Comparator c)——返回流中最大值</span><br>    <span class="hljs-comment">// 练习：返回最高的工资：</span><br>    Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());<br>    Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);<br>    System.out.println(maxSalary);<br><br>    <span class="hljs-comment">// min(Comparator c)——返回流中最小值</span><br>    <span class="hljs-comment">// 练习：返回最低工资的员工</span><br>    Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));<br>    System.out.println(employee);<br>    System.out.println();<br><br>    <span class="hljs-comment">// forEach(Consumer c)——内部迭代</span><br>    employees.stream().forEach(System.out::println);<br><br>    <span class="hljs-comment">//使用集合的遍历操作</span><br>    employees.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>归约</strong></p><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google用它来进行网络搜索而出名。</p> <img src="image-20220925200039053.png" alt="image-20220925200039053" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2-归约</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span><br>    <span class="hljs-comment">// 练习1：计算1-10的自然数的和</span><br>    List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br>    System.out.println(sum);<br><br>    <span class="hljs-comment">// reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span><br>    <span class="hljs-comment">// 练习2：计算公司所有员工工资的总和</span><br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>    Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);<br>    <span class="hljs-comment">// Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span><br>    Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);<br>    System.out.println(sumMoney.get());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>收集</strong></p> <img src="image-20220925201152414.png" alt="image-20220925201152414" style="zoom:60%;" /><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。<br>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p> <img src="image-20220925201237667.png" alt="image-20220925201237667" style="zoom:66%;" /> <img src="image-20220925201407366.png" alt="image-20220925201407366" style="zoom:68%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3-收集</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span><br>    <span class="hljs-comment">// 练习1：查找工资大于6000的员工，结果返回为一个List或Set</span><br>    List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>    List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">6000</span>).collect(Collectors.toList());<br>    employeeList.forEach(System.out::println);<br>    System.out.println();<br>    <br>    Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">6000</span>).collect(Collectors.toSet());<br>    employeeSet.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><p>Optional&lt;T&gt; 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。</p><p>原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p><p>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。</p><p>如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p><ul><li>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</li><li>创建Optional<ul><li>Optional.of(T t) : 创建一个 Optional 实例，t 必须 非空；</li><li>Optional.empty() : 创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t) ：t 可以为 null</li></ul></li><li>判断Optional 容器中是否包含对象：<ul><li>boolean isPresent() : 判断是否包含对象</li><li>void ifPresent(Consumer&lt;? super T&gt; consumer) ：如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。</li></ul></li><li>获取Optional 容器的对象：</li><li>T get() : 如果调用对象包含值，返回该值，否则抛异常</li><li>T orElse(T other) ：如果有值则将其返回，否则返回指定的other对象。</li><li>T orElseGet(Supplier&lt;? extends T&gt; other) ：如果有值则将其返回，否则返回由Supplier接口实现提供的对象。</li><li>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) ：如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Optional类：为了在程序中避免出现空指针异常而创建的。</span><br><span class="hljs-comment">常用方法：</span><br><span class="hljs-comment">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span><br><span class="hljs-comment">Optional.empty() : 创建一个空的 Optional 实例</span><br><span class="hljs-comment">Optional.ofNullable(T t)：t可以为null</span><br><span class="hljs-comment">Optional.orElse(T t)：如果有值则将其返回，否则返回指定的other对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>    <span class="hljs-comment">//Girl girl = null;</span><br>    <span class="hljs-comment">//of(T t):保证t是非空的</span><br>    Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>    <span class="hljs-comment">//Girl girl = null;</span><br>    <span class="hljs-comment">//ofNullable(T t)：t可以为null</span><br>    Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);<br>    System.out.println(optionalGirl);<br><br>    <span class="hljs-comment">//orElse(T t1):如果当前的Optional内部封装的t是非空的，则返回内部的t.</span><br>    <span class="hljs-comment">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span><br>    <span class="hljs-type">Girl</span> <span class="hljs-variable">girl1</span> <span class="hljs-operator">=</span> optionalGirl.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;赵丽颖&quot;</span>));<br>    System.out.println(girl1);<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGirlName</span><span class="hljs-params">(Boy boy)</span>&#123;<br>    <span class="hljs-keyword">return</span> boy.getGirl().getName();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>();<br>    boy = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">girlName</span> <span class="hljs-operator">=</span> getGirlName(boy);<br>    System.out.println(girlName);<br><br>&#125;<br><br><span class="hljs-comment">//优化以后的getGirlName():</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGirlName1</span><span class="hljs-params">(Boy boy)</span>&#123;<br>    <span class="hljs-keyword">if</span>(boy != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> boy.getGirl();<br>        <span class="hljs-keyword">if</span>(girl != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> girl.getName();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>();<br>    boy = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">girlName</span> <span class="hljs-operator">=</span> getGirlName1(boy);<br>    System.out.println(girlName);<br>&#125;<br><br><span class="hljs-comment">//使用Optional类的getGirlName():</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGirlName2</span><span class="hljs-params">(Boy boy)</span>&#123;<br>    Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy1</span> <span class="hljs-operator">=</span> boyOptional.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;迪丽热巴&quot;</span>)));<br>    <span class="hljs-comment">//此时的boy1一定非空</span><br>    <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> boy1.getGirl();<br>    Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);<br>    <span class="hljs-type">Girl</span> <span class="hljs-variable">girl1</span> <span class="hljs-operator">=</span> girlOptional.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;古力娜扎&quot;</span>));<br>    <span class="hljs-comment">//此时的girl1一定非空</span><br>    <span class="hljs-keyword">return</span> girl1.getName();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>();<br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;小女孩&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">girlName</span> <span class="hljs-operator">=</span> getGirlName2(boy);<br>    System.out.println(girlName);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="JDBC-概述"><a href="#JDBC-概述" class="headerlink" title="JDBC 概述"></a>JDBC 概述</h3><ul><li><p>JDBC API 是一系列的接口，它统一和规范了应用程序与数据库的连接、执行 SQL 语句，并得到返回结果等各类操作，相关类和接口在 java.sql 与 javax.sql 包中</p></li><li><p>JDBC 为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题</p></li><li><p>Java 程序员使用 JDBC，可以连接任何提供了 JDBC 驱动程序的数据库系统，从而完成对数据库的各种操作</p></li><li><p>JDBC 是 Java 提供一套用于数据库操作的 API ，Java 程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂商，需要针对这套接口提供不同实现</p></li><li><p>JDBC 的基本原理图（重要）</p> <img src="image-20221010214327674.png" alt="image-20221010214327674" style="zoom: 45%;" /> <img src="image-20221010220350562.png" alt="image-20221010220350562" style="zoom:80%;" /></li></ul><h3 id="JDBC-程序编写步骤"><a href="#JDBC-程序编写步骤" class="headerlink" title="JDBC 程序编写步骤"></a>JDBC 程序编写步骤</h3><ol><li>注册驱动 —— 加载 Driver 类</li><li>获取连接 —— 得到 Connection</li><li>执行增删改查 —— 发送 SQL 给 mysql 执行</li><li>释放资源 —— 关闭相关连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *快速入门</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//前置工作：在项目下创建一个文件夹如 libs</span><br>        <span class="hljs-comment">//将 mysql.jar 拷贝到该目录下，点击 add to project..加入到项目中</span><br><br>        <span class="hljs-comment">//1.注册驱动</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br><br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//(1) jdbc:mysql:// 规定好的，表示一个协议，通过jdbc的方式连接mysql</span><br>        <span class="hljs-comment">//(2) localhost  表示主机，也可以是一个IP地址</span><br>        <span class="hljs-comment">//(3) 3306  表示mysql监听的端口</span><br>        <span class="hljs-comment">//(4) lyh_db02 表示要连接到mysql的哪个数据库</span><br>        <span class="hljs-comment">//(5) mysql的连接的本质就是前面学过的 socket 连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/lyh_db02&quot;</span>;<br>        <span class="hljs-comment">//将用户名和密码放入到Properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//说明：user 和 password 是规定好的键，值可以根据实际情况写</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);  <span class="hljs-comment">//用户</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;lyh&quot;</span>);  <span class="hljs-comment">//密码</span><br>        <span class="hljs-comment">//得到的connect就是一个网络连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br><br>        <span class="hljs-comment">//3.执行sql</span><br><span class="hljs-comment">//        String sql = &quot;insert into actor values(null,&#x27;刘德华&#x27;,&#x27;男&#x27;,&#x27;1970-11-11&#x27;,&#x27;110&#x27;)&quot;;</span><br><span class="hljs-comment">//        String sql = &quot;update actor set name = &#x27;周星驰&#x27; where id = 1&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from actor where id = 1&quot;</span>;<br>        <span class="hljs-comment">//statement用于执行静态SQL语句并返回其生成的结构对象</span><br><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connect.createStatement();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);  <span class="hljs-comment">//如果是dml语句，返回的就是影响行数</span><br>        System.out.println(rows&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>);<br><br>        <span class="hljs-comment">//4.关闭连接资源</span><br>        statement.close();<br>        connect.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取数据库连接-5-种方式"><a href="#获取数据库连接-5-种方式" class="headerlink" title="获取数据库连接 5 种方式"></a>获取数据库连接 5 种方式</h3><ul><li><p>方式一：获取 Driver 实现类对象  （会直接使用com.mysql.jdbc.Driver()，属于静态加载，灵活性差）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_db&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>info.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>info.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;hsp&quot;</span>);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> driver.connect(url,info);<br>System.out.println(conn);<br></code></pre></td></tr></table></figure></li><li><p>方式二：使用反射机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver)clazz.newInstance();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_db&quot;</span>;<br><br><span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>info.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>info.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;hsp&quot;</span>);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> driver.connect(url,info);<br>System.out.println(conn);<br></code></pre></td></tr></table></figure></li><li><p>方式三：使用DriverManager替换Driver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) clazz.newInstance();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql//localhost:3306/jdbc_db&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lyh&quot;</span>;<br><br>DriverManager.registerDriver(driver);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>System.out.println(conn);<br></code></pre></td></tr></table></figure></li><li><p>方式四：使用 Class.forName 自动完成注册驱动，简化代码 &#x3D;&gt; 分析源码</p><p>提示：</p><ul><li>mysql 驱动 5.1.6 及以后 可以无需 Class.forName(“com.mysql.jdbc.Driver”);</li><li>从jdk1.5以后使用了jdbc4，不在需要显式调用class.forName() 注册驱动，而是自动调用驱动 jar 包下的 META-INF\services\java.sql.Driver 文本种的类名称取注册</li><li>建议还是写上 Class.forName(“com.mysql.jdbc.Driver”);  更加明确</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_db&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lyh&quot;</span>;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>System.out.println(conn);<br></code></pre></td></tr></table></figure></li><li><p>方式五（推荐）：在方式四的基础上，使用配置文件，连接数据库更灵活</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># mysql.propersties</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">lyh</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/lyh_db02</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>代码：分析java连接mysql的5种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分析java连接mysql的5种方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConn</span> &#123;<br>    <span class="hljs-comment">//方式一</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/lyh_db02&quot;</span>;<br><br>        <span class="hljs-comment">//将用户名和密码放入到Properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//说明：user 和 password 是规定好的键，值可以根据实际情况写</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);  <span class="hljs-comment">//用户</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;lyh&quot;</span>);  <span class="hljs-comment">//密码</span><br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url,properties);<br>        System.out.println(connect);<br>    &#125;<br><br>    <span class="hljs-comment">//方式二</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br>        <span class="hljs-comment">//使用反射加载Driver类，动态加载，更加灵活，减少依赖性</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/lyh_db02&quot;</span>;<br><br>        <span class="hljs-comment">//将用户名和密码放入到Properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//说明：user 和 password 是规定好的键，值可以根据实际情况写</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);  <span class="hljs-comment">//用户</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;lyh&quot;</span>);  <span class="hljs-comment">//密码</span><br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url,properties);<br>        System.out.println(connect);<br>    &#125;<br><br>    <span class="hljs-comment">//方式三 使用DriverManager 替代 Diver 进行统一管理</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br>        <span class="hljs-comment">//使用反射加载Driver</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver)aClass.newInstance();<br><br>        <span class="hljs-comment">//创建url和user和password</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/lyh_db02&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lyh&quot;</span>;<br><br>        DriverManager.registerDriver(driver); <span class="hljs-comment">//注册Driver驱动</span><br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        System.out.println(conn);<br>    &#125;<br><br>    <span class="hljs-comment">//方式四 使用 Class.forName 自动完成注册驱动，简化代码</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-comment">//使用反射加载 Driver 类</span><br>        <span class="hljs-comment">//在加载Driver类时，自动完成注册</span><br>        <span class="hljs-comment">/* 源码：</span><br><span class="hljs-comment">        1.静态代码块，在类加载时，会自动执行一次</span><br><span class="hljs-comment">        2.DriverManager.registerDriver(new Driver());</span><br><span class="hljs-comment">        3.因此注册driver的工作已经完成</span><br><span class="hljs-comment">        static &#123;</span><br><span class="hljs-comment">            try &#123;</span><br><span class="hljs-comment">                DriverManager.registerDriver(new Driver());</span><br><span class="hljs-comment">            &#125; catch (SQLException var1) &#123;</span><br><span class="hljs-comment">                throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         &#125;</span><br><span class="hljs-comment">         */</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//创建url和user和password</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/lyh_db02&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lyh&quot;</span>;<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        System.out.println(conn);<br>    &#125;<br><br>    <span class="hljs-comment">//方式五 在方式四的基础上改进，增加配置文件，让连接mysql更加灵活</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect05</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-comment">//获取相关的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><br>        Class.forName(driver);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ResultSet-结果集"><a href="#ResultSet-结果集" class="headerlink" title="ResultSet[结果集]"></a>ResultSet[结果集]</h3><ul><li>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成</li><li>ResultSet对象保持一个光标指向其当前的数据行。最初，光标位于第一行之前</li><li>next 方法 将光标移动到下一行，并且由于在 ResultSet 对象中没有更多行时返回 false，因此可以在 while 循环中来遍历结果集</li></ul> <img src="image-20221011193054014.png" alt="image-20221011193054014" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示select语句返回ResultSet，并取出结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.resultset;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSet_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-comment">//获取相关的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-comment">//1.注册驱动</span><br>        Class.forName(driver);<br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>        <span class="hljs-comment">//3.得到Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-comment">//4.组织SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,sex,borndate from actor&quot;</span>;<br>        <span class="hljs-comment">//执行给定的SQL语句，该语句返回单个ResultSet对象</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-comment">//5.使用while取出数据</span><br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123; <span class="hljs-comment">//让光标后移，如果没有更多行，则返回false</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//获取该行的第1列</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-number">2</span>);<span class="hljs-comment">//该行第2列</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-number">3</span>);<span class="hljs-comment">//</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> resultSet.getDate(<span class="hljs-number">4</span>);<br>            System.out.println(id + <span class="hljs-string">&quot;\t&quot;</span> + name + <span class="hljs-string">&quot;\t&quot;</span> + sex + <span class="hljs-string">&quot;\t&quot;</span> + date);<br>        &#125;<br>        <span class="hljs-comment">//6.关闭连接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><ul><li>Statement对象 用于执行静态SQL语句并返回其生成的结果的对象</li><li>在连接建立后，需要对数据库进行访问，执行命名或是SQL语句，可以通过<ul><li>Statement [存在SQL注入]</li><li><strong>PreparedStatement</strong> [预处理]</li><li>CallableStatement [存储过程]</li></ul></li><li>Statement对象执行SQL语句，存在 <strong>SQL注入</strong> 风险</li><li>SQL注入是利用某些系统没有对用户的输入进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令，恶意攻击数据库</li><li>要防范SQL注入，只要用 PreparedStatement（从Statement扩展而来）取代Statement就可以了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 演示 sql注入<br>-- 创建一张表<br>CREATE TABLE admin ( -- 管理员表<br>NAME VARCHAR(32) NOT NULL UNIQUE,<br>pwd VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;) CHARACTER SET utf8;<br><br>-- 添加数据<br>INSERT INTO admin VALUES(&#x27;tom&#x27;, &#x27;123&#x27;);<br><br>-- 查找某个管理是否存在<br>SELECT *<br>FROM admin<br>WHERE NAME = &#x27;tom&#x27; AND pwd = &#x27;123&#x27;<br><br>-- SQL<br>-- 输入用户名 为 1&#x27; or<br>-- 输入万能密码 为 or &#x27;1&#x27;= &#x27;1<br>SELECT *<br>FROM admin<br>WHERE NAME = &#x27;1&#x27; OR &#x27;AND pwd = &#x27; OR &#x27;1&#x27;= &#x27;1&#x27;<br>SELECT * FROM admin<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.statement;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Statement_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//让用户输入管理员名和密码</span><br>        <span class="hljs-comment">//如果希望看到SQL注入，需要用nextLine()</span><br>        <span class="hljs-comment">//next()当接收到空格或单引号就表示结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入管理员密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_pwd</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-comment">//获取相关的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-comment">//1.注册驱动</span><br>        Class.forName(driver);<br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>        <span class="hljs-comment">//3.得到Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-comment">//4.组织SQL</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name,pwd from admin where name = &#x27;&quot;</span><br>                + admin_name + <span class="hljs-string">&quot;&#x27; and pwd = &#x27;&quot;</span> +admin_pwd+ <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123; <span class="hljs-comment">//如果查询到一条记录，则说明该管理员存在</span><br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭连接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">String sql = &quot;SELECT COUNT(*) FROM admin WHERE username =? AND PASSWORD=?&quot;;<br></code></pre></td></tr></table></figure><ul><li>PreparedStatement执行的SQL语句中的参数用问号（?）来表示，调用 PrepareStatement 对象的 setXXX() 方法来设置这些参数。setXXX() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引（从 1 开始），第二个是设置的 SQL 语句中的参数的值</li><li>调用 executeQuery()，执行查询，返回 ResultSet 对象</li><li>调用 executeUpdate()，执行更新，包括增、删、修改，返回影响的行数</li></ul><p><strong>预处理好处：</strong></p><ul><li>不再使用  + 拼接SQL语句，减少语法错误</li><li>有效解决了SQL注入问题</li><li>大大减少了编译次数，效率较高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 PreparedStatement 使用 （查询）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.preparedstatement_;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatement</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//让用户输入管理员名和密码</span><br>        <span class="hljs-comment">//如果希望看到SQL注入，需要用nextLine()</span><br>        <span class="hljs-comment">//next()当接收到空格或单引号就表示结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入管理员密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_pwd</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br><br>        <span class="hljs-comment">//获取相关的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><br>        <span class="hljs-comment">//1.注册驱动</span><br>        Class.forName(driver);<br><br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-comment">//3.得到PreparedStatement</span><br>        <span class="hljs-comment">//3.1组织SQL，SQL语句中的 ? 就相当于占位符</span><br>        <span class="hljs-comment">// 查询操作</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name,pwd from admin where name =? and pwd =? &quot;</span>;<br><br>        <span class="hljs-comment">//3.2preparedStatement对象实现了PreparedStatement接口的实现类的对象</span><br>        java.sql.<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-comment">//3.3给 ? 赋值</span><br>        preparedStatement.setString(<span class="hljs-number">1</span>,admin_name);<br>        preparedStatement.setString(<span class="hljs-number">2</span>,admin_pwd);<br><br>        <span class="hljs-comment">//4.执行select语句，使用executeQuery()</span><br>        <span class="hljs-comment">//  如果执行的是dml，使用 executeUpdate()</span><br>        <span class="hljs-comment">//  这里执行executeQuery时，不要再写sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123; <span class="hljs-comment">//如果查询到一条记录，则说明该管理员存在</span><br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭连接</span><br>        resultSet.close();<br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 PreparedStatement 使用 dml 语句</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.preparedstatement_;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementDML_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//让用户输入管理员名和密码</span><br>        <span class="hljs-comment">//如果希望看到SQL注入，需要用nextLine()</span><br>        <span class="hljs-comment">//next()当接收到空格或单引号就表示结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入要删除的管理员名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><span class="hljs-comment">//        System.out.print(&quot;请输入管理员新密码：&quot;);</span><br><span class="hljs-comment">//        String admin_pwd = scanner.nextLine();</span><br><br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br><br>        <span class="hljs-comment">//获取相关的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><br>        <span class="hljs-comment">//1.注册驱动</span><br>        Class.forName(driver);<br><br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-comment">//3.得到PreparedStatement</span><br>        <span class="hljs-comment">//3.1组织SQL，SQL语句中的 ? 就相当于占位符</span><br>        <span class="hljs-comment">//添加记录</span><br>        <span class="hljs-comment">//String sql = &quot;insert into admin values(?, ?)&quot;;</span><br>        <span class="hljs-comment">//修改记录</span><br>        <span class="hljs-comment">//String sql = &quot;update admin set pwd =? where name =?&quot;;</span><br>        <span class="hljs-comment">//删除记录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from admin where name = ? &quot;</span>;<br>        <span class="hljs-comment">//3.2preparedStatement对象实现了PreparedStatement接口的实现类的对象</span><br>        java.sql.<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-comment">//3.3给 ? 赋值</span><br>        preparedStatement.setString(<span class="hljs-number">1</span>,admin_name);<br>        <span class="hljs-comment">//preparedStatement.setString(2,admin_name);</span><br><br>        <span class="hljs-comment">//4.执行dml语句，使用executeUpdate()</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> preparedStatement.executeUpdate();<br>        System.out.println(rows &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;执行成功&quot;</span> : <span class="hljs-string">&quot;执行失败&quot;</span>);<br><br>        <span class="hljs-comment">//关闭连接</span><br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDBC-的相关-API-小结"><a href="#JDBC-的相关-API-小结" class="headerlink" title="JDBC 的相关 API 小结"></a>JDBC 的相关 API 小结</h3> <img src="image-20221011220559484.png" alt="image-20221011220559484" style="zoom: 50%;" /> <img src="image-20221011220610323.png" alt="image-20221011220610323" style="zoom: 47%;" /><h3 id="封装-JDBCUtils"><a href="#封装-JDBCUtils" class="headerlink" title="封装 JDBCUtils"></a>封装 JDBCUtils</h3><p>关闭连接, 得到连接</p><p>在 jdbc 操作中，获取连接 和 释放资源 时经常使用到，可以将其封装 JDBC 连接的工具类 JDBCUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.utils;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.Statement;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一个工具类，完成 mysql的连接和关闭资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br>    <span class="hljs-comment">//定义相关的属性（4个），因为只需要一份，因此做成static</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;  <span class="hljs-comment">//url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver; <span class="hljs-comment">//驱动名</span><br><br>    <span class="hljs-comment">//在static代码块去初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>            <span class="hljs-comment">//读取相关的属性值</span><br>            user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//在实际开发中，我们可以这样处理</span><br>            <span class="hljs-comment">//1.将编译异常转成运行异常</span><br>            <span class="hljs-comment">//2.这时调用者可以选择捕获该异常，也可以选择默认处理该异常</span><br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//连接数据库，返回Connection</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(url,user,password);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">//1.将编译异常转成运行异常</span><br>            <span class="hljs-comment">//2.这时调用者可以选择捕获该异常，也可以选择默认处理该异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//关闭相关资源</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.ResultSet 结果集</span><br><span class="hljs-comment">        2.Statement 或 PreparedStatement</span><br><span class="hljs-comment">        3.Connection</span><br><span class="hljs-comment">        4.如果需要关闭资源，就传入对象，否则传入null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet set, Statement statement, Connection connection)</span>&#123;<br>        <span class="hljs-comment">//判断是否为null</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span>(set!=<span class="hljs-literal">null</span>)&#123;<br>                set.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement!=<span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实际使用使用工具类-JDBCUtils"><a href="#实际使用使用工具类-JDBCUtils" class="headerlink" title="实际使用使用工具类 JDBCUtils"></a>实际使用使用工具类 JDBCUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.utils;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils_Use</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.得到连接（写进try语句，方便捕获异常）</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//2.组织一个sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from actor where id = ?&quot;</span>;<br>        <br>        <span class="hljs-comment">//（写进try语句，方便捕获异常）</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//3.创建PreparedStatement对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtils.getConnection();<br>            preparedStatement = connection.prepareStatement(sql);<br>            preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>            <span class="hljs-comment">//执行，得到结果集</span><br>            set = preparedStatement.executeQuery();<br>            <span class="hljs-comment">//遍历结果集</span><br>            <span class="hljs-keyword">while</span>(set.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;sex&quot;</span>);<br>                <span class="hljs-type">Date</span> <span class="hljs-variable">borndate</span> <span class="hljs-operator">=</span> set.getDate(<span class="hljs-string">&quot;borndate&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;phone&quot;</span>);<br>                System.out.println(id + <span class="hljs-string">&quot;\t&quot;</span> + name + <span class="hljs-string">&quot;\t&quot;</span> + sex + <span class="hljs-string">&quot;\t&quot;</span> + borndate + <span class="hljs-string">&quot;\t&quot;</span> + phone + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            JDBCUtils.close(set,preparedStatement,connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//insert, update, delete</span><br>        <span class="hljs-comment">//1.得到连接（写进try语句，方便捕获异常）</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//2.组织一个sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update actor set name = ? where id = ?&quot;</span>;<br><br>        <span class="hljs-comment">//3.创建PreparedStatement对象（写进try语句，方便捕获异常）</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.得到连接</span><br>            connection = JDBCUtils.getConnection();<br>            preparedStatement = connection.prepareStatement(sql);<br>            <span class="hljs-comment">//给占位符赋值</span><br>            preparedStatement.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;周星驰&quot;</span>);<br>            preparedStatement.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//执行</span><br>            preparedStatement.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li>JDBC程序中当一个 Connection 对象创建时，默认情况下是自动提交事务：每次执行一个SQL语句，如果执行成功，就会像数据库自动提交，而不能回滚</li><li>JDBC程序中为了让多个SQL语句作为一个整体执行，需要使用事务</li><li>调用 Connection 的 setAutoCommit(false) 可以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 Connection 的 commit() 方法提交事务</li><li>在其中某个操作失败或出现异常时，调用 Connection 的 rollback() 方法回滚事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作转账的业务 演示 事务的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.transaction;<br><br><span class="hljs-keyword">import</span> com.jdbcStudy.utils.JDBCUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Transaction_</span> &#123;<br>    <span class="hljs-comment">//没有使用事务</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noTransaction</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//2.组织一个sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account02 set balance = balance - 100 where id = 1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account02 set balance = balance + 100 where id = 2&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//3.创建PreparedStatement对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.得到连接</span><br>            connection = JDBCUtils.getConnection();<br><br>            preparedStatement = connection.prepareStatement(sql);<br>            preparedStatement.executeUpdate();<span class="hljs-comment">//执行第一条</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;  <span class="hljs-comment">//抛出异常</span><br>            preparedStatement = connection.prepareStatement(sql2);<br>            preparedStatement.executeUpdate();<span class="hljs-comment">//执行第二条</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用事务</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useTransaction</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//2.组织一个sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account02 set balance = balance - 100 where id = 1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account02 set balance = balance + 100 where id = 2&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//3.创建PreparedStatement对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.得到连接</span><br>            connection = JDBCUtils.getConnection();<br>            <span class="hljs-comment">//将connection设置为不自动提交</span><br>            connection.setAutoCommit(<span class="hljs-literal">false</span>);  <span class="hljs-comment">//开启事务</span><br><br>            preparedStatement = connection.prepareStatement(sql);<br>            preparedStatement.executeUpdate();<span class="hljs-comment">//执行第一条</span><br>            <span class="hljs-comment">//int i = 1/0;  //抛出异常</span><br>            preparedStatement = connection.prepareStatement(sql2);<br>            preparedStatement.executeUpdate();<span class="hljs-comment">//执行第二条</span><br><br>            <span class="hljs-comment">//提交事务</span><br>            connection.commit();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//这里可以进行事务回滚，撤销执行的sql</span><br>            System.out.println(<span class="hljs-string">&quot;执行发生了异常，撤销执行的sql&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><ul><li>当需要成批插入或者更新记录时，可以采用 Java 的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</li><li>JDBC 的批量处理语句包括下面方法：<ul><li>addBatch()：添加需要批量处理的SQL语句或参数</li><li>executeBatch()：执行批量处理语句</li><li>clearBatch()：清空批处理包的语句</li></ul></li><li>JDBC 连接MySQL 时，如果要使用批处理功能，请在 url 中加参数 <strong>?rewriteBatchedStatements&#x3D;true</strong></li><li>批处理往往和 PreparedStatement 一起搭配使用，可以既减少编译次数，又减少允许次数，效率大大提高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示java的批处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.batch_;<br><br><span class="hljs-keyword">import</span> com.jdbcStudy.utils.JDBCUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Batch_</span> &#123;<br><br>    <span class="hljs-comment">//传统方法，添加5000条数据到admin2</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        System.out.println(<span class="hljs-string">&quot;开始执行&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <span class="hljs-comment">//开始时间</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5000</span>;i++)&#123;<br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack&quot;</span>+i);<br>            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>            preparedStatement.executeUpdate();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <span class="hljs-comment">//开始时间</span><br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (end-start));  <span class="hljs-comment">//1005</span><br>        <span class="hljs-comment">//关闭连接</span><br>        JDBCUtils.close(<span class="hljs-literal">null</span>, preparedStatement, connection);<br><br>    &#125;<br><br>    <span class="hljs-comment">//使用批量方式添加数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        System.out.println(<span class="hljs-string">&quot;开始执行&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <span class="hljs-comment">//开始时间</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5000</span>;i++)&#123;<br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack&quot;</span>+i);<br>            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>            <span class="hljs-comment">//将sql语句加入到批处理包中 -&gt; 看源码</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            1.第一次就创建 ArrayList - elementData =&gt; Object[]</span><br><span class="hljs-comment">            2.elementData =&gt; Object[] 就会存放我们预处理的sql语句</span><br><span class="hljs-comment">            3.当elementData满后，就按照1.5扩容</span><br><span class="hljs-comment">            4.当添加指定的值后，就执行executeBatch</span><br><span class="hljs-comment">            5.批量处理可以减少发送sql语句的网络开销，减少编译次数和运行次数，因此效率更高</span><br><span class="hljs-comment">            public void addBatch() throws SQLException &#123;</span><br><span class="hljs-comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span><br><span class="hljs-comment">                    if (this.batchedArgs == null) &#123;</span><br><span class="hljs-comment">                        this.batchedArgs = new ArrayList();</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span><br><span class="hljs-comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    this.batchedArgs.add(new BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">             */</span><br>            preparedStatement.addBatch();<br>            <span class="hljs-comment">//当有1000条记录时，批量执行</span><br>            <span class="hljs-keyword">if</span>((i+<span class="hljs-number">1</span>)%<span class="hljs-number">1000</span>==<span class="hljs-number">0</span>)&#123;<br>                preparedStatement.executeBatch();<br>                preparedStatement.clearBatch();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <span class="hljs-comment">//开始时间</span><br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (end-start));  <span class="hljs-comment">//64</span><br>        <span class="hljs-comment">//关闭连接</span><br>        JDBCUtils.close(<span class="hljs-literal">null</span>, preparedStatement, connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="传统获取-Connection-问题分析"><a href="#传统获取-Connection-问题分析" class="headerlink" title="传统获取 Connection 问题分析"></a>传统获取 Connection 问题分析</h4><ul><li>传统的 JDBC 数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证 IP 地址、用户名和密码（0.05s ~ 1s 时间）。需要数据库连接的时候，就向数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃。</li><li>每一次数据库连接，使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄漏，最终将导致重启数据库。</li><li>传统获取连接的方式，不能控制创建的连接数量，如连接过多，也可能导致内存泄漏，MySQL 崩溃</li><li>解决传统开发中的数据库连接问题，可以采用数据库连接池技术（connection pool）</li></ul><h4 id="数据库连接池简介"><a href="#数据库连接池简介" class="headerlink" title="数据库连接池简介"></a>数据库连接池简介</h4><ul><li><p>预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从 “缓冲池” 中取出一个，使用完毕之后再放回去</p></li><li><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</p></li><li><p>当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中</p></li><li><p>数据库连接池示意图：</p> <img src="image-20221012195509452.png" alt="image-20221012195509452" style="zoom: 67%;" />  <img src="image-20221012195217855.png" alt="image-20221012195217855" style="zoom: 67%;" /></li></ul><h4 id="数据库连接池种类"><a href="#数据库连接池种类" class="headerlink" title="数据库连接池种类"></a>数据库连接池种类</h4><ul><li>JDBC 的数据库连接池 使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由第三方提供实现 [提供 .jar]</li><li>C3P0 数据库连接池，速度相对较慢，稳定性不错（hibernate，spring）</li><li>DBCP 数据库连接池，速度相对 C3P0 较快，但不稳定</li><li>Proxool 数据库连接池，有监控连接池状态的功能，稳定性较 C3P0 差一点</li><li>BoneCP 数据库连接池，速度快</li><li>Druid（德鲁伊）是阿里提供的数据库连接池，集 DBCP、C3P0、Proxool 优点于一身的数据库连接池</li></ul><h4 id="C3P0-应用实例"><a href="#C3P0-应用实例" class="headerlink" title="C3P0 应用实例"></a>C3P0 应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.datasource;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0_</span> &#123;<br><br>    <span class="hljs-comment">//方式一：相关参数，再程序中指定user，url，password等</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testC3P0_01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//1. 创建一个数据源对象</span><br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">comboPooledDataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br><br>        <span class="hljs-comment">//2.通过配置文件 mysql.properties 获取相关连接的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-comment">//读取相关的属性值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br><br>        <span class="hljs-comment">//给数据源 comboPooledDataSource 设置相关的参数</span><br>        <span class="hljs-comment">//说明：连接管理是由 comboPooledDataSource 来管理的</span><br>        comboPooledDataSource.setDriverClass(driver);<br>        comboPooledDataSource.setJdbcUrl(url);<br>        comboPooledDataSource.setUser(user);<br>        comboPooledDataSource.setPassword(password);<br><br>        <span class="hljs-comment">//设置初始化连接数</span><br>        comboPooledDataSource.setInitialPoolSize(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//设置最大连接数（超过最大连接数就会进入等待队列）</span><br>        comboPooledDataSource.setMaxPoolSize(<span class="hljs-number">50</span>);<br><br>        <span class="hljs-comment">//测试连接池的效率</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5000</span>;i++)&#123;<br>            <span class="hljs-comment">//获取连接（从 DataSource 接口实现的）</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> comboPooledDataSource.getConnection();<br>            connection.close();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (end - start)); <span class="hljs-comment">//耗时：371</span><br><br>        System.out.println(<span class="hljs-string">&quot;连接OK&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//方式二 使用配置文件模板来完成</span><br>    <span class="hljs-comment">//1.将 C3P0 提供的 c3p0.config.xml 拷贝到 src 目录下</span><br>    <span class="hljs-comment">//2.该文件指定了连接数据库和连接池的相关参数</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testC3P0_02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">comboPooledDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>(<span class="hljs-string">&quot;db_pool&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> comboPooledDataSource.getConnection();<br>        System.out.println(<span class="hljs-string">&quot;连接OK&quot;</span>);<br>        connection.close();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Druid-德鲁伊-应用实例"><a href="#Druid-德鲁伊-应用实例" class="headerlink" title="Druid(德鲁伊)应用实例"></a>Druid(德鲁伊)应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.datasource;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Druid_</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDruid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.加入 Druid .jar包</span><br>        <span class="hljs-comment">//2.加入 配置文件，将该文件拷贝到项目的src目录</span><br>        <span class="hljs-comment">//3.创建 Properties 对象，读取配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br><br>        <span class="hljs-comment">//4.创建一个指定参数的数据库连接池，Druid连接池</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(properties);<br><span class="hljs-comment">//        Connection connection = dataSource.getConnection();</span><br><span class="hljs-comment">//        System.out.println(&quot;连接成功！&quot;);</span><br><span class="hljs-comment">//        connection.close();</span><br>        <span class="hljs-comment">//测试连接效率</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500000</span>;i++)&#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><span class="hljs-comment">//            System.out.println(&quot;连接成功！&quot;);</span><br>            connection.close();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+(end-start)); <span class="hljs-comment">//耗时：398</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="将-JDBCUtils-工具类改成-Druid-德鲁伊-实现"><a href="#将-JDBCUtils-工具类改成-Druid-德鲁伊-实现" class="headerlink" title="将 JDBCUtils 工具类改成 Druid(德鲁伊)实现"></a>将 JDBCUtils 工具类改成 Druid(德鲁伊)实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.datasource;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtilsByDruid</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds;<br><br>    <span class="hljs-comment">//在静态代码块初始化ds</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br>            ds = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//编写getConnection方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">return</span> ds.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">//关闭连接（在数据库连接池技术中，close只是把使用的Connection对象放回连接池）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet resultSet, PreparedStatement statement, Connection connection)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-literal">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement!=<span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h3><h4 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h4><ol><li><p>关闭 connection 后，resultSet 结果集无法使用</p></li><li><p>resultSet 不利于数据的管理</p></li><li><p>示意图：</p> <img src="image-20221012213546711.png" alt="image-20221012213546711" style="zoom: 43%;" /></li></ol><h4 id="使用土方法解决"><a href="#使用土方法解决" class="headerlink" title="使用土方法解决"></a>使用土方法解决</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用土方法解决ResultSet 封装到 ArrayList</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectToArrayList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//1.得到连接（写进try语句，方便捕获异常）</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//2.组织一个sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from actor where id = ?&quot;</span>;<br>    <span class="hljs-comment">//（写进try语句，方便捕获异常）</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ArrayList&lt;Actor&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Actor&gt;();  <span class="hljs-comment">//创建ArrayLiat对象，存放actor对象</span><br>    <span class="hljs-comment">//3.创建PreparedStatement对象</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        connection = JDBCUtilsByDruid.getConnection();<br>        System.out.println(connection.getClass());<br>        preparedStatement = connection.prepareStatement(sql);<br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//执行，得到结果集</span><br>        set = preparedStatement.executeQuery();<br>        <span class="hljs-comment">//遍历结果集</span><br>        <span class="hljs-keyword">while</span>(set.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;sex&quot;</span>);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">borndate</span> <span class="hljs-operator">=</span> set.getDate(<span class="hljs-string">&quot;borndate&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;phone&quot;</span>);<br>            <span class="hljs-comment">//把得到的resultset记录，封装到Actor对象，加入到List集合</span><br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Actor</span>(id,name,sex,borndate,phone));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;list集合数据：&quot;</span>+list);<br>        <span class="hljs-keyword">for</span>(Actor actor:list)&#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+actor.getId() + <span class="hljs-string">&quot;\t&quot;</span> + actor.getName());<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭资源</span><br>        JDBCUtilsByDruid.close(set,preparedStatement,connection);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> Date borndate;<br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">//一定要给一个无参构造器，反射需要</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Actor</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-comment">//有参构造器... get和set......</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基本介绍-11"><a href="#基本介绍-11" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>commons-dbutils 是 Apache 组织提供的一个开源 JDBC 工具类库，它是对 JDBC 的封装，使用 dbutils 能极大简化 jdbc 编码的工作量</li><li>DbUtils 类<ul><li>QueryRunner类：该类封装了SQL的执行，是线程安全的。可以实现增、删、改、查、批处理</li><li>使用 QueryRunner 类实现查询</li><li>ResultSetHandler 接口：该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式</li></ul></li><li>方法：<ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中</li><li>BeanHandler：将结果中的第一行数据封装到一个对于的 JavaBean 实例中</li><li>BeanListHandler：将结果集中的每一行数据都封装到一个对于的 JavaBean 实例中，再存放到List中</li><li>ColumnListHandler：将结果集中某一列的数据存放到 List 中</li><li>KeyedHandler(name)：将结果集中的每行数据都封装到 Map 里，再把这些map再存到一个map里，其 key 为指定的key</li><li>MapHandler：将结果集中的第一行数据封装到一个 Map 里，key 是列名，value 就是对于的值</li><li>ManListHandler：将结果集中的每一行数据都封装到一个 Map 里，然后再存放到 List</li></ul></li></ul><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.jdbc.datasource;<br><br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtils_USE</span> &#123;<br><br>    <span class="hljs-comment">//使用apache-DBUtils 工具类 + druid 完成对表的crud操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br><br>        <span class="hljs-comment">//2.使用DBUtils类和结果，先引入DBUtils相关jar,加入到本Project</span><br><br>        <span class="hljs-comment">//3.创建 QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>        <span class="hljs-comment">//4.就可以执行相关的方法，返回ArrayList</span><br>        <span class="hljs-comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span><br>        <span class="hljs-comment">//说明：sql语句也可以只查询部分列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;<br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//（1）query方法就是执行sql语句，得到resultset --&gt; 封装到 ArrayList 集合中</span><br>        <span class="hljs-comment">//（2）返回集合</span><br>        <span class="hljs-comment">//（3）connection：连接</span><br>        <span class="hljs-comment">//（4）sql：执行的sql语句</span><br>        <span class="hljs-comment">//（5）new BeanListHandler&lt;&gt;(XXX.class)：将 resultset -&gt; Actor对象 -&gt; 封装到 ArrayList</span><br>        <span class="hljs-comment">//    底层使用反射机制 去获取Actor类的属性，然后进行封装</span><br>        <span class="hljs-comment">//（6）最后的“1”就是给sql语句中的“?”赋值，可以有多个值，因为是可变参数</span><br>        <span class="hljs-comment">//（7）底层得到的resultset，会在query关闭，PreparedStatement也会关闭</span><br>        List&lt;Actor&gt; list = queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;输出集合信息：&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Actor actor:list)&#123;<br>            System.out.println(actor);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        connection.close();<br>        <span class="hljs-comment">//JDBCUtilsByDruid.close(null,null,connection);</span><br>    &#125;<br><br>    <span class="hljs-comment">//演示 apache-dbutils + druid 完成 返回的结果是单行记录（单个对象）</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuerySingle</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br><br>        <span class="hljs-comment">//2.使用DBUtils类和结果，先引入DBUtils相关jar,加入到本Project</span><br><br>        <span class="hljs-comment">//3.创建 QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>        <span class="hljs-comment">//4.就可以执行相关的方法，返回单个对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from actor where id = ?&quot;</span>;<br><br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//因为我们返回的是单行记录 &lt;---&gt; 单个对象，因此使用的Hander是BeanHandler</span><br>        <span class="hljs-type">Actor</span> <span class="hljs-variable">actor</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="hljs-number">3</span>);<br>        System.out.println(actor);<br><br>        <span class="hljs-comment">//释放资源</span><br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-comment">//演示 apache-dbutils + druid 完成 返回的结果是单行单列的情况 - 返回的就是object</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScalar</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br><br>        <span class="hljs-comment">//2.使用DBUtils类和结果，先引入DBUtils相关jar,加入到本Project</span><br><br>        <span class="hljs-comment">//3.创建 QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>        <span class="hljs-comment">//4.就可以执行相关的方法，返回单行单列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name from actor where id = ?&quot;</span>;<br>        <span class="hljs-comment">//解读：因为返回的是一个对象，使用的handler就是ScalarHandler</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), <span class="hljs-number">2</span>);<br>        System.out.println(obj);<br><br>        <span class="hljs-comment">//释放资源</span><br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-comment">//演示 apache-dbutils + druid 完成 dml（update, insert, delete）</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br><br>        <span class="hljs-comment">//2.使用DBUtils类和结果，先引入DBUtils相关jar,加入到本Project</span><br><br>        <span class="hljs-comment">//3.创建 QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>        <span class="hljs-comment">//4.这里可以组织sql完成update, insert, delete</span><br>        <span class="hljs-comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;  //修改</span><br>        <span class="hljs-comment">//String sql = &quot;insert into actor values(null, ?, ?, ?, ?)&quot;;  //插入</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from actor where id = ?&quot;</span>;<br><br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//(1) 执行dml操作是使用queryRunner.update()</span><br>        <span class="hljs-comment">//(2) 返回值是 受影响的行数</span><br>        <span class="hljs-comment">//int affectedRow = queryRunner.update(connection, sql, &quot;张三丰&quot;, 2);</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">affectedRow</span> <span class="hljs-operator">=</span> queryRunner.update(connection,sql,<span class="hljs-number">3</span>);<br>        System.out.println(affectedRow&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;执行成功&quot;</span>:<span class="hljs-string">&quot;执行没有影响到表&quot;</span>);<br><br>        <span class="hljs-comment">//释放资源</span><br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分析 queryRunner.query方法:</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">query</span><span class="hljs-params">(Connection conn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义PreparedStatement</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//接收返回的 ResultSet</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//返回ArrayList</span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        stmt = <span class="hljs-built_in">this</span>.prepareStatement(conn, sql);<span class="hljs-comment">//创建PreparedStatement</span><br>        <span class="hljs-built_in">this</span>.fillStatement(stmt, params);<span class="hljs-comment">//对sql 进行 ? 赋值</span><br>        rs = <span class="hljs-built_in">this</span>.wrap(stmt.executeQuery());<span class="hljs-comment">//执行sql,返回resultset</span><br>        result = rsh.handle(rs);<br>        <span class="hljs-comment">//返回的resultset --&gt; arrayList[result] [使用到反射，对传入class对象处理]</span><br>    &#125; <span class="hljs-keyword">catch</span> (SQLException var33) &#123;<br>        <span class="hljs-built_in">this</span>.rethrow(var33, sql, params);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.close(rs);<span class="hljs-comment">//关闭resultset</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">this</span>.close((Statement)stmt);<span class="hljs-comment">//关闭preparedstatement对象</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="表和-JavaBean-的类型映射关系"><a href="#表和-JavaBean-的类型映射关系" class="headerlink" title="表和 JavaBean 的类型映射关系"></a>表和 JavaBean 的类型映射关系</h4><p>int –&gt; Integer</p><p>char、varchar –&gt; String</p><p>date –&gt; Date</p><p> <img src="/2022/06/30/JavaNote/image-20221012221856652.png" alt="image-20221012221856652"></p><h3 id="DAO-和增删改查通用方法-BasicDao"><a href="#DAO-和增删改查通用方法-BasicDao" class="headerlink" title="DAO 和增删改查通用方法-BasicDao"></a>DAO 和增删改查通用方法-BasicDao</h3><h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><p>先分析一个问题：apache-dbutils + Druid 简化了 JDBC 开发，但还有不足</p><ul><li><p>SQL 语句是固定的，不能通过参数传入，通用性不好，需要进行改进，使其更方便执行 增删改查</p></li><li><p>对于 select 操作，如果有返回值，返回类型不能固定，需要使用 泛型</p></li><li><p>将来的表很多，业务需求复杂，不可能只靠一个 Java 类完成</p></li><li><p>引出 &#x3D;&gt; BasicDAO 画出示意图，看看在实际开发中，应该如何处理</p> <img src="image-20221012232155204.png" alt="image-20221012232155204" style="zoom: 43%;" /></li></ul><img src="image-20221012232238621.png" alt="image-20221012232238621" style="zoom:43%;" /><h4 id="基本说明-2"><a href="#基本说明-2" class="headerlink" title="基本说明"></a>基本说明</h4><ul><li><strong>DAO：data access object 数据访问对象</strong></li><li>这样的通用类，称为 BasicDao，是专门和数据库交互的，即完成对数据库（表）的 crud 操作</li><li>在 BaiscDao 的基础上，实现一张表 对应一个 Dao，更好的完成功能，比如 Customer 表 - Customer.java类（javabean）</li></ul><h4 id="BasicDAO-应用实例"><a href="#BasicDAO-应用实例" class="headerlink" title="BasicDAO 应用实例"></a>BasicDAO 应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jdbcStudy.dao_.dao;<br><span class="hljs-keyword">import</span> com.jdbcStudy.dao_.utils.JDBCUtilsByDruid;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发BasicDAO，是其它DAO的父类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicDAO</span>&lt;T&gt; &#123; <span class="hljs-comment">//泛型指定具体的类型</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">qr</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>    <span class="hljs-comment">//开发通用的 dml 方法，针对任意的表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql, Object... parameters)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> qr.update(connection, sql, parameters);<br>            <span class="hljs-keyword">return</span> update;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql sql语句，可以有 ?</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 传入一个类的class对象，比如Actor.class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameters 传入 ? 的具体的值，可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 根据具体的clazz类型返回对应的ArrayList集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//返回多个对象（即查询的结果是多行），针对任意表</span><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">queryMylti</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-keyword">return</span> qr.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(clazz), parameters);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查询单行结果的通用方法</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">querySingle</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-keyword">return</span> qr.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(clazz),parameters);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查询单行单列的方法，即返回单值的方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryScalar</span><span class="hljs-params">(String sql, Object... parameters)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-keyword">return</span> qr.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), parameters);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.jdbcStudy.dao_.dao;<br><span class="hljs-keyword">import</span> com.jdbcStudy.dao_.domain.Actor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActorDAO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasicDAO</span>&lt;Actor&gt;&#123;<br><br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.jdbcStudy.dao_.test;<br><span class="hljs-keyword">import</span> com.jdbcStudy.dao_.dao.ActorDAO;<br><span class="hljs-keyword">import</span> com.jdbcStudy.dao_.domain.Actor;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDAO</span> &#123;<br><br>    <span class="hljs-comment">//测试ActorDAO 对actor表的crud操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testActorDAO</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ActorDAO</span> <span class="hljs-variable">actorDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActorDAO</span>();<br>        <span class="hljs-comment">//1.查询</span><br>        List&lt;Actor&gt; actors = actorDAO.queryMylti(<span class="hljs-string">&quot;select * from actor where id &gt;= ?&quot;</span>, Actor.class, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(Actor actor:actors)&#123;<br>            System.out.println(actor);<br>        &#125;<br><br>        <span class="hljs-comment">//2.查询单行记录</span><br>        <span class="hljs-type">Actor</span> <span class="hljs-variable">actor</span> <span class="hljs-operator">=</span> actorDAO.querySingle(<span class="hljs-string">&quot;select * from actor where id = ?&quot;</span>, Actor.class, <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;查询单行结果：&quot;</span>);<br>        System.out.println(actor);<br><br>        <span class="hljs-comment">//3.查询单行单列</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> actorDAO.queryScalar(<span class="hljs-string">&quot;select name from actor where id = ?&quot;</span>, <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;查询单行单列：&quot;</span>);<br>        System.out.println(o);<br><br>        <span class="hljs-comment">//4.dml操作 insert, update, delete</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> actorDAO.update(<span class="hljs-string">&quot;insert into actor values(null, ?, ?, ?, ?)&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;2000-11-11&quot;</span>, <span class="hljs-string">&quot;999&quot;</span>);<br>        System.out.println(update&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;执行成功&quot;</span>:<span class="hljs-string">&quot;执行没有影响&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式基本介绍"><a href="#正则表达式基本介绍" class="headerlink" title="正则表达式基本介绍"></a>正则表达式基本介绍</h3><ul><li>一个正则表达式，就是用某种模式去匹配字符串的一个公式。</li></ul><h3 id="正则表达式底层实现-重要"><a href="#正则表达式底层实现-重要" class="headerlink" title="正则表达式底层实现(重要)"></a>正则表达式底层实现(重要)</h3><p>给出一段字符串(文本),请找出所有四个数字连在一起的子串， 比如:  应该找到 1998 1999 3443 9889 </p><p>&#x3D;&#x3D;&#x3D;&gt; 分析底层实现 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.regexp;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分析java的正则表达式的底层实现(重要.)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了&quot;</span> +<br>                <span class="hljs-string">&quot;第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型&quot;</span> +<br>                <span class="hljs-string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的&quot;</span> +<br>                <span class="hljs-string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应&quot;</span> +<br>                <span class="hljs-string">&quot;用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个&quot;</span> +<br>                <span class="hljs-string">&quot;里程碑，标志着Java的应用开始普及9889 &quot;</span>;<br>        <span class="hljs-comment">//目标：匹配所有四个数字</span><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. \\d 表示一个任意的数字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;<br>        <span class="hljs-comment">//2. 创建模式对象[即正则表达式对象]</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-comment">//3. 创建匹配器</span><br>        <span class="hljs-comment">//说明：创建匹配器matcher， 按照 正则表达式的规则 去匹配 content字符串</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br><br>        <span class="hljs-comment">//4.开始匹配</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * matcher.find() 完成的任务 （考虑分组）</span><br><span class="hljs-comment">         * 什么是分组，比如  (\d\d)(\d\d) ,正则表达式中有() 表示分组,第1个()表示第1组,第2个()表示第2组...</span><br><span class="hljs-comment">         * 1. 根据指定的规则 ,定位满足规则的子字符串(比如(19)(98))</span><br><span class="hljs-comment">         * 2. 找到后，将 子字符串的开始的索引记录到 matcher对象的属性 int[] groups;</span><br><span class="hljs-comment">         *    2.1 groups[0] = 0 , 把该子字符串的结束的索引+1的值记录到 groups[1] = 4</span><br><span class="hljs-comment">         *    2.2 记录1组()匹配到的字符串 groups[2] = 0  groups[3] = 2</span><br><span class="hljs-comment">         *    2.3 记录2组()匹配到的字符串 groups[4] = 2  groups[5] = 4</span><br><span class="hljs-comment">         *    2.4.如果有更多的分组.....</span><br><span class="hljs-comment">         * 3. 同时记录oldLast 的值为 子字符串的结束的 索引+1的值即4, 即下次执行find时，就从4开始匹配</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * matcher.group(0) 源码分析:</span><br><span class="hljs-comment">         * public String group(int group) &#123;</span><br><span class="hljs-comment">         *         if (first &lt; 0)</span><br><span class="hljs-comment">         *             throw new IllegalStateException(&quot;No match found&quot;);</span><br><span class="hljs-comment">         *         if (group &lt; 0 || group &gt; groupCount())</span><br><span class="hljs-comment">         *             throw new IndexOutOfBoundsException(&quot;No group &quot; + group);</span><br><span class="hljs-comment">         *         if ((groups[group*2] == -1) || (groups[group*2+1] == -1))</span><br><span class="hljs-comment">         *             return null;</span><br><span class="hljs-comment">         *         return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();</span><br><span class="hljs-comment">         *     &#125;</span><br><span class="hljs-comment">         *  1. 根据 groups[0]=0 和 groups[1]=4 的记录的位置，从content开始截取子字符串返回</span><br><span class="hljs-comment">         *     就是 [0,4) 包含 0 但是不包含索引为 4的位置</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  如果再次指向 find方法.仍然按上面分析来执行</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            <span class="hljs-comment">//小结</span><br>            <span class="hljs-comment">//1. 如果正则表达式有() 即分组</span><br>            <span class="hljs-comment">//2. 取出匹配的字符串规则如下</span><br>            <span class="hljs-comment">//3. group(0) 表示匹配到的子字符串</span><br>            <span class="hljs-comment">//4. group(1) 表示匹配到的子字符串的第1组字串</span><br>            <span class="hljs-comment">//5. group(2) 表示匹配到的子字符串的第2组字串</span><br>            <span class="hljs-comment">//6. ... 但是分组的数不能越界.</span><br>            System.out.println(<span class="hljs-string">&quot;找到: &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>            System.out.println(<span class="hljs-string">&quot;第1组()匹配到的值=&quot;</span> + matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(<span class="hljs-string">&quot;第2组()匹配到的值=&quot;</span> + matcher.group(<span class="hljs-number">2</span>));<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><h4 id="基本介绍-12"><a href="#基本介绍-12" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>如果想灵活运用正则表达式，必须了解其中各种元字符的功能，元字符从功能上大致分为：</p><ul><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ul><h4 id="元字符-转义号"><a href="#元字符-转义号" class="headerlink" title="元字符 - 转义号 \\"></a>元字符 - 转义号 \\</h4><p>\\ 符号说明：在使用正则表达式去检索某些特殊字符的时候，需要用到转义符号，否则检索不到结果甚至报错。</p><p>需要使用转义符号的字符： <strong>. * + ( ) $ &#x2F; \ ? [ ] ^ { }</strong> </p><p><strong>提示：在 Java 的正则表达式中， \\ 代表 一个 \</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例演示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc$(a.bc(123( )&quot;</span>;<br>        <span class="hljs-comment">//匹配( =&gt; \\(</span><br>        <span class="hljs-comment">//匹配. =&gt; \\.</span><br>        <span class="hljs-comment">//String regStr = &quot;\\.&quot;;</span><br>        <span class="hljs-comment">//String regStr = &quot;\\d\\d\\d&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;3&#125;&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到 &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元字符-字符匹配符"><a href="#元字符-字符匹配符" class="headerlink" title="元字符-字符匹配符"></a>元字符-字符匹配符</h4><ul><li><img src="image-20221014150658309.png" alt="image-20221014150658309" style="zoom:60%;" /></li><li><p>\\d 表示可以匹配 0-9 的任意一个数字，相当于 [0-9]</p></li><li><p>\\D 表示可以匹配不是 0-9 的任意一个字符，相当于 [^0-9]</p></li><li><p>\\w 表示匹配任意英文字符、数字和下划线，相当于 [a-zAA-Z0-9_]</p></li><li><p>\\W 表示匹配任意不是英文字符、数字和下划线的字符，相当于 [^a-zAA-Z0-9_]</p></li><li><p>\\s 表示匹配任何空白字符（空格、制表符等）</p></li><li><p>\\S 表示匹配任何非空白字符</p></li><li><p>. 表示匹配除 \n 之外的所有字符，如果要匹配 . ，则需要使用 \\.</p></li><li><p>注意：[ ] 里面的 [. ? *]表示匹配就是. ? *本身</p></li><li><p><strong>附表：</strong></p><img src="image-20221014150738567.png" alt="image-20221014150738567" style="zoom:54%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示字符匹配符 的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a11c8abc _ABCy @&quot;</span>;<br>        <span class="hljs-comment">//String regStr = &quot;[a-z]&quot;;//匹配 a-z之间任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;[A-Z]&quot;;//匹配 A-Z之间任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;abc&quot;;//匹配 abc 字符串[默认区分大小写]</span><br>        <span class="hljs-comment">//String regStr = &quot;(?i)abc&quot;;//匹配 abc 字符串[不区分大小写]</span><br>        <span class="hljs-comment">//String regStr = &quot;a(?i)bc&quot;;//匹配 abc 字符串[只有bc不区分大小写]</span><br>        <span class="hljs-comment">//String regStr = &quot;a((?i)b)c&quot;;//匹配 abc 字符串[只有b不区分大小写]</span><br>        <span class="hljs-comment">//String regStr = &quot;[0-9]&quot;;//匹配 0-9 之间任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;[^a-z]&quot;;//匹配 不在 a-z之间任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;[^0-9]&quot;;//匹配 不在 0-9之间任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;[abcd]&quot;;//匹配 在 abcd中任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;\\D&quot;;//匹配 不在 0-9的任意一个字符</span><br>        <span class="hljs-comment">//String regStr = &quot;\\w&quot;;//匹配 大小写英文字母, 数字，下划线</span><br>        <span class="hljs-comment">//String regStr = &quot;\\W&quot;;//匹配 等价于 [^a-zA-Z0-9_]</span><br>        <br>        <span class="hljs-comment">//\\s 匹配任何空白字符(空格,制表符等)</span><br>        <span class="hljs-comment">//String regStr = &quot;\\s&quot;;</span><br>        <span class="hljs-comment">//\\S 匹配任何非空白字符 ,和\\s刚好相反</span><br>        <span class="hljs-comment">//String regStr = &quot;\\S&quot;;</span><br>        <br>        <span class="hljs-comment">//.  匹配出 \n 之外的所有字符,如果要匹配.本身则需要使用 \\.</span><br>        <span class="hljs-comment">//String regStr = &quot;.&quot;;</span><br><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. 当创建Pattern对象时，指定 Pattern.CASE_INSENSITIVE, 表示匹配是不区分字母大小写.</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr<span class="hljs-comment">/*, Pattern.CASE_INSENSITIVE*/</span>);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到 &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元字符-选择匹配符"><a href="#元字符-选择匹配符" class="headerlink" title="元字符-选择匹配符"></a>元字符-选择匹配符</h4> <img src="image-20221015094843440.png" alt="image-20221015094843440" style="zoom: 50%;" /><ul><li><p>| 表示匹配 “|” 之前或之后的表达式</p><p>示例：ab|cd 表示匹配 ab 或者 cd</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择匹配符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liangyinghua 梁 leung&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liang|梁|leung&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr<span class="hljs-comment">/*, Pattern.CASE_INSENSITIVE*/</span>);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到 &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元字符-限定符"><a href="#元字符-限定符" class="headerlink" title="元字符-限定符"></a>元字符-限定符</h4><ul><li><p>用于指定其前面的字符和组合项连续出现多少次</p></li><li><p><strong>细节：</strong>java匹配默认<strong>贪婪匹配</strong>，即尽可能匹配多的</p></li></ul> <img src="image-20221015095634088.png" alt="image-20221015095634088" style="zoom: 60%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示限定符的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a111111aaaaaahello&quot;</span>;<br><br>        <span class="hljs-comment">//a&#123;3&#125;,1&#123;4&#125;,\\d&#123;2&#125;</span><br>        <span class="hljs-comment">//String regStr = &quot;a&#123;3&#125;&quot;;// 表示匹配 aaa</span><br>        <span class="hljs-comment">//String regStr = &quot;1&#123;4&#125;&quot;;// 表示匹配 1111</span><br>        <span class="hljs-comment">//String regStr = &quot;\\d&#123;2&#125;&quot;;// 表示匹配 两位的任意数字字符</span><br><br>        <span class="hljs-comment">//a&#123;3,4&#125;,1&#123;4,5&#125;,\\d&#123;2,5&#125;</span><br>        <span class="hljs-comment">//细节：java匹配默认贪婪匹配，即尽可能匹配多的</span><br>        <span class="hljs-comment">//String regStr = &quot;a&#123;3,4&#125;&quot;; //表示匹配 aaa 或者 aaaa</span><br>        <span class="hljs-comment">//String regStr = &quot;1&#123;4,5&#125;&quot;; //表示匹配 1111 或者 11111</span><br>        <span class="hljs-comment">//String regStr = &quot;\\d&#123;2,5&#125;&quot;; //匹配2,3,4,5位数</span><br><br>        <span class="hljs-comment">//1+</span><br>        <span class="hljs-comment">//String regStr = &quot;1+&quot;; //匹配一个1或者多个1</span><br>        <span class="hljs-comment">//String regStr = &quot;\\d+&quot;; //匹配一个数字或者多个数字</span><br><br>        <span class="hljs-comment">//1*</span><br>        <span class="hljs-comment">//String regStr = &quot;1*&quot;; //匹配0个1或者多个1</span><br><br>        <span class="hljs-comment">//演示?的使用, 遵守贪婪匹配</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a1?&quot;</span>; <span class="hljs-comment">//匹配 a 或者 a1</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr<span class="hljs-comment">/*, Pattern.CASE_INSENSITIVE*/</span>);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到 &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元字符-定位符"><a href="#元字符-定位符" class="headerlink" title="元字符-定位符"></a>元字符-定位符</h4><p>定位符, 规定要匹配的字符串出现的位置，比如在字符串的开始还是在结束的位置</p> <img src="image-20221015101518508.png" alt="image-20221015101518508" style="zoom:54%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示定位符的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liangyinglianghua yhliang ggliang&quot;</span>;<br>        <span class="hljs-comment">//String content = &quot;123-abc&quot;;</span><br>        <span class="hljs-comment">//以至少1个数字开头，后接任意个小写字母的字符串</span><br>        <span class="hljs-comment">//String regStr = &quot;^[0-9]+[a-z]*&quot;;</span><br>        <span class="hljs-comment">//以至少1个数字开头, 必须以至少一个小写字母结束</span><br>        <span class="hljs-comment">//String regStr = &quot;^[0-9]+[a-z]+$&quot;;</span><br>        <span class="hljs-comment">//以至少1个数字开头, 中间是 - ,必须以至少一个小写字母结束</span><br>        <span class="hljs-comment">//String regStr = &quot;^[0-9]+\\-[a-z]+$&quot;;</span><br><br>        <span class="hljs-comment">// liang\\b表示匹配边界的liang</span><br>        <span class="hljs-comment">// [这里的边界是指：被匹配的字符串最后,也可以是空格的子字符串的后面]</span><br>        <span class="hljs-comment">// String regStr = &quot;liang\\b&quot;;</span><br>        <span class="hljs-comment">// \\B和\\b的含义刚刚相反</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liang\\B&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到=&quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分组与捕获"><a href="#分组与捕获" class="headerlink" title="分组与捕获"></a>分组与捕获</h4> <img src="image-20221015104242065.png" alt="image-20221015104242065" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liangyinghua s7789 nn1189liang&quot;</span>;<br><br>        <span class="hljs-comment">//非命名分组</span><br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">// 1. matcher.group(0) 得到匹配到的字符串</span><br>        <span class="hljs-comment">// 2. matcher.group(1) 得到匹配到的字符串的第1个分组内容</span><br>        <span class="hljs-comment">// 3. matcher.group(2) 得到匹配到的字符串的第2个分组内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;<span class="hljs-comment">//匹配4个数字的字符串</span><br><br>        <span class="hljs-comment">//命名分组（即可以给分组取名）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;<span class="hljs-comment">//匹配4个数字的字符串</span><br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr2);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到=&quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>            System.out.println(<span class="hljs-string">&quot;第1个分组内容=&quot;</span> + matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(<span class="hljs-string">&quot;第1个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="hljs-string">&quot;g1&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;第2个分组内容=&quot;</span> + matcher.group(<span class="hljs-number">2</span>));<br>            System.out.println(<span class="hljs-string">&quot;第2个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="hljs-string">&quot;g2&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示非捕获分组, 语法比较奇怪</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello韩顺平教育 jack韩顺平老师 韩顺平同学hello韩顺平学生&quot;</span>;<br>        <br>        <span class="hljs-comment">//找到 韩顺平教育 、韩顺平老师、韩顺平同学 子字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr11</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育|韩顺平老师|韩顺平同学&quot;</span>;<br>        <span class="hljs-comment">//上面的写法可以等价非捕获分组, 注意：不能 matcher.group(1)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr12</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平(?:教育|老师|同学)&quot;</span>;<br><br>        <span class="hljs-comment">//找到 韩顺平 这个关键字,但是要求只是查找韩顺平教育和 韩顺平老师 中包含有的韩顺平</span><br>        <span class="hljs-comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr22</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平(?=教育|老师)&quot;</span>;<br><br>        <span class="hljs-comment">//找到 韩顺平 这个关键字,但是要求只是查找 不是 (韩顺平教育 和 韩顺平老师) 中包含有的韩顺平</span><br>        <span class="hljs-comment">//下面也是非捕获分组，不能使用 matcher.group(1)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr32</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平(?!教育|老师)&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr32);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到: &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="非贪婪匹配-“-”"><a href="#非贪婪匹配-“-”" class="headerlink" title="非贪婪匹配 “?”"></a>非贪婪匹配 “?”</h4><p><strong>当此字符（?）紧随任何其他限定符（*、+、?、{*n*}、{*n*,}、{*n*,*m*}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 非贪婪匹配</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello111111 ok&quot;</span>;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">regStr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d+&quot;</span>; <span class="hljs-comment">//默认是贪婪匹配</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">regStr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d+?&quot;</span>; <span class="hljs-comment">//非贪婪匹配</span><br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr2);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到: &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正则表达式的应用实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13588889999&quot;</span>;<br><br>        <span class="hljs-comment">// 汉字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\u0391-\uffe5]+$&quot;</span>;<br><br>        <span class="hljs-comment">// 邮政编码</span><br>        <span class="hljs-comment">// 要求：1.是1-9开头的一个六位数.  比如：123890</span><br>        <span class="hljs-comment">//      2.</span><br>        <span class="hljs-comment">//      3.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>;<br><br>        <span class="hljs-comment">// QQ号码</span><br>        <span class="hljs-comment">// 要求:  是1-9开头的一个(5位数-10位数)  比如:  12389 , 1345687 , 187698765</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1-9]\\d&#123;4,9&#125;$&quot;</span>;<br><br>        <span class="hljs-comment">// 手机号码</span><br>        <span class="hljs-comment">// 要求: 必须以13,14,15,18 开头的11位数 , 比如 13588889999</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^1[3|4|5|8]\\d&#123;9&#125;$&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr1);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">if</span>(matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;满足格式&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不满足格式&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示正则表达式的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//String content = &quot;https://www.bilibili.com/video/BV1fh411y7R8?from=search&amp;seid=1831060912083761326&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://edu.3dsmax.tech/yg/bilibili/my6652/pc/qg/05-51/index.html#201211-1?track_id=jMc0jn-hm-yHrNfVad37YdhOUh41XYmjlss9zocM26gspY5ArwWuxb4wYWpmh2Q7GzR7doU0wLkViEhUlO1qNtukyAgake2jG1bTd23lR57XzV83E9bAXWkStcAh4j9Dz7a87ThGlqgdCZ2zpQy33a0SVNMfmJLSNnDzJ71TU68Rc-3PKE7VA3kYzjk4RrKU&quot;</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 思路</span><br><span class="hljs-comment">         * 1. 先确定 url 的开始部分 https:// | http://</span><br><span class="hljs-comment">         * 2.然后通过 ([\w-]+\.)+[\w-]+ 匹配 www.bilibili.com</span><br><span class="hljs-comment">         * 3. /video/BV1fh411y7R8?from=sear 匹配(\/[\w-?=&amp;/%.#]*)?</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^((http|https)://)?([\\w-]+\\.)+[\\w-]+(\\/[\\w-?=&amp;/%.#]*)?$&quot;</span>;<span class="hljs-comment">//注意：[. ? *]表示匹配就是.本身</span><br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">if</span>(matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;满足格式&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不满足格式&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//这里如果使用Pattern的matches 整体匹配 比较简洁</span><br>        System.out.println(Pattern.matches(regStr, content));<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正则表达式三个常用类"><a href="#正则表达式三个常用类" class="headerlink" title="正则表达式三个常用类"></a>正则表达式三个常用类</h3><p>java.util.regex 包主要包括一下三个类 <strong>Pattern 类</strong>、<strong>Matcher 类</strong> 和 <strong>PatternSyntaxException</strong></p><ul><li><p><strong>Pattern 类</strong></p><p>Pattern 对象是一个正则表达式对象。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，调用其公共静态方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Pattern pattern= Pattern.compile(regStr);<br></code></pre></td></tr></table></figure><ul><li><strong>Pattern.matches() 方法</strong> ：用于整体匹配, 在验证输入的字符串是否满足条件使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示Pattern.matches方法，用于整体匹配, 在验证输入的字符串是否满足条件使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello abc hello, 韩顺平教育&quot;</span>;<br>        <span class="hljs-comment">//String regStr = &quot;hello&quot;;  //false</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello.*&quot;</span>;  <span class="hljs-comment">//true</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">matches</span> <span class="hljs-operator">=</span> Pattern.matches(regStr, content);<br>        System.out.println(<span class="hljs-string">&quot;整体匹配：&quot;</span> + matches);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Matcher 类</strong></p><p>Matcher 对象是对输入字符串进行解释和匹配的引擎。与 Pattern 类一样，Matcher 也没有公共构造方法。需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Matcher 类的常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatcherMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello edu jack hspedutom hello smith hello hspedu hspedu&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        <span class="hljs-comment">//matcher.start() 返回找到匹配的起始索引</span><br>        <span class="hljs-comment">//matcher.end() 返回找到匹配的尾部索引加1</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br>            System.out.println(matcher.start());<br>            System.out.println(matcher.end());<br>            System.out.println(<span class="hljs-string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));<br>        &#125;<br><br>        <span class="hljs-comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span><br>        System.out.println(<span class="hljs-string">&quot;整体匹配=&quot;</span> + matcher.matches());<br><br>        <span class="hljs-comment">//完成如果content 有 hspedu 替换成 韩顺平教育</span><br>        regStr = <span class="hljs-string">&quot;hspedu&quot;</span>;<br>        pattern = Pattern.compile(regStr);<br>        matcher = pattern.matcher(content);<br>        <span class="hljs-comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newContent</span> <span class="hljs-operator">=</span> matcher.replaceAll(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;newContent=&quot;</span> + newContent);<br>        System.out.println(<span class="hljs-string">&quot;content=&quot;</span> + content);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>PatternSyntaxException</strong></p><p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><h3 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a>分组、捕获、反向引用</h3><ul><li><p><strong>分组</strong></p><p>用圆括号组成一个比较复杂的匹配模式，那么一个圆括号的部分就可以看作是一个子表达式&#x2F;一个分组</p></li><li><p><strong>捕获</strong></p><p>把正则表达式中子表达式&#x2F;分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组0代表整个表达式</p></li><li><p><strong>反向引用</strong></p><p>圆括号的内容被捕获后，可以在这个括号后被使用，从而写出一个比较实用的匹配模式，称为反向引用。</p><p>反向引用 可在正则表达式内部，也可在正则表达式外部，内部反向引用 <strong>\\</strong>分组号，外部反向引用 **$**分组号</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反向引用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;h1234el9876lo33333 j12324-333999111a1551ck14 tom11 jack22 yyy12345 xxx&quot;</span>;<br><br>        <span class="hljs-comment">//要匹配两个连续的相同数字 :  (\\d)\\1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d)\\1&quot;</span>;<br><br>        <span class="hljs-comment">//要匹配五个连续的相同数字： (\\d)\\1&#123;4&#125;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d)\\1&#123;4&#125;&quot;</span>;<br><br>        <span class="hljs-comment">//要匹配个位与千位相同，十位与百位相同的数 5225 , 1551  (\\d)(\\d)\\2\\1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d)(\\d)\\2\\1&quot;</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 请在字符串中检索商品编号,形式如:12321-333999111 这样的号码,</span><br><span class="hljs-comment">         * 要求满足前面是一个五位数,然后一个-号,然后是一个九位数,连续的每三位要相同</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr4);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到 &quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结巴去重案例"><a href="#结巴去重案例" class="headerlink" title="结巴去重案例"></a>结巴去重案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我....我要....学学学学....编程java!&quot;</span>;<br><br>        <span class="hljs-comment">//1. 去掉所有的.</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        content = matcher.replaceAll(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//2. 去掉重复的字  我我要学学学学编程java!</span><br>        <span class="hljs-comment">// 思路</span><br>        <span class="hljs-comment">//(1) 使用 (.)\\1+ 匹配连续重复的字</span><br>        <span class="hljs-comment">//(2) 使用 反向引用$1 来替换匹配到的内容</span><br>        <span class="hljs-comment">// 注意：因为正则表达式变化，所以需要重置 matcher</span><br>        pattern = Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<span class="hljs-comment">//分组的捕获内容记录到$1</span><br>        matcher = pattern.matcher(content);<br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到=&quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>        <span class="hljs-comment">//使用 反向引用$1 来替换匹配到的内容</span><br>        content = matcher.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;content=&quot;</span> + content);<br><br>        <span class="hljs-comment">//3. 可以使用一条语句 去掉重复的字 我我要学学学学编程java!</span><br>        content = Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;content=&quot;</span> + content);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String-类中使用正则表达式"><a href="#String-类中使用正则表达式" class="headerlink" title="String 类中使用正则表达式"></a>String 类中使用正则表达式</h3><h4 id="替换功能"><a href="#替换功能" class="headerlink" title="替换功能"></a>替换功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String 类 </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(String regex,String replacement)</span><br></code></pre></td></tr></table></figure><h4 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String 类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(String regex)</span>  <span class="hljs-comment">//最终使用的是Matcher的matches()方法（整体匹配）</span><br></code></pre></td></tr></table></figure><h4 id="分割功能"><a href="#分割功能" class="headerlink" title="分割功能"></a>分割功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String 类 </span><br><span class="hljs-keyword">public</span> String[] split(String regex)<br></code></pre></td></tr></table></figure><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReg</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其&quot;</span> +<br>                <span class="hljs-string">&quot;获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发&quot;</span> +<br>                <span class="hljs-string">&quot;布。&quot;</span> +<br>                <span class="hljs-string">&quot;2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升&quot;</span>;<br><br>        <span class="hljs-comment">//使用正则表达式方式，将 JDK1.3 和 JDK1.4 替换成JDK</span><br>        content = content.replaceAll(<span class="hljs-string">&quot;JDK1\\.3|JDK1\\.4&quot;</span>, <span class="hljs-string">&quot;JDK&quot;</span>);<br>        System.out.println(content);<br><br>        <span class="hljs-comment">//要求 验证一个 手机号， 要求必须是以138 139 开头的</span><br>        content = <span class="hljs-string">&quot;13888889999&quot;</span>;<br>        <span class="hljs-keyword">if</span> (content.matches(<span class="hljs-string">&quot;1(38|39)\\d&#123;8&#125;&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;验证成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;验证失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//要求按照 # 或者 - 或者 ~ 或者 数字 来分割</span><br>        System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>        content = <span class="hljs-string">&quot;hello#abc-jack12smith~北京&quot;</span>;<br>        String[] split = content.split(<span class="hljs-string">&quot;#|-|~|\\d+&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : split) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="章节习题"><a href="#章节习题" class="headerlink" title="章节习题"></a>章节习题</h3> <img src="image-20221015155516327.png" alt="image-20221015155516327" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//规定电子邮件规则为</span><br><span class="hljs-comment">//只能有一个@</span><br><span class="hljs-comment">//@前面是用户名,可以是a-z A-Z 0-9 _-字符</span><br><span class="hljs-comment">//@后面是域名,并且域名只能是英文字母， 比如 sohu.com 或者 tsinghua.org.cn</span><br><span class="hljs-comment">//        写出对应的正则表达式, 验证输入的字符串是否为满足规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp@tsinghua.org.cn kkk&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\\w-]+@([a-zA-Z]+\\.)+[a-zA-Z]+$&quot;</span>;<br><br>        <span class="hljs-keyword">if</span> (content.matches(regStr)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;匹配成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;匹配失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//说明</span><br>        <span class="hljs-comment">//1. String 的 matches 是整体匹配</span><br>        <span class="hljs-comment">//2. 看看这个matches 底层</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * String 的 matches</span><br><span class="hljs-comment">         *  public boolean matches(String regex) &#123;</span><br><span class="hljs-comment">         *         return Pattern.matches(regex, this);</span><br><span class="hljs-comment">         *     &#125;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Pattern</span><br><span class="hljs-comment">         *  public static boolean matches(String regex, CharSequence input) &#123;</span><br><span class="hljs-comment">         *         Pattern p = Pattern.compile(regex);</span><br><span class="hljs-comment">         *         Matcher m = p.matcher(input);</span><br><span class="hljs-comment">         *         return m.matches();</span><br><span class="hljs-comment">         *     &#125;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  Mather类 match</span><br><span class="hljs-comment">         *  Attempts to match the entire region against the pattern</span><br><span class="hljs-comment">         *  public boolean matches() &#123;</span><br><span class="hljs-comment">         *         return match(from, ENDANCHOR);</span><br><span class="hljs-comment">         *     &#125;</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20221015155540189.png" alt="image-20221015155540189" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要求验证是不是整数或者小数</span><br><span class="hljs-comment">//提示： 这个题要考虑正数和负数</span><br><span class="hljs-comment">//比如： 123 -345 34.89 -87.9 -0.01 0.45 等</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思路:</span><br><span class="hljs-comment"> * 1. 先写出简单的正则表达式</span><br><span class="hljs-comment"> * 2. 再逐步的完善[根据各种情况来完善]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-0.89&quot;</span>; <span class="hljs-comment">//</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[-+]?([1-9]\\d*|0)(\\.\\d+)?$&quot;</span>;<br><br>        <span class="hljs-keyword">if</span>(content.matches(regStr)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;匹配成功 是整数或者小数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;匹配失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="image-20221015160631226.png" alt="image-20221015160631226" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://www.sohu.com:8080/abc/xxx/yyy/////inde@#$%x.htm&quot;</span>;<br><br>        <span class="hljs-comment">//因为正则表达式是根据要求来编写的，所以，如果需求需要的话，可以改进.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^([a-zA-Z]+)://([a-zA-Z.]+):(\\d+)[\\w-/]*/([\\w.@#$%]+)$&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br><br>        <span class="hljs-keyword">if</span>(matcher.matches()) &#123;<span class="hljs-comment">//整体匹配, 如果匹配成功，可以通过group(x), 获取对应分组的内容</span><br>            System.out.println(<span class="hljs-string">&quot;整体匹配=&quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>            System.out.println(<span class="hljs-string">&quot;协议: &quot;</span> + matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(<span class="hljs-string">&quot;域名: &quot;</span> + matcher.group(<span class="hljs-number">2</span>));<br>            System.out.println(<span class="hljs-string">&quot;端口: &quot;</span> + matcher.group(<span class="hljs-number">3</span>));<br>            System.out.println(<span class="hljs-string">&quot;文件: &quot;</span> + matcher.group(<span class="hljs-number">4</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有匹配成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
